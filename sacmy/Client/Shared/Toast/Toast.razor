@using System.Timers

<div class="toast show align-items-center text-white border-0 mb-2 @GetBackgroundColor()"
     role="alert"
     aria-live="assertive"
     aria-atomic="true">
    <div class="d-flex">
        <div class="toast-body">
            @Message
        </div>
        <button type="button"
                class="btn-close btn-close-white me-2 m-auto"
                @onclick="OnClose">
        </button>
    </div>
</div>

@code {
    [Parameter] public string Type { get; set; } = "primary";
    [Parameter] public string Message { get; set; } = "";
    [Parameter] public EventCallback OnCloseCallback { get; set; }
    private Timer _timer;

    protected override void OnInitialized()
    {
        _timer = new Timer(3000);
        _timer.Elapsed += async (sender, e) => await OnTimerElapsed();
        _timer.Start();
    }

    private string GetBackgroundColor()
    {
        return Type?.ToLower() switch
        {
            "success" => "bg-success",
            "danger" => "bg-danger",
            "warning" => "bg-warning",
            "info" => "bg-info",
            _ => "bg-primary"
        };
    }

    private async Task OnTimerElapsed()
    {
        await InvokeAsync(async () =>
        {
            await OnCloseCallback.InvokeAsync();
        });
    }

    private async Task OnClose()
    {
        _timer?.Stop();
        await OnCloseCallback.InvokeAsync();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
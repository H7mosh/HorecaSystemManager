@using System.Linq.Expressions
@typeparam TItem
@using sacmy.Client.Services
@using sacmy.Client.Components.CustomDataGrid
@using sacmy.Shared.Core
@using sacmy.Shared.ViewModels.CustomerTracker
@using sacmy.Shared.ViewModels.InvoiceViewModel
@using sacmy.Shared.ViewModels.TasksViewModel
@inject UserGlobalClass UserGlobal
@inject IJSRuntime JSRuntime
@inject TaskService TaskService

<style>
    @@import url('../../../wwwroot/css/variables.css');

    .custom-data-grid {
        --primary-light: var(--primary-light, #60a5fa);
        --primary-main: var(--primary-color);
        --primary-dark: #2563eb;
        --header-bg: #f0f9ff;
        --header-text: #1e40af;
        --hover-color: #f0f9ff;
        --alternate-row: #fafbff;
        --border-color: var(--border-color);
        --text-primary: var(--text-color);
        --text-secondary: var(--text-light);
        --shadow-sm: var(--box-shadow);
        --shadow-md: var(--box-shadow-lg);
    }

        .custom-data-grid .mud-table-container {
            border-radius: var(--border-radius-lg);
            overflow: hidden;
            box-shadow: var(--box-shadow);
            border: 1px solid var(--border-color);
            margin: var(--spacing-lg) 0;
            background: var(--text-white);
        }

        .custom-data-grid table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            font-family: var(--font-family-main);
        }

        .custom-data-grid th {
            background: var(--header-bg);
            color: var(--header-text);
            font-weight: 600;
            text-align: left;
            padding: var(--spacing-md) var(--spacing-lg);
            font-size: var(--font-size-sm);
            letter-spacing: 0.03em;
            border-bottom: 2px solid var(--primary-light);
            position: relative;
            transition: all 0.2s ease;
        }

            .custom-data-grid th:after {
                content: '';
                position: absolute;
                bottom: 0;
                left: 0;
                width: 100%;
                height: 2px;
                background: var(--primary-color);
                transform: scaleX(0);
                transition: transform 0.2s ease;
            }

            .custom-data-grid th:hover:after {
                transform: scaleX(1);
            }

        /* Row Styling */
        .custom-data-grid tr {
            height: 64px;
            transition: all 0.25s ease;
        }

        .custom-data-grid td {
            padding: var(--spacing-md) var(--spacing-lg);
            color: var(--text-color);
            font-size: var(--font-size-sm);
            border-bottom: 1px solid var(--border-color);
            transition: all 0.2s ease;
        }

        .custom-data-grid tbody tr:hover {
            background-color: var(--hover-color);
            transform: translateY(-1px);
            box-shadow: var(--box-shadow);
        }

        .custom-data-grid tbody tr:nth-child(even) {
            background-color: var(--alternate-row);
        }

        /* Enhanced Cell Content */
        .custom-data-grid td .mud-chip {
            border-radius: var(--border-radius);
            font-weight: 500;
        }

        /* Status Indicators */
        .custom-data-grid .status-cell {
            display: flex;
            align-items: center;
            gap: var(--spacing-sm);
        }

        .custom-data-grid .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: var(--spacing-sm);
        }

        /* Action Buttons */
        .custom-data-grid .mud-button {
            text-transform: none;
            font-weight: 500;
            border-radius: var(--border-radius);
            transition: all 0.2s ease;
            padding: var(--spacing-sm) var(--spacing-md);
            background-color: var(--primary-color);
            color: var(--text-white);
        }

            .custom-data-grid .mud-button:hover {
                background-color: var(--primary-dark);
                transform: translateY(-1px);
                box-shadow: var(--box-shadow);
            }

            .custom-data-grid .mud-button .mud-button-icon {
                margin-right: var(--spacing-sm);
            }

        /* Switch Styling */
        .custom-data-grid .mud-switch {
            --switch-width: 3.5rem;
            --switch-height: 2rem;
        }

        .custom-data-grid .mud-switch-track {
            background-color: #e2e8f0;
            border-radius: 999px;
            width: var(--switch-width);
            height: var(--switch-height);
            transition: all 0.3s ease;
        }

        .custom-data-grid .mud-switch-thumb {
            background-color: var(--text-white);
            width: calc(var(--switch-height) - 4px);
            height: calc(var(--switch-height) - 4px);
            box-shadow: var(--box-shadow);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .custom-data-grid .mud-switch.mud-checked .mud-switch-track {
            background-color: var(--primary-color);
        }

        /* Loading State */
        .custom-data-grid .mud-progress-circular {
            color: var(--primary-color);
        }

        /* Column Resize Handle */
        .custom-data-grid .mud-table-cell-resize-handle {
            width: 3px;
            background-color: var(--primary-light, #60a5fa);
            opacity: 0;
            transition: opacity 0.2s ease;
        }

        .custom-data-grid th:hover .mud-table-cell-resize-handle {
            opacity: 1;
        }

        /* Empty State */
        .custom-data-grid .mud-table-empty {
            padding: var(--spacing-xxl);
            text-align: center;
            color: var(--text-light);
            font-style: italic;
        }

    @@media (max-width: 768px) {
        .custom-data-grid td, .custom-data-grid th {
            padding: var(--spacing-md) var(--spacing-md);
        }
    }

    @@media print {
        .custom-data-grid {
            box-shadow: none;
        }

            .custom-data-grid tr:hover {
                transform: none;
                box-shadow: none;
            }

            .custom-data-grid .mud-button,
            .custom-data-grid .mud-switch {
                display: none;
            }
    }
</style>

<div class="data-grid-container">
    <!-- Table -->
    <div class="table-responsive">
        <table class="table table-hover">
            <thead class="table-light">
                <tr>
                    @if (MultiSelection)
                    {
                        <th width="40">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox"
                                       checked="@(SelectAll)" @onchange="ToggleSelectAll" id="selectAll">
                                <label class="form-check-label" for="selectAll"></label>
                            </div>
                        </th>
                    }
                    @foreach (var column in Columns)
                    {
                        <th @onclick="() => SortTable(column)" style="cursor: pointer;">
                            @column.Title
                            @if (SortField == column.Property.ToString())
                            {
                                <span>
                                    @if (SortDirection == sacmy.Client.Components.CustomDataGrid.SortDirection.Ascending)
                                    {
                                        <i class="bi bi-caret-up-fill"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-caret-down-fill"></i>
                                    }
                                </span>
                            }
                        </th>
                    }

                    @if (ShowRowButton)
                    {
                        <th>@RowButtonTitle</th>
                    }
                </tr>
            </thead>
            <tbody>
                @if (FilteredItems.Any())
                {
                    @foreach (var item in FilteredItems)
                    {
                        <tr class="@(SelectedItems.Contains(item) ? "table-primary" : "")"
                            @onclick="(e) => OnRowItemClick(item, e)">
                            @if (MultiSelection)
                            {
                                <td @onclick:stopPropagation="true">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox"
                                               checked="@(SelectedItems.Contains(item))"
                                               @onchange="(e) => ToggleSelection(item, e)"
                                               id="check-@GetItemId(item)">
                                        <label class="form-check-label" for="check-@GetItemId(item)"></label>
                                    </div>
                                </td>
                            }
                            @foreach (var column in Columns)
                            {
                                @if (column.IsStickyNoteColumn)
                                {
                                    <td class="text-center" @onclick:stopPropagation="true">
                                        @{
                                            var notesValue = column.Property.Compile().Invoke(item);
                                            var notes = notesValue as System.Collections.Generic.IEnumerable<object>;
                                            bool hasNotes = notes != null && notes.Any();
                                        }
                                        @if (!hasNotes)
                                        {
                                            <button type="button" class="note-button" @onclick="() => OnAddNoteHandler(item)">
                                                <i class="bi bi-plus"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <div class="note-avatars-row" @onclick="() => OnViewNotesHandler(item)">
                                                @foreach (dynamic note in notes.Take(5))
                                                {
                                                    <div class="note-avatar-item">
                                                        <img src="@(note.Employee?.Image ?? "/images/placeholder-avatar.png")" alt="Employee" />
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </td>
                                }
                                else
                                {
                                    <td>
                                        @{
                                            var value = column.Property.Compile().Invoke(item);
                                            var displayValue = column.Formatter != null
                                            ? column.Formatter(item)
                                            : value?.ToString();
                                        }
                                        @displayValue
                                    </td>
                                }
                            }
                            @if (ShowRowButton)
                            {
                                <td @onclick:stopPropagation="true">
                                    <button class="btn btn-primary btn-sm"
                                            @onclick="() => OnRowButtonClickHandler(item)">
                                        @if (!string.IsNullOrEmpty(RowButtonIcon))
                                        {
                                            <i class="@RowButtonIcon me-1"></i>
                                        }
                                        @RowButtonText
                                    </button>
                                </td>
                            }
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="@(Columns.Count + (MultiSelection ? 1 : 0) + (ShowRowButton ? 1 : 0))" class="text-center py-4">
                            No data available
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter] public IEnumerable<TItem> Items { get; set; } = new List<TItem>();
    [Parameter] public List<ColumnDefinition<TItem>> Columns { get; set; } = new List<ColumnDefinition<TItem>>();
    [Parameter] public Func<TItem, bool> QuickFilter { get; set; }
    [Parameter] public bool MultiSelection { get; set; } = true;
    [Parameter] public bool Filterable { get; set; } = true;

    [Parameter] public string SearchString { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> SearchStringChanged { get; set; }

    // Row click handlers
    [Parameter] public EventCallback<sacmy.Client.Components.CustomDataGrid.DataGridRowClickEventArgs<TItem>> OnRowClick { get; set; }
    [Parameter] public EventCallback<HashSet<TItem>> OnSelectedItemsChanged { get; set; }

    // Row Button Parameters
    [Parameter] public bool ShowRowButton { get; set; }
    [Parameter] public string RowButtonText { get; set; } = "Action";
    [Parameter] public string RowButtonTitle { get; set; } = "Actions";
    [Parameter] public string RowButtonIcon { get; set; } = "bi bi-pencil";
    [Parameter] public EventCallback<TItem> OnRowButtonClick { get; set; }

    // Sticky Note handlers
    [Parameter] public EventCallback<TItem> OnAddNote { get; set; }
    [Parameter] public EventCallback<TItem> OnViewNotes { get; set; }

    // Selection
    private HashSet<TItem> SelectedItems { get; set; } = new HashSet<TItem>();
    private bool SelectAll { get; set; } = false;

    // Sorting
    private string SortField { get; set; } = string.Empty;
    private sacmy.Client.Components.CustomDataGrid.SortDirection SortDirection { get; set; } = sacmy.Client.Components.CustomDataGrid.SortDirection.Ascending;

    // Computed properties
    private IEnumerable<TItem> FilteredItems
    {
        get
        {
            var items = Items ?? new List<TItem>();
            if (!string.IsNullOrWhiteSpace(SearchString) && QuickFilter != null)
            {
                items = items.Where(QuickFilter);
            }

            if (!string.IsNullOrEmpty(SortField))
            {
                var property = typeof(TItem).GetProperty(SortField);
                if (property != null)
                {
                    items = SortDirection == sacmy.Client.Components.CustomDataGrid.SortDirection.Ascending
                        ? items.OrderBy(x => property.GetValue(x))
                        : items.OrderByDescending(x => property.GetValue(x));
                }
            }

            return items;
        }
    }

    protected override void OnParametersSet()
    {
        // Create a default filter if none is provided
        if (QuickFilter == null && Filterable)
        {
            QuickFilter = CreateDefaultQuickFilter();
        }
    }

    private Func<TItem, bool> CreateDefaultQuickFilter()
    {
        return item =>
        {
            if (string.IsNullOrWhiteSpace(SearchString))
                return true;

            // Search in all string/object properties
            var properties = typeof(TItem).GetProperties()
                .Where(p => p.PropertyType == typeof(string) ||
                           p.PropertyType == typeof(object) ||
                           (!p.PropertyType.IsValueType && p.PropertyType != typeof(DateTime)));

            foreach (var prop in properties)
            {
                var value = prop.GetValue(item)?.ToString();
                if (!string.IsNullOrEmpty(value) &&
                    value.Contains(SearchString, StringComparison.OrdinalIgnoreCase))
                {
                    return true;
                }
            }

            return false;
        };
    }

    private async Task UpdateQuickFilter()
    {
        if (SearchStringChanged.HasDelegate)
        {
            await SearchStringChanged.InvokeAsync(SearchString);
        }
        StateHasChanged();
    }

    private async Task OnRowItemClick(TItem item, MouseEventArgs e)
    {
        if (OnRowClick.HasDelegate)
        {
            var args = new sacmy.Client.Components.CustomDataGrid.DataGridRowClickEventArgs<TItem>
                {
                    Item = item,
                    MouseEventArgs = e
                };
            await OnRowClick.InvokeAsync(args);
        }
    }

    private async Task OnRowButtonClickHandler(TItem item)
    {
        if (OnRowButtonClick.HasDelegate)
        {
            await OnRowButtonClick.InvokeAsync(item);
        }
    }

    private async Task OnAddNoteHandler(TItem item)
    {
        if (OnAddNote.HasDelegate)
        {
            await OnAddNote.InvokeAsync(item);
        }
    }

    private async Task OnViewNotesHandler(TItem item)
    {
        if (OnViewNotes.HasDelegate)
        {
            await OnViewNotes.InvokeAsync(item);
        }
    }

    private void SortTable(ColumnDefinition<TItem> column)
    {
        if (column == null || !column.Sortable) return;

        string propertyName = GetPropertyName(column.Property);

        if (SortField == propertyName)
        {
            // Toggle direction
            SortDirection = SortDirection == sacmy.Client.Components.CustomDataGrid.SortDirection.Ascending
                ? sacmy.Client.Components.CustomDataGrid.SortDirection.Descending
                : sacmy.Client.Components.CustomDataGrid.SortDirection.Ascending;
        }
        else
        {
            SortField = propertyName;
            SortDirection = sacmy.Client.Components.CustomDataGrid.SortDirection.Ascending;
        }

        StateHasChanged();
    }

    private string GetPropertyName(Expression<Func<TItem, object>> expression)
    {
        if (expression.Body is MemberExpression memberExpression)
        {
            return memberExpression.Member.Name;
        }
        else if (expression.Body is UnaryExpression unaryExpression && unaryExpression.Operand is MemberExpression memberExpr)
        {
            return memberExpr.Member.Name;
        }

        return string.Empty;
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        SelectAll = (bool)e.Value;
        SelectedItems.Clear();

        if (SelectAll)
        {
            foreach (var item in FilteredItems)
            {
                SelectedItems.Add(item);
            }
        }

        NotifySelectionChanged();
    }

    private void ToggleSelection(TItem item, ChangeEventArgs e)
    {
        bool isSelected = (bool)e.Value;

        if (isSelected)
        {
            SelectedItems.Add(item);
        }
        else
        {
            SelectedItems.Remove(item);
        }

        SelectAll = FilteredItems.Count() > 0 && SelectedItems.Count == FilteredItems.Count();
        NotifySelectionChanged();
    }

    private async void NotifySelectionChanged()
    {
        if (OnSelectedItemsChanged.HasDelegate)
        {
            await OnSelectedItemsChanged.InvokeAsync(SelectedItems);
        }
    }

    private string GetItemId(TItem item)
    {
        // Try to get an ID property if it exists
        var idProp = typeof(TItem).GetProperty("Id");
        if (idProp != null)
        {
            return idProp.GetValue(item)?.ToString();
        }

        // Fallback to GetHashCode
        return item.GetHashCode().ToString();
    }
}



<div class="d-flex align-items-center justify-content-center">
    <button class="btn btn-sm btn-outline-secondary me-2"
            @onclick="() => OnPageChanged.InvokeAsync(1)"
            disabled="@(CurrentPage == 1)">
        <i class="bi bi-chevron-double-left"></i>
    </button>

    <button class="btn btn-sm btn-outline-secondary me-2"
            @onclick="() => OnPageChanged.InvokeAsync(CurrentPage - 1)"
            disabled="@(CurrentPage == 1)">
        <i class="bi bi-chevron-left"></i>
    </button>

    @foreach (var pageNum in GetPageNumbers())
    {
        if (pageNum == -1)
        {
            <span class="mx-1">...</span>
        }
        else
        {
            <button class="btn btn-sm @(pageNum == CurrentPage ? "btn-primary" : "btn-outline-secondary") me-2"
                    @onclick="() => OnPageChanged.InvokeAsync(pageNum)">
                @pageNum
            </button>
        }
    }

    <button class="btn btn-sm btn-outline-secondary me-2"
            @onclick="() => OnPageChanged.InvokeAsync(CurrentPage + 1)"
            disabled="@(CurrentPage == TotalPages)">
        <i class="bi bi-chevron-right"></i>
    </button>

    <button class="btn btn-sm btn-outline-secondary"
            @onclick="() => OnPageChanged.InvokeAsync(TotalPages)"
            disabled="@(CurrentPage == TotalPages)">
        <i class="bi bi-chevron-double-right"></i>
    </button>
</div>

@code {
    [Parameter]
    public int CurrentPage { get; set; } = 1;

    [Parameter]
    public int TotalItems { get; set; } = 0;

    [Parameter]
    public int PageSize { get; set; } = 10;

    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }

    private int TotalPages => (int)Math.Ceiling((double)TotalItems / PageSize);

    private List<int> GetPageNumbers()
    {
        var pages = new List<int>();

        // Always show first page
        pages.Add(1);

        // Calculate start and end of visible page buttons
        var startPage = Math.Max(2, CurrentPage - 1);
        var endPage = Math.Min(TotalPages - 1, CurrentPage + 1);

        // Add ellipsis after first page if needed
        if (startPage > 2)
            pages.Add(-1); // -1 represents ellipsis "..."

        // Add page numbers between start and end
        for (int i = startPage; i <= endPage; i++)
        {
            pages.Add(i);
        }

        // Add ellipsis before last page if needed
        if (endPage < TotalPages - 1)
            pages.Add(-1); // -1 represents ellipsis "..."

        // Always show last page if there's more than one page
        if (TotalPages > 1)
            pages.Add(TotalPages);

        return pages;
    }
}
@using System.Text.Json
@using System.Text
@using Newtonsoft.Json
@using sacmy.Client.Configuraion
@using sacmy.Shared.ViewModels.InvoiceViewModel
@inject AppConfig appConfig

<MudDialog>
    <DialogContent>

        <MudSelect T="string" Label="Address" @bind-value="SelectedBranch" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Margin="MudBlazor.Margin.Dense">
            <MudSelectItem Value="@("Erbil")" />
            <MudSelectItem Value="@("zakho")" />
            <MudSelectItem Value="@("Baghdad")" />
        </MudSelect>

        <MudSelect T="string" Label="مصدر الشراء" @bind-value="Company" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Margin="MudBlazor.Margin.Dense">
            <MudSelectItem Value="@("pasabhace zaxo")" />
            <MudSelectItem Value="@("pasabhace Erbil")" />
            <MudSelectItem Value="@("pasabhace Baghdad")" />
        </MudSelect>

        <MudTextField @bind-Value="CarNo" Label="Car Number" Variant="Variant.Outlined" Margin="MudBlazor.Margin.Dense"></MudTextField>

        <MudTextField @bind-Value="Id" Label="Bill Id" Variant="Variant.Outlined" Margin="MudBlazor.Margin.Dense" Disabled="true"></MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Disabled="@isLoading" OnClick="Submit" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">
            @if (isLoading)
            {
                <MudText Class="ms-2">Processing</MudText>
                <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true" />
            }
            else
            {
                <MudText>Transfer</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public int Id { get; set; }
    private string SelectedBranch { get; set; }
    private string Company { get; set; }
    public string CarNo { get; set; }
    bool isLoading = false;

    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }

    async Task Submit()
    {
        isLoading = true;
        // Capture input values
        var transferInvoiceViewModel = new TransferInvoiceViewModel
            {
                SaleBillId = Id,
                Branch = SelectedBranch,
                Company = Company,
                CarNo = CarNo
            };

        var json = JsonConvert.SerializeObject(transferInvoiceViewModel);
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        // Send POST request
        HttpClient httpClient = new HttpClient();
        var response = await httpClient.PostAsync($"{appConfig.BaseApiUrl}/api/Invoice/TransferInvoice", content);

        // Check response status
        if (response.IsSuccessStatusCode)
        {
            MudDialog.Close(DialogResult.Ok(true));
            SnackbarService.Add("Invoice Transferred Successfully", Severity.Success);
        }
        else
        {
            // Handle error
            // For example, display an error message to the user
            // Or log the error
        }
        isLoading = false;
    }

    void Cancel() => MudDialog.Cancel();
}




@page "/Invoice"
@using System.Text
@using Newtonsoft.Json
@using sacmy.Client.Components.CustomDataGrid
@using sacmy.Client.Components.Shared
@using sacmy.Client.Configuraion
@using sacmy.Client.Pages.Components.Dialogs
@using sacmy.Shared.ViewModels.InvoiceViewModel
@using static MudBlazor.CategoryTypes
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject HttpClient httpClient
@inject IDialogService DialogService
@inject AppConfig appConfig



<script>
    window.openFileDialog = function () {
    document.getElementById('fileInput').click();
    };

    window.openModal = function (modalId) {
    console.log("Opening modal with ID:", modalId);
    $('#' + modalId).modal('show');
    };

    window.closeModal = function (modalId) {
    console.log("Closing modal with ID:", modalId);
    $('#' + modalId).modal('hide');
    };
</script>

<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-radius: 50%;
        border-top: 4px solid var(--primary-color);
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }

    .toolbar {
        background-color: #ffffff;
        border-radius: var(--border-radius);
        padding: var(--spacing-md);
        margin-bottom: var(--spacing-md);
        box-shadow: var(--shadow-sm);
        border: 1px solid var(--border-color);
    }

    .search-field {
        max-width: 300px;
    }

    .search-field .form-control {
        border-radius: var(--border-radius);
        border: 1px solid var(--border-color);
    }

    .search-field .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.2rem rgba(59, 130, 246, 0.25);
    }

    .switch-container {
        display: flex;
        align-items: center;
    }

    .form-check-input:checked {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
    }
</style>

@if (isLoading)
{
    <div class="loading-overlay">
        <div class="spinner"></div>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        Error: @errorMessage
    </div>
}

<!-- Search and Filter Toolbar -->
<div class="toolbar d-flex justify-content-between align-items-center mb-3">
    <div class="switch-container">
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="gridSwitch"
                   checked="@showCompletedInvoices"
                   @onchange="OnSwitchChanged">
            <label class="form-check-label" for="gridSwitch">Show Completed Invoices</label>
        </div>
    </div>
    <div class="search-field">
        <div class="input-group">
            <span class="input-group-text">
                <i class="bi bi-search"></i>
            </span>
            <input type="text" class="form-control"
                   placeholder="Search"
                   @bind-value="_searchInvoiceString"
                   @bind-value:event="oninput">
            <button class="btn btn-outline-primary" @onclick="HandleSearch">
                Search
            </button>
            @if (!string.IsNullOrWhiteSpace(_searchInvoiceString))
            {
                <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                    <i class="bi bi-x"></i>
                </button>
            }
        </div>
    </div>
</div>

<sacmy.Client.Components.CustomDataGrid.CustomDataGrid TItem="InvoiceViewModel"
                                            Items="@InvoiceList"
                                            SearchString=""
                                            OnRowClick="InvoiceRowClicked"
                                            OnSelectedItemsChanged="SelectedInvoiceItemsChanged"
                                            Columns="@invoiceColumns"
                                            ShowRowButton="true"
                                            RowButtonText="Items"
                                            RowButtonIcon="@Icons.Material.Outlined.List"
                                            RowButtonTitle="Actions"
                                            OnRowButtonClick="@ShowInvoiceItems" />

<SharedPagination 
    CurrentPage="currentPage"
    TotalPages="totalPages"
    TotalCount="totalCount"
    PageSize="pageSize"
    CurrentPageChanged="GoToPage"
    PageSizeChanged="ChangePageSize" />

<Invoiceitems Invoice="@selectedInvoice"
              IsVisible="@isModalVisible"
              IsVisibleChanged="@HandleModalVisibilityChanged" />

@code {
    private bool isLoading = false;
    private bool isDeleteLoading = false;
    private List<InvoiceViewModel> InvoiceList = new();
    private List<InvoiceViewModel> InvoiceData = new();
    private string _searchInvoiceString = "";
    private string _lastSearchTerm = "";
    private bool showCompletedInvoices = true;

    int selectedId = -1;
    private int currentPage = 1;
    private int pageSize = 15;
    private int totalPages = 1;
    private int totalCount = 0;

    private InvoiceViewModel selectedInvoice;
    private bool isModalVisible;
    private string errorMessage = "";

    // Add debounce timer for search
    private System.Timers.Timer searchTimer;
    private const int SEARCH_DELAY_MS = 500;

    protected override async Task OnInitializedAsync()
    {
        searchTimer = new System.Timers.Timer(SEARCH_DELAY_MS);
        searchTimer.Elapsed += async (sender, e) =>
        {
            await InvokeAsync(async () =>
            {
                await LoadInvoices();
                searchTimer.Stop();
            });
        };

        await LoadInvoices();
    }

    private async Task LoadInvoices()
    {
        isLoading = true;

        try
        {
            // Build the API URL with both isCompleted and searchTerm filters
            var apiUrl = $"api/Invoice?pageNumber={currentPage}&pageSize={pageSize}&isCompleted={showCompletedInvoices}";

            // Add search term if it's not empty
            if (!string.IsNullOrWhiteSpace(_searchInvoiceString))
            {
                apiUrl += $"&searchTerm={Uri.EscapeDataString(_searchInvoiceString)}";
                _lastSearchTerm = _searchInvoiceString;
            }

            var response = await httpClient.GetAsync(apiUrl);

            if (response.Headers.TryGetValues("X-Pagination", out var paginationHeaderValues))
            {
                var paginationHeader = System.Text.Json.JsonSerializer.Deserialize<InvoicePaginationMetadataViewModel>(
                    paginationHeaderValues.FirstOrDefault());

                totalCount = paginationHeader.TotalCount;
                totalPages = paginationHeader.TotalPages;
            }

            if (response.IsSuccessStatusCode)
            {
                // Populate both lists with the data from API
                InvoiceData = await response.Content.ReadFromJsonAsync<List<InvoiceViewModel>>();
                InvoiceList = InvoiceData;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"API error status: {response.StatusCode}, Content: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading invoices: {ex.Message}";
            Console.WriteLine(errorMessage);
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task OnSwitchChanged(ChangeEventArgs e)
    {
        if (e.Value is bool value)
        {
            showCompletedInvoices = value;

            // Reset to the first page when filter changes
            currentPage = 1;

            // Reload data from API with the new filter
            await LoadInvoices();
        }
    }

    private async Task HandleSearch()
    {
        // If search term has changed, reset to first page
        if (_lastSearchTerm != _searchInvoiceString)
        {
            currentPage = 1;
        }

        await LoadInvoices();
    }

    private async Task ClearSearch()
    {
        _searchInvoiceString = "";
        if (!string.IsNullOrWhiteSpace(_lastSearchTerm))
        {
            _lastSearchTerm = "";
            currentPage = 1;
            await LoadInvoices();
        }
    }

    private async void InvoiceRowClicked(sacmy.Client.Components.CustomDataGrid.DataGridRowClickEventArgs<InvoiceViewModel> args)
    {
        // Row click handling code here
    }

    private void SelectedInvoiceItemsChanged(HashSet<InvoiceViewModel> items)
    {
        // Handle selected invoice items here
    }

    private async Task GoToPage(int page)
    {
        if (page != currentPage && page > 0 && page <= totalPages)
        {
            currentPage = page;
            await LoadInvoices();
        }
    }

    private async Task ChangePageSize(int newSize)
    {
        pageSize = newSize;
        currentPage = 1;
        await LoadInvoices();
    }

    private List<ColumnDefinition<InvoiceViewModel>> invoiceColumns = new List<ColumnDefinition<InvoiceViewModel>>
    {
        new ColumnDefinition<InvoiceViewModel>
        {
            Property = x => x.Id,
            Title = "Id"
        },
        new ColumnDefinition<InvoiceViewModel>
        {
            Property = x => x.CustomerName,
            Title = "Customer Name"
        },
        new ColumnDefinition<InvoiceViewModel>
        {
            Property = x => x.CustomerType,
            Title = "Customer Type"
        },
        new ColumnDefinition<InvoiceViewModel>
        {
            Property = x => x.Address,
            Title = "Address"
        },
        new ColumnDefinition<InvoiceViewModel>
        {
            Property = x => x.InvoiceBranch,
            Title = "Branch"
        },
        new ColumnDefinition<InvoiceViewModel>
        {
            Property = x => x.Total,
            Title = "Total",
            Formatter = x => x.Total.ToString("C", new System.Globalization.CultureInfo("en-US"))
        },
        new ColumnDefinition<InvoiceViewModel>
        {
            Property = x => x.DateTime,
            Title = "Date"
        },
        new ColumnDefinition<InvoiceViewModel>
        {
            Property = x => x.TaskStatus,
            Title = "Associated Task Status"
        },
        new ColumnDefinition<InvoiceViewModel>
        {
            Property = x => x.LastComment,
            Title = "Last Comment"
        }
    };

    private async Task ShowInvoiceItems(InvoiceViewModel invoice)
    {
        selectedInvoice = invoice;
        isModalVisible = true;
        StateHasChanged();
    }

    private void HandleModalVisibilityChanged(bool visible)
    {
        isModalVisible = visible;
        if (!visible)
        {
            selectedInvoice = null;
        }
        StateHasChanged();
    }
}

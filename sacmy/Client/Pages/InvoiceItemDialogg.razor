@page "/invoice-items-dialog"
@inject IJSRuntime JSRuntime
@using sacmy.Shared.Core
@using sacmy.Shared.ViewModels.InvoiceViewModel
@namespace sacmy.Client.Pages.Components.Dialogs
@inject ISnackbar Snackbar
@inject UserGlobalClass UserGlobal
@inject HttpClient Http
@inject IDialogService DialogService

<MudDialog>
    <TitleContent>
        <div class="d-flex justify-center align-center">
            <MudText Typo="Typo.h6">Invoice Items</MudText>
        </div>
    </TitleContent>

    <DialogContent>
        <div style="min-width: 800px; min-height: 400px;">
            @if (IsLoading)
            {
                <div class="d-flex justify-center align-center" style="height: 400px;">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="MudBlazor.Size.Large" />
                </div>
            }
            else if (InvoiceItems != null && InvoiceItems.Any())
            {
                <!-- New row for the Send Notification button and Export to PDF button -->
                <div class="d-flex justify-end mb-2">
                    @if (!IsNotificationSent)
                    {
                        <button class="btn btn-warning mr-2" @onclick="SendNotification">Send Notification</button>
                    }
                    <button class="btn btn-primary" @onclick="GeneratePdfReport" disabled="@(IsNotificationSent)">
                        <i class="bi bi-file-pdf-fill"></i> Export to PDF
                    </button>
                </div>

                <!-- Scrollable DataGrid -->
                <div style="height: 400px; overflow: auto;">
                    <MudDataGrid T="InvoiceItemsViewModel"
                                 Items="@InvoiceItems"
                                 Filterable="true"
                                 SortMode="SortMode.Multiple"
                                 Hideable="true"
                                 Disabled="@(!IsNotificationSent)"
                                 Class="custom-data-grid">
                        <Columns>
                            <PropertyColumn Property="x => x.PatternCode" Title="Pattern Code" />
                            <PropertyColumn Property="x => x.Sku" Title="SKU" />
                            <PropertyColumn Property="x => x.Name" Title="Name" />
                            <PropertyColumn Property="x => x.Factory" Title="Factory" />
                            <PropertyColumn Property="x => x.Price" Title="Price" Format="C2" />
                            <PropertyColumn Property="x => x.Quantity" Title="Quantity" />
                            <PropertyColumn Property="x => x.Total" Title="Total" Format="C2" />
                            <PropertyColumn Property="x => x.Cost" Title="Cost" Format="C2" />
                            <PropertyColumn Property="x => x.Batch" Title="Batch" />
                            <TemplateColumn Title="Check" SortBy="x => x.IsChecked">
                                <CellTemplate>
                                    <MudCheckBox @bind-Checked="@context.Item.IsChecked" Color="Color.Primary" Disabled="@(!IsNotificationSent)" />
                                </CellTemplate>
                            </TemplateColumn>
                            <TemplateColumn Title="Notes" SortBy="x => x.Notes">
                                <CellTemplate>
                                    <MudTextField @bind-Value="@context.Item.Notes"
                                                  Variant="Variant.Outlined"
                                                  Lines="1"
                                                  Margin="Margin.Dense"
                                                  Disabled="@(!IsNotificationSent)" />
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                </div>
            }
            else
            {
                <MudText>No items found for this invoice.</MudText>
            }
        </div>
    </DialogContent>

    <DialogActions>
        <button class="btn btn-primary" @onclick="Close">Close</button>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public InvoiceViewModel Invoice { get; set; }

    private bool IsLoading = true;
    private bool IsNotificationSent = false;
    private List<InvoiceItemsViewModel> InvoiceItems { get; set; }
    private string CarName { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        await LoadInvoiceItems();
    }

    private async Task LoadInvoiceItems()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<InvoiceItemsViewModel>>(
                $"api/Invoice/GetInvoiceItems?InvoiceId={Invoice.Id}");

            if (response != null)
            {
                foreach (var item in response)
                {
                    item.IsChecked = false;
                    item.Notes = string.Empty;
                }
            }

            InvoiceItems = response;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading invoice items: {ex.Message}");
            Snackbar.Add("Error loading invoice items", Severity.Error);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task SendNotification()
    {
        try
        {
            var response = await Http.PostAsync($"api/Customer/SendNotification/{Invoice.CustomerName}", null);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Notification sent successfully.", Severity.Success);
                IsNotificationSent = true;
            }
            else
            {
                Snackbar.Add("Error sending notification", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending notification: {ex.Message}");
            Snackbar.Add("Error sending notification", Severity.Error);
        }
    }

    private async Task GeneratePdfReport()
    {
        
        var dialogParameters = new DialogParameters();
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                DisableBackdropClick = true
            };

        var dialog = DialogService.Show<UserPasswordAndCarNumberDialog>("Required Information", dialogParameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            string carNumber = result.Data.ToString();

            try
            {
                await JSRuntime.InvokeVoidAsync("generateInvoiceItemsPDF",
                    new
                    {
                        id = Invoice.Id,
                        customerName = Invoice.CustomerName,
                        dateTime = Invoice.DateTime,
                        carNumber = carNumber,
                        createdBy = $"{UserGlobal.User.FirstName} {UserGlobal.User.LastName}"
                    },
                    InvoiceItems.Select(item => new
                    {
                        patternCode = item.PatternCode,
                        sku = item.Sku,
                        factory = item.Factory,
                        price = item.Price,
                        quantity = item.Quantity,
                        total = item.Total,
                        isChecked = item.IsChecked,
                        notes = item.Notes
                    }).ToList());

                // Mark the invoice as report generated
                //await Http.PutAsync($"api/Invoice/MarkReportGenerated/{Invoice.Id}", null);
                
                Snackbar.Add("Report generated successfully", Severity.Success);

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error generating PDF: {ex.Message}");
                Snackbar.Add("Error generating PDF", Severity.Error);
            }
        }
    }

    private void Close() => MudDialog.Close();
}



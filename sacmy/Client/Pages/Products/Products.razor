@page "/Products"
@using sacmy.Client.Components
@using sacmy.Client.Services
@using sacmy.Client.Shared.Components.DialogHeader
@using sacmy.Client.Shared.Toast
@using sacmy.Shared.Core
@using sacmy.Shared.ViewModels.BrandViewModel
@using sacmy.Shared.ViewModels.CustomerViewModel
@using sacmy.Shared.ViewModels.LowStockViewModels
@using sacmy.Shared.ViewModels.Products
@using sacmy.Client.Pages.Components
@using sacmy.Client.Components.Dialogs
@using sacmy.Shared.ViewModels.StickNoteViewModel
@inject ProductsService ProductsService
@inject BrandService BrandService
@inject StickyNoteService stickyNoteService
@inject IJSRuntime JS
@inject UserGlobalClass UserGlobal
@inject ToastService ToastService



<style>
    /* Main Container and Header Styles */
    .container-fluid {
        padding: 1rem;
    }

    .header-card {
        background: white;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        margin-bottom: 1rem;
    }

    /* Search and Filter Controls */
    .search-box {
        position: relative;
        width: 280px;
    }

        .search-box input {
            width: 100%;
            padding: 0.5rem 1rem 0.5rem 2.5rem;
            border: 1px solid #e5e7eb;
            border-radius: 0.375rem;
        }

        .search-box i {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6b7280;
        }

    /* Product Table Styles */
    .product-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        background: white;
        border-radius: 0.5rem;
        overflow: hidden;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .table-header {
        background: #f9fafb;
    }

        .table-header th {
            padding: 0.75rem 1rem;
            font-weight: 600;
            color: #374151;
            border-bottom: 1px solid #e5e7eb;
            text-align: left;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

    .selected-row {
        background-color: rgba(59, 130, 246, 0.05) !important;
    }

        .selected-row:hover {
            background-color: rgba(59, 130, 246, 0.08) !important;
        }

    .product-row {
        transition: background-color 0.15s;
    }

        .product-row:hover {
            background-color: #f9fafb;
        }

        .product-row td {
            padding: 1rem;
            border-bottom: 1px solid #e5e7eb;
            vertical-align: middle;
        }

    .product-image {
        width: 48px;
        height: 48px;
        object-fit: cover;
        border-radius: 0.375rem;
        background: #f9fafb;
        padding: 0.25rem;
    }

    /* Product Data Display */
    .category-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        background: #f3f4f6;
        color: #374151;
        border-radius: 9999px;
        font-size: 0.75rem;
    }

    .stock-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.875rem;
        font-weight: 500;
    }

        .stock-badge.in-stock {
            background: #def7ec;
            color: #065f46;
        }

        .stock-badge.out-of-stock {
            background: #fee2e2;
            color: #991b1b;
        }

    /* Sticky Notes Display */
    .sticky-notes-container {
        display: flex;
        margin-left: -8px;
    }

    .sticky-note-wrapper {
        position: relative;
        margin-left: -8px;
    }

        .sticky-note-wrapper:first-child {
            margin-left: 0;
        }

    .employee-avatar {
        width: 35px;
        height: 35px;
        border-radius: 50%;
        overflow: hidden;
        position: relative;
        cursor: pointer;
        transition: transform 0.2s ease;
        border: 2px solid white;
    }

        .employee-avatar.add-note {
            background-color: #3B82F6;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }

        .employee-avatar:first-child {
            background-color: #FEE2E2;
        }

        .employee-avatar:last-child {
            background-color: #3B82F6;
        }

        .employee-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .employee-avatar:hover {
            transform: scale(1.1);
            z-index: 2;
        }

    .sticky-note-tooltip {
        position: absolute;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.15);
        padding: 12px;
        width: 280px;
        z-index: 1000;
        top: 100%;
        left: 50%;
        transform: translateX(-50%);
        margin-top: 8px;
        display: none;
    }

    .employee-avatar:hover .sticky-note-tooltip {
        display: block;
    }

    .note-header {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 8px;
        padding-bottom: 8px;
        border-bottom: 1px solid #E5E7EB;
    }

    .note-author-image {
        width: 35px;
        height: 35px;
        border-radius: 50%;
    }

    .note-author-info {
        flex: 1;
    }

    .note-author-name {
        font-weight: 600;
        color: #111827;
        font-size: 14px;
        line-height: 1.25;
    }

    .note-author-title {
        color: #6B7280;
        font-size: 12px;
    }

    .note-content {
        color: #374151;
        font-size: 14px;
        line-height: 1.5;
        margin-bottom: 8px;
    }

    .note-date {
        font-size: 12px;
        color: #6B7280;
    }

    /* Expanded Row and Quick Edit Form */
    .expanded-row {
        background-color: #EFF6FF;
    }

    .quick-edit-form {
        padding: 1.5rem;
        background: #F8FAFC;
        border-radius: 0.5rem;
        margin: 0.5rem 1rem;
        box-shadow: 0 1px 3px rgba(59, 130, 246, 0.1);
        border: 1px solid #E0E7FF;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
    }

        .form-row.three-columns {
            grid-template-columns: 1fr 1fr 1fr;
        }

    .form-group {
        display: flex;
        flex-direction: column;
    }

        .form-group label {
            font-size: 0.875rem;
            font-weight: 500;
            color: #1E40AF;
            margin-bottom: 0.5rem;
        }

        .form-group input,
        .form-group select {
            height: 2.5rem;
            padding: 0.5rem 0.75rem;
            border: 1px solid #BFDBFE;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            color: #1E293B;
            background-color: white;
            transition: all 0.15s ease-in-out;
        }

            .form-group input:focus,
            .form-group select:focus {
                outline: none;
                border-color: #60A5FA;
                box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
            }

            .form-group input:hover,
            .form-group select:hover {
                border-color: #93C5FD;
            }

    .form-actions {
        display: flex;
        justify-content: flex-start;
        gap: 1rem;
        padding-top: 1rem;
        border-top: 1px solid #E0E7FF;
        margin-top: 1rem;
    }

        .form-actions .btn-secondary {
            background-color: #F3F4F6;
            color: #374151;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            font-weight: 500;
            border: 1px solid #D1D5DB;
            transition: all 0.15s ease-in-out;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

            .form-actions .btn-secondary:hover {
                background-color: #E5E7EB;
                border-color: #9CA3AF;
            }

        .form-actions .btn-primary,
        .form-actions .btn-link {
            margin-left: auto;
        }

            .form-actions .btn-primary + .btn-link {
                margin-left: 0;
            }

        .form-actions .btn-primary {
            background-color: #2563EB;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            font-weight: 500;
            border: none;
            transition: background-color 0.15s ease-in-out;
        }

            .form-actions .btn-primary:hover {
                background-color: #1D4ED8;
            }

        .form-actions .btn-link {
            color: #6B7280;
            text-decoration: none;
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
            font-weight: 500;
            transition: color 0.15s ease-in-out;
        }

            .form-actions .btn-link:hover {
                color: #1E40AF;
            }

    /* Pagination */
    .pagination {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border-top: 1px solid #e5e7eb;
    }

    .page-number {
        min-width: 32px;
        height: 32px;
        padding: 0;
        border: 1px solid #e5e7eb;
        background: white;
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #374151;
        cursor: pointer;
        margin: 0 2px;
    }

        .page-number:hover {
            background: #f3f4f6;
        }

        .page-number.active {
            background: #2563eb;
            color: white;
            border-color: #2563eb;
        }

    /* Overview Panel Styles */
    .overview-card {
        background: white;
        border-radius: 0.5rem;
        padding: 1.5rem;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .stat-header {
        color: #6b7280;
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        margin-bottom: 1.5rem;
    }

    .stat-value {
        font-size: 1.875rem;
        font-weight: 600;
        color: #2563eb;
        line-height: 2.25rem;
        margin-top: 0.25rem;
    }

    .progress-bar {
        width: 100%;
        height: 0.5rem;
        background: #f3f4f6;
        border-radius: 9999px;
        margin: 0.5rem 0 1rem;
        overflow: hidden;
    }

    .progress-fill {
        height: 100%;
        border-radius: 9999px;
        transition: width 0.3s ease;
    }

        .progress-fill.available {
            background: #10b981;
        }

        .progress-fill.out-of-stock {
            background: #ef4444;
        }

    .stat-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
    }

    .stat-label {
        color: #6b7280;
        font-size: 0.875rem;
    }

    .stat-number {
        font-size: 0.875rem;
        font-weight: 500;
    }

    /* Hot Products Section */
    .hot-products {
        margin-top: 2rem;
        padding-top: 1.5rem;
        border-top: 1px solid #E5E7EB;
    }

    .hot-header {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .hot-icon {
        color: #EF4444;
    }

    .hot-stats {
        border-radius: 0.5rem;
    }

    .views-row {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
    }

    .views-label {
        font-size: 0.875rem;
        font-weight: 500;
    }

    .views-sublabel {
        font-size: 0.75rem;
        color: #6B7280;
    }

    .views-number {
        font-size: 1.25rem;
        font-weight: 600;
        text-align: right;
    }

    /* PDF Modal Styles */
    #pdfProgressModal .modal-content {
        border-radius: 1rem;
    }

    #pdfProgressModal .progress {
        border-radius: 0.5rem;
        background-color: #e9ecef;
        overflow: hidden;
    }

    #pdfProgressModal .progress-bar {
        border-radius: 0.5rem;
        transition: width 0.3s ease;
        min-width: 0%;
    }

    #pdfProgressModal .bi-file-pdf {
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0%

    {
        transform: scale(1);
    }

    50% {
        transform: scale(1.05);
    }

    100% {
        transform: scale(1);
    }

    }

    /* Responsive Adjustments */
    @@media (max-width: 992px) {
        .d-flex.align-items-center.gap-4

    {
        flex-wrap: wrap;
    }

    .search-box {
        width: 100%;
        margin-top: 0.5rem;
    }

    }

    @@media (max-width: 768px) {
        .product-table

    {
        font-size: 0.875rem;
    }

    .product-image {
        width: 40px;
        height: 40px;
    }

    .category-badge {
        font-size: 0.7rem;
        padding: 0.2rem 0.5rem;
    }

    .stock-badge {
        font-size: 0.7rem;
        padding: 0.2rem 0.5rem;
    }

    }

    .selection-toolbar {
        animation: fadeIn 0.3s ease-in-out;
    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
        transform: translateY(-10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }
</style>

<div class="container-fluid py-3">

    <div class="row">
        <!-- Brand Selection -->
        <div class="col-12">
            <div class="d-flex align-items-center gap-2">
                <select class="form-select bg-white border rounded-3"
                        style="width: 180px;"
                        @bind="selectedBrandId"
                        @oninput="OnBrandSelected">
                    <option value="">All Brands</option>
                    @if (brands != null)
                    {
                        @foreach (var brand in brands)
                        {
                            <option value="@brand.Id">@brand.NameEn</option>
                        }
                    }
                </select>
                <button class="btn btn-outline-primary btn-sm"
                        @onclick="ShowAddBrandDialog">
                    <i class="bi bi-plus-lg"></i>
                </button>
            </div>
        </div>

        <div class="col-xl-9">
            <!-- Header Section -->
            <div class="bg-white p-3 rounded-3 shadow-sm mb-4">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="text-dark mb-0 fw-semibold">IN STOCK</h5>

                    <div class="d-flex align-items-center gap-4">
                        <!-- Stock Filter Checkbox -->
                        <div class="form-check d-flex align-items-center">
                            <input class="form-check-input me-2"
                                   type="checkbox"
                                   id="inStockFilter"
                                   @bind="showOnlyInStock" />
                            <label class="form-check-label" for="inStockFilter">
                                In Stock Only
                            </label>
                        </div>
                        <!-- Category Filter -->
                        <select class="form-select bg-white border" style="width: 180px;" @bind="SelectedCategory">
                            <option value="">All Categories</option>
                            @foreach (var category in brandResponse?.Data?.Categories ?? new List<Category>())
                            {
                                <option value="@category.Id">@category.NameEn</option>
                            }
                        </select>

                        <!-- Search Box -->
                        <div class="position-relative" style="width: 280px;">
                            <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3 text-muted"></i>
                            <input type="text"
                                   class="form-control ps-5 border"
                                   placeholder="Search SKU, Name..."
                                   @bind="searchString"
                                   @bind:event="oninput" />
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-flex align-items-center gap-2">
                            <button class="btn btn-primary d-flex align-items-center gap-2 px-3" @onclick="GeneratePDF">
                                <i class="bi bi-file-pdf"></i>
                                <span>Generate PDF</span>
                            </button>

                            <button class="btn btn-secondary d-flex align-items-center gap-2 px-3"
                                    @onclick="ResetCache"
                                    disabled="@isResettingCache">
                                @if (isResettingCache)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Resetting...</span>
                                }
                                else
                                {
                                    <i class="bi bi-arrow-clockwise"></i>
                                    <span>Reset Cache</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            @if (selectedProductIds.Any())
            {
                <div class="bg-light p-2 rounded-3 shadow-sm mb-3 selection-toolbar">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <span class="me-3 fw-medium">@selectedProductIds.Count products selected</span>
                            <button class="btn btn-link text-decoration-none p-0" @onclick="() => { selectedProductIds.Clear(); StateHasChanged(); }">
                                Clear selection
                            </button>
                        </div>
                        <div>
                            <button class="btn btn-primary" @onclick="ShowCustomizePriceDialog">
                                <i class="bi bi-currency-dollar me-1"></i> Customize Price
                            </button>
                        </div>
                    </div>
                </div>
            }


            @if (isLoading)
            {
                <div class="d-flex justify-content-center my-5">
                    <div class="spinner-border text-primary"></div>
                </div>
            }
            else if (FilteredProducts?.Any() == true)
            {
                <div class="table-responsive">
                    <table class="product-table">
                        <thead class="table-header">
                            <tr>
                                <th style="width: 40px;">
                                    <div class="form-check d-flex justify-content-center">
                                        <input class="form-check-input" 
                                               type="checkbox" 
                                               id="selectAllProducts" 
                                               checked="@AllProductsSelected"
                                               @onchange="(e) => { AllProductsSelected = (bool)e.Value; }" />
                                    </div>
                                </th>
                                <th style="width: 80px;">Image</th>
                                <th style="width: 150px;">Sku</th>
                                <th style="width: 200px;">Name</th>
                                <th style="width: 150px;">Category</th>
                                <th style="width: 150px;">Price</th>
                                <th style="width: 120px;">Stock</th>        
                                <th style="width: 100px;">Stick Notes</th>  
                                <th style="width: 80px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in PaginatedProducts)
                            {
                                <tr class="product-row @(IsProductSelected(product.Id) ? "selected-row" : "")"
                                    @onclick="() => SelectProduct(product.Id)">
                                    <td>
                                        <div class="form-check d-flex justify-content-center">
                                            <input class="form-check-input"
                                                   type="checkbox"
                                                   id="select-@product.Id"
                                                   checked="@IsProductSelected(product.Id)"
                                                   @onchange="(e) => ToggleProductSelection(product.Id, e)"
                                                   @onclick:stopPropagation="true" /> <!-- Stop propagation to prevent the row click handler from firing -->
                                        </div>
                                    </td>
                                    <td>
                                        <img src="@product.Image" class="product-image" alt="@product.Name" />
                                    </td>
                                    <td>
                                        <div class="fw-medium text-dark">@product.Sku</div>
                                        <div class="text-muted small">@product.PatternNumber</div>
                                    </td>
                                    <td>@product.Name</td>
                                    <td>
                                        <span class="category-badge">@GetCategoryName(product.CategoryId)</span>
                                    </td>
                                    <td class="text-end">
                                        <div class="fw-semibold text-dark">$@product.Price</div>
                                        <div class="text-success small">@product.DinarPrice IQD</div>
                                    </td>
                                    <td>
                                        <span class="stock-badge @(product.Quantity > 0 ? "in-stock" : "out-of-stock")">
                                            @if (product.Quantity > 0)
                                            {
                                                <i class="bi bi-check-circle-fill"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-x-circle-fill"></i>
                                            }
                                            @product.Quantity in stock
                                        </span>
                                    </td>
                                    <td>
                                        @if (product.StickyNotes?.Any() == true)
                                        {
                                            <div class="sticky-notes-container" @onclick="() => ShowAllNotes(product.Id, product.StickyNotes)">
                                                @foreach (var note in product.StickyNotes)
                                                {
                                                    <div class="sticky-note-wrapper">
                                                        <div class="employee-avatar" style="background-color: @(note == product.StickyNotes.First() ? "#FEE2E2" : "#D1FAE5")">
                                                            <img src="@(note.Employee?.Image ?? "/images/placeholder-avatar.png")"
                                                                 alt="@($"{note.Employee?.FirstName} {note.Employee?.LastName}")" />

                                                            <div class="sticky-note-tooltip">
                                                                <div class="note-header">
                                                                    <img class="note-author-image"
                                                                         src="@(note.Employee?.Image ?? "/images/placeholder-avatar.png")"
                                                                         alt="@($"{note.Employee?.FirstName} {note.Employee?.LastName}")" />
                                                                    <div class="note-author-info">
                                                                        <div class="note-author-name">@(note.Employee?.FirstName) @(note.Employee?.LastName)</div>
                                                                        <div class="note-author-title">@(note.Employee?.JobTitle ?? "Employee")</div>
                                                                    </div>
                                                                </div>
                                                                <div class="note-content">@note.Note</div>
                                                                <div class="note-date">@note.CreatedDate.ToString("MMM dd, yyyy")</div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="employee-avatar add-note" @onclick="() => ShowAddNoteDialog(product.Id)">
                                                <i class="bi bi-plus-lg"></i>
                                            </div>
                                        }
                                    </td>
                                    <td>
                                        <div class="d-flex gap-2">
                                            <button class="btn btn-link p-0" @onclick="() => ShowMonitorDialog(product.Id)">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            <button class="btn btn-link p-0" @onclick="() => ToggleProductExpand(product.Id)">
                                                <i class="bi @(IsProductExpanded(product.Id) ? "bi-chevron-up" : "bi-chevron-down")"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                @if (IsProductExpanded(product.Id))
                                {
                                    <tr class="expanded-row">
                                        <td colspan="9">
                                            <div class="quick-edit-form">
                                                <div class="form-row">
                                                    <div class="form-group">
                                                        <label>Height</label>
                                                        <input type="number" step="0.01" @bind="@product.Height" />
                                                    </div>
                                                    <div class="form-group">
                                                        <label>Diameter</label>
                                                        <input type="number" step="0.01" @bind="@product.Diameter" />
                                                    </div>
                                                </div>

                                                <div class="form-row">
                                                    <div class="form-group">
                                                        <label>Top</label>
                                                        <input type="number" step="0.01" @bind="@product.Top" />
                                                    </div>
                                                    <div class="form-group">
                                                        <label>Base</label>
                                                        <input type="number" step="0.01" @bind="@product.Base" />
                                                    </div>
                                                </div>

                                                <div class="form-row three-columns">
                                                    <div class="form-group">
                                                        <label>Volume</label>
                                                        <input type="number" step="0.01" @bind="@product.Volume" />
                                                    </div>
                                                    <div class="form-group">
                                                        <label>Weight</label>
                                                        <input type="number" step="0.01" @bind="@product.Weight" />
                                                    </div>
                                                    <div class="form-group">
                                                        <label>Area</label>
                                                        <input type="number" step="0.01" @bind="@product.Area" />
                                                    </div>
                                                </div>

                                                <div class="form-row">
                                                    <div class="form-group">
                                                        <label>EAN</label>
                                                        <input type="text" @bind="@product.Ean" />
                                                    </div>
                                                    <div class="form-group">
                                                        <label>UPC</label>
                                                        <input type="text" @bind="@product.Upc" />
                                                    </div>
                                                </div>

                                                <div class="form-actions">
                                                    <button class="btn btn-secondary" @onclick="() => ShowAdvancedEdit(product)">
                                                        <i class="bi bi-sliders"></i> Advanced Edit
                                                    </button>
                                                    <button class="btn btn-primary position-relative"
                                                            @onclick="() => SaveChanges(product)"
                                                            disabled="@isUpdating">
                                                        @if (isUpdating)
                                                        {
                                                            <span class="spinner-border spinner-border-sm me-2"
                                                                  role="status"
                                                                  aria-hidden="true">
                                                            </span>
                                                            <span>Saving...</span>
                                                        }
                                                        else
                                                        {
                                                            <span>Save Changes</span>
                                                        }
                                                    </button>
                                                    <button class="btn btn-link"
                                                            @onclick="() => ToggleProductExpand(product.Id)"
                                                            disabled="@isUpdating">
                                                        Cancel
                                                    </button>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        
                        </tbody>
                    </table>

                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <div class="text-muted small">
                            Showing @(((CurrentPage - 1) * PageSize) + 1) to @Math.Min(CurrentPage * PageSize, FilteredProducts.Count())
                            of @FilteredProducts.Count() items
                        </div>
                        <sacmy.Client.Components.PaginationComponent 
                            CurrentPage="@CurrentPage"
                            TotalItems="@FilteredProducts.Count()"
                            PageSize="@PageSize"
                            OnPageChanged="@NavigateToPage" />
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    No products found matching your criteria.
                </div>
            }


            @if (!string.IsNullOrWhiteSpace(successMessage))
            {
                <div class="alert alert-success">@successMessage</div>
            }


            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }
        
        </div>

        <div class="col-xl-3">
            <ProductOverviewPanel FilteredProducts="@FilteredProducts" SelectedProductId="@selectedProductIdforPriceChange" />
        </div>
    </div>

    <!-- Progress Modal (Kept in main page since it's using JS interactions) -->
    <div class="modal" id="pdfProgressModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 shadow">
                <div class="modal-header border-0 pb-0">
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-4 pt-0">
                    <!-- Price Adjustment Modal Content -->
                    <div id="price-adjustment-section">
                        <div class="text-center mb-4">
                            <i class="bi bi-file-pdf text-primary" style="font-size: 2.5rem;"></i>
                            <h5 class="modal-title mt-3">PDF Generation Options</h5>
                            <p class="text-muted small mb-4">Configure range and price adjustment</p>

                            <!-- Range Selection -->
                            <div class="mb-4">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6 class="mb-0">Select Range</h6>
                                    <span class="text-muted small">
                                        Total items: <span id="totalItemsCount" class="fw-bold">0</span>
                                    </span>
                                </div>
                                <p class="text-muted small mb-2 text-start">
                                    Maximum 999 items per range
                                </p>
                                <div class="row g-2">
                                    <div class="col">
                                        <div class="input-group">
                                            <span class="input-group-text bg-light">From</span>
                                            <input type="number"
                                                   class="form-control"
                                                   id="rangeFrom"
                                                   min="1"
                                                   value="1">
                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="input-group">
                                            <span class="input-group-text bg-light">To</span>
                                            <input type="number"
                                                   class="form-control"
                                                   id="rangeTo"
                                                   min="1"
                                                   value="999">
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Hide Prices Option -->
                            <div class="mb-4 text-start">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="hidePrices">
                                    <label class="form-check-label" for="hidePrices">
                                        Hide prices in PDF
                                    </label>
                                </div>
                            </div>

                            <!-- Price Adjustment -->
                            <div class="mb-4">
                                <h6 class="text-start mb-2">Price Adjustment</h6>
                                <div class="input-group" style="max-width: 200px;">
                                    <span class="input-group-text bg-light">$</span>
                                    <input type="number"
                                           class="form-control"
                                           id="priceIncrease"
                                           step="0.01"
                                           min="0"
                                           value="0.00"
                                           placeholder="0.00">
                                </div>
                            </div>

                            <button class="btn btn-primary px-4" onclick="startPdfGeneration()">
                                Generate PDF
                            </button>
                        </div>
                    </div>

                    <!-- Progress Section -->
                    <div id="progress-section" style="display: none;">
                        <div class="text-center">
                            <i class="bi bi-file-pdf text-primary" style="font-size: 2.5rem;"></i>
                            <h5 class="mt-3 mb-2">Generating PDF</h5>

                            <div class="progress my-4" style="height: 10px;">
                                <div class="progress-bar bg-primary"
                                     role="progressbar"
                                     style="width: 0%"
                                     aria-valuenow="0"
                                     aria-valuemin="0"
                                     aria-valuemax="100">
                                </div>
                            </div>

                            <div class="d-flex justify-content-between text-muted small mb-2">
                                <span class="progress-count">0 of 0 items</span>
                                <span class="progress-percentage">0%</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>



    <!-- Modals/Dialogs -->
    <StickyNoteDetailsDialog 
        IsVisible="@showNoteDialog" 
        Note="@selectedNote" 
        OnClose="@CloseNoteDialog" />

    <AddStickyNoteDialog 
        IsVisible="@showAddDialog" 
        ProductId="@selectedProductId" 
        OnClose="@CloseAddDialog" 
        OnNoteSaved="@AddNote" />

    <AllNotesDialog 
        IsVisible="@showAllNotesDialog" 
        ProductId="@selectedProductForNotes"
        Notes="@currentProductNotes"
        OnClose="@CloseAllNotesDialog"
        OnNoteSaved="@AddNoteFromTimeline" />

    <StockMonitorDialog 
        IsVisible="@showMonitorDialog" 
        Model="@monitorModel" 
        OnClose="@CloseMonitorDialog" 
        OnSave="@SaveMonitoring" />

    <AddBrandDialog 
        IsVisible="@showAddBrandDialog" 
        Brand="@newBrand" 
        Error="@brandError"
        IsCreating="@isCreatingBrand"
        OnClose="@CloseAddBrandDialog" 
        OnSave="@CreateBrand" />

    <AdvancedEditDialog 
        Product="@selectedProduct"
        IsVisible="@showAdvancedEdit"
        IsVisibleChanged="(value) => showAdvancedEdit = value"
        OnSaved="@HandleAdvancedEditSaved"
        Categories="@brandResponse?.Data?.Categories"
        Collections="@brandResponse?.Data?.Collections"
        Brands="@brands" />

    <CustomizePriceDialog IsVisible="@showCustomizePriceDialog"
                          SelectedCount="@selectedProductIds.Count"
                          SelectedProductIds="@selectedProductIds.ToList()"
                          OnClose="CloseCustomizePriceDialog"
                          OnApplyCustomPrice="ApplyCustomPrice" />
</div>

@code {
    private List<BrandViewModel> brands;
    private string selectedBrandId;
    private string selectedProductIdforPriceChange;
    private bool isLoading = true;
    private string searchString = "";
    private string SelectedCategory = "";
    private HashSet<string> expandedProductIds = new();
    private BrandResponse brandResponse;
    private const string PASABHACE_DEFAULT_ID = "63459FB9-37CD-4119-BA73-8E614E5F308B";
    private int CurrentPage = 1;
    private const int PageSize = 10;
    private bool isUpdating = false;
    private string successMessage = null;
    private string errorMessage = null;
    private IJSObjectReference _jsModule;
    private bool showOnlyInStock = false;
    private Product selectedProduct = new Product();
    private bool showAdvancedEdit;
    private GetStickyNoteViewModel selectedNote;
    private bool showNoteDialog = false;
    private bool showAddDialog = false;
    private string newNoteText = "";
    private string selectedProductId;
    private bool showMonitorDialog = false;
    private MonitorProductViewModel monitorModel = new();
    private string selectedProductIdForMonitoring;
    private bool showAllNotesDialog = false;
    private List<GetStickyNoteViewModel> currentProductNotes;
    private string selectedProductForNotes;
    private bool isAddingNote = false;
    private bool showAddBrandDialog = false;
    private bool isCreatingBrand = false;
    private string brandError = "";
    private BrandViewModel newBrand = new();
    private bool isResettingCache = false;
    private bool showCustomizePriceDialog = false;
    private void ShowCustomizePriceDialog()
    {
        showCustomizePriceDialog = true;
    }

    private void CloseCustomizePriceDialog()
    {
        showCustomizePriceDialog = false;
        StateHasChanged();
    }

    private void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProductIdforPriceChange = productId;
        selectedProduct = FilteredProducts.FirstOrDefault(p => p.Id == productId);
        StateHasChanged();
    }

    private async Task ApplyCustomPrice(CustomPriceViewModel model)
    {
        try
        {
            ToastService.ShowToast($"Custom pricing applied for {selectedProductIds.Count} products for customer {model.CustomerName}", "success");

            // Optionally, refresh product data here
            // await LoadBrands();
            // await SetDefaultBrandAndLoadProducts();

            showCustomizePriceDialog = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error applying custom prices: {ex.Message}", "error");
        }
    }
    
    // Selection properties
    private HashSet<string> selectedProductIds = new HashSet<string>();
    private bool AllProductsSelected
    {
        get => FilteredProducts.Any() && selectedProductIds.Count == FilteredProducts.Count();
        set
        {
            if (value)
            {
                selectedProductIds = new HashSet<string>(FilteredProducts.Select(p => p.Id));
            }
            else
            {
                selectedProductIds.Clear();
            }
            StateHasChanged();
        }
    }

    // Selection methods
    private bool IsProductSelected(string productId) => selectedProductIds.Contains(productId);

    private void ToggleProductSelection(string productId, ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            if (isChecked)
            {
                selectedProductIds.Add(productId);
            }
            else
            {
                selectedProductIds.Remove(productId);
            }
        }
        StateHasChanged();
    }

    // Method to get selected products (for future use)
    private List<Product> GetSelectedProducts()
    {
        return FilteredProducts
            .Where(p => selectedProductIds.Contains(p.Id))
            .ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadBrands();
            await SetDefaultBrandAndLoadProducts();
            isLoading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task LoadBrands()
    {
        try
        {
            brands = await BrandService.GetBrandsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading brands: {ex.Message}");
        }
    }

    private async Task SetDefaultBrandAndLoadProducts()
    {
        try
        {
            selectedBrandId = PASABHACE_DEFAULT_ID;
            brandResponse = await ProductsService.GetProductsByBrandAsync(selectedBrandId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching default brand products: {ex.Message}");
        }
    }

    private async Task OnBrandSelected(ChangeEventArgs e)
    {
        try
        {
            selectedBrandId = e.Value.ToString();
            if (!string.IsNullOrEmpty(selectedBrandId))
            {
                isLoading = true;
                brandResponse = await ProductsService.GetProductsByBrandAsync(selectedBrandId);
                isLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products by brand: {ex.Message}");
        }
    }

    private IEnumerable<Product> FilteredProducts =>
        brandResponse?.Data?.Products?
            .Where(p =>
                (string.IsNullOrEmpty(SelectedCategory) || p.CategoryId == SelectedCategory) &&
                (string.IsNullOrEmpty(searchString) ||
                 p.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                 p.Sku.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                 p.PatternNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase)) &&
                (!showOnlyInStock || p.Quantity > 0)
            )
            .OrderByDescending(p => p.IsNew)
            .ThenBy(p => p.Name) ?? Enumerable.Empty<Product>();

    private IEnumerable<Product> PaginatedProducts =>
        FilteredProducts
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize);

    private void NavigateToPage(int page)
    {
        var totalPages = (int)Math.Ceiling((FilteredProducts?.Count() ?? 0) / (double)PageSize);

        if (page >= 1 && page <= totalPages)
        {
            CurrentPage = page;
            StateHasChanged();
        }
    }

    private string GetCategoryName(string categoryId) =>
        brandResponse?.Data?.Categories
            .FirstOrDefault(c => c.Id == categoryId)?.NameEn ?? "Unknown";

    private void ToggleProductExpand(string productId)
    {
        if (expandedProductIds.Contains(productId))
            expandedProductIds.Remove(productId);
        else
            expandedProductIds.Add(productId);

        StateHasChanged();
    }

    private bool IsProductExpanded(string productId) =>
        expandedProductIds.Contains(productId);

    private async Task GeneratePDF()
    {
        try
        {
            var productsToExport = FilteredProducts?.Select(p => new
            {
                sku = p.Sku,
                patternNumber = p.PatternNumber,
                price = p.Price,
                image = p.Image,
                boxCount = p.BoxCount,
                pieceCount = p.PieceCount
            }).ToList();

            if (productsToExport == null || !productsToExport.Any())
            {
                errorMessage = "No products available to generate PDF.";
                StateHasChanged();
                return;
            }

            // Show modal with price adjustment option
            await JS.InvokeVoidAsync("showPdfModal", productsToExport);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error generating PDF: {ex.Message}";
            StateHasChanged();
        }
    }
    
    private async Task ShowAdvancedEdit(Product product)
    {
        try
        {
            selectedProduct = product;
            showAdvancedEdit = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error showing advanced edit: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task HandleAdvancedEditSaved()
    {
        showAdvancedEdit = false;
        StateHasChanged();
    }

    private async Task SaveChanges(Product product)
    {
        if (isUpdating) return;
        isUpdating = true;

        try
        {
            var updateModel = new UpdateProductViewModel
            {
                ProductId = Guid.Parse(product.Id),
                Name = product.Name,
                PatternNumber = product.PatternNumber,
                Price = double.Parse(product.Price.ToString()),
                CategoryId = product.CategoryId,
                CollectionId = product.SeriesOrCollectionId,
                Quantity = product.Quantity,
                OuterTypeCount = product.BoxCount ?? 0,
                InnerTypeCount = product.PieceCount ?? 0,
                Upc = product.Upc,
                Ean = product.Ean,
                Points = product.Points,
                Volume = double.Parse(product.Volume.ToString())
            };

            var response = await ProductsService.UpdateProductAsync(updateModel);

            if (response.Success)
            {
                ToastService.ShowToast(response.Message ?? "Changes saved successfully", "success");
                await LoadBrands();
                await SetDefaultBrandAndLoadProducts();
            }
            else
            {
                ToastService.ShowToast(response.Message ?? "Failed to save changes", "danger");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error updating product: {ex.Message}", "danger");
        }
        finally
        {
            isUpdating = false;
            ToggleProductExpand(product.Id);
            StateHasChanged();
        }
    }

    #region Dialog Management

    // Sticky Note Details Dialog
    private void ShowNoteDetails(GetStickyNoteViewModel note)
    {
        selectedNote = note;
        showNoteDialog = true;
    }

    private void CloseNoteDialog()
    {
        showNoteDialog = false;
        selectedNote = null;
    }

    // Add Note Dialog
    private void ShowAddNoteDialog(string productId)
    {
        selectedProductId = productId;
        showAddDialog = true;
    }

    private void CloseAddDialog()
    {
        showAddDialog = false;
        newNoteText = "";
        selectedProductId = null;
    }

    private async Task AddNote()
    {
        if (string.IsNullOrWhiteSpace(newNoteText) || string.IsNullOrEmpty(selectedProductId))
            return;

        try
        {
            var model = new AddStickyNoteViewModel
                {
                    TableName = "Products",
                    RecordId = selectedProductId,
                    Note = newNoteText,
                    EmployeeId = UserGlobal.User.Id
                };

            var response = await stickyNoteService.CreateStickyNoteAsync(model);

            if (response.Success)
            {
                ToastService.ShowToast("Note added successfully", "success");
                await LoadBrands();
                CloseAddDialog();
            }
            else
            {
                ToastService.ShowToast(response.Message ?? "Failed to add note", "error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error adding note: {ex.Message}", "error");
        }
    }

    // All Notes Dialog
    private void ShowAllNotes(string productId, List<GetStickyNoteViewModel> notes)
    {
        selectedProductForNotes = productId;
        currentProductNotes = notes;
        showAllNotesDialog = true;
    }

    private void CloseAllNotesDialog()
    {
        showAllNotesDialog = false;
        selectedProductForNotes = null;
        currentProductNotes = null;
        newNoteText = "";
    }

    private async Task AddNoteFromTimeline()
    {
        if (string.IsNullOrWhiteSpace(newNoteText))
        {
            ToastService.ShowToast("Cannot add empty note", "warning");
            return;
        }

        try
        {
            isAddingNote = true;

            var model = new AddStickyNoteViewModel
                {
                    TableName = "Products",
                    RecordId = selectedProductForNotes,
                    Note = newNoteText,
                    EmployeeId = UserGlobal.User.Id
                };

            var response = await stickyNoteService.CreateStickyNoteAsync(model);

            if (response.Success)
            {
                // Refresh the product data
                await LoadBrands();

                // Get the updated product data
                brandResponse = await ProductsService.GetProductsByBrandAsync(selectedBrandId);

                // Find the current product and update the notes list
                var updatedProduct = brandResponse?.Data?.Products?
                    .FirstOrDefault(p => p.Id == selectedProductForNotes);

                if (updatedProduct != null)
                {
                    currentProductNotes = updatedProduct.StickyNotes;
                    StateHasChanged();
                }

                newNoteText = ""; // Clear the input
                ToastService.ShowToast("Note added successfully", "success");
            }
            else
            {
                ToastService.ShowToast(response.Message ?? "Failed to add note", "error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error adding note: {ex.Message}", "error");
        }
        finally
        {
            isAddingNote = false;
            StateHasChanged();
        }
    }

    // Stock Monitor Dialog
    private void ShowMonitorDialog(string productId)
    {
        selectedProductIdForMonitoring = productId;
        monitorModel = new MonitorProductViewModel
            {
                ProductID = Guid.Parse(productId),
                EmployeeID = UserGlobal.User.Id,
                Threshold = 10 // Default suggested threshold
            };
        showMonitorDialog = true;
    }

    private void CloseMonitorDialog()
    {
        showMonitorDialog = false;
        selectedProductIdForMonitoring = null;
        monitorModel = new();
    }

    private async Task SaveMonitoring()
    {
        if (monitorModel.Threshold <= 0)
        {
            ToastService.ShowToast("Threshold must be greater than 0", "warning");
            return;
        }

        try
        {
            var response = await ProductsService.MonitorProductAsync(monitorModel);

            if (response.Success)
            {
                ToastService.ShowToast("Stock alert threshold set successfully", "success");
                CloseMonitorDialog();
            }
            else
            {
                ToastService.ShowToast(response.Message ?? "Failed to set stock alert threshold", "error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error setting stock alert threshold: {ex.Message}", "error");
        }
    }

    // Add Brand Dialog
    private void ShowAddBrandDialog()
    {
        showAddBrandDialog = true;
        newBrand = new BrandViewModel();
        brandError = "";
    }

    private void CloseAddBrandDialog()
    {
        showAddBrandDialog = false;
        newBrand = new BrandViewModel();
        brandError = "";
    }

    private async Task CreateBrand()
    {
        if (string.IsNullOrWhiteSpace(newBrand.NameEn) ||
            string.IsNullOrWhiteSpace(newBrand.NameAr) ||
            string.IsNullOrWhiteSpace(newBrand.Image))
        {
            brandError = "Please fill in all fields";
            return;
        }

        try
        {
            isCreatingBrand = true;
            brandError = "";

            var response = await BrandService.CreateBrandAsync(newBrand);

            if (response.IsSuccessStatusCode)
            {
                await LoadBrands(); // Refresh the brands list
                ToastService.ShowToast("Brand created successfully", "success");
                CloseAddBrandDialog();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                brandError = $"Failed to create brand: {error}";
            }
        }
        catch (Exception ex)
        {
            brandError = $"Error creating brand: {ex.Message}";
        }
        finally
        {
            isCreatingBrand = false;
            StateHasChanged();
        }
    }
    #endregion

    private async Task ResetCache()
    {
        try
        {
            isResettingCache = true;
            StateHasChanged();

            await ProductsService.ResetCacheAsync();

            // Refresh data after cache clear
            await SetDefaultBrandAndLoadProducts();

            ToastService.ShowToast("Cache reset and data refreshed successfully", "success");
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error resetting cache: {ex.Message}", "error");
        }
        finally
        {
            isResettingCache = false;
            StateHasChanged();
        }
    }
}


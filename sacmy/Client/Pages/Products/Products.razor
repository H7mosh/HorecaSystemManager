@page "/Products"
@using sacmy.Client.Components
@using sacmy.Client.Pages.Products.Components
@using sacmy.Client.Services
@using sacmy.Client.Shared.Toast
@using sacmy.Shared.Core
@using sacmy.Shared.ViewModels.BrandViewModel
@using sacmy.Shared.ViewModels.CustomerViewModel
@using sacmy.Shared.ViewModels.LowStockViewModels
@using sacmy.Shared.ViewModels.Notification
@using sacmy.Shared.ViewModels.Products
@using sacmy.Client.Pages.Components
@using sacmy.Client.Components.Dialogs
@using sacmy.Shared.ViewModels.StickNoteViewModel
@inject ProductsService ProductsService
@inject BrandService BrandService
@inject StickyNoteService stickyNoteService
@inject IJSRuntime JS
@inject UserGlobalClass UserGlobal
@inject ToastService ToastService
@inject NotificationClientService NotificationService
@inject CustomerService CustomerService




<!-- MAIN CONTAINER -->
<div class="container-fluid py-4">
    <div class="row g-4">
        <!-- Header with Brand Selection -->
        <div class="col-12">
            <div class="d-flex align-items-center gap-3">
                <div class="brand-select-container">
                    <select class="form-select bg-white border-0 shadow-sm rounded-pill"
                    @bind="selectedBrandId"
                    @oninput="OnBrandSelected">
                        <option value="">All Brands</option>
                        @if (brands != null)
                        {
                            @foreach (var brand in brands)
                            {
                                <option value="@brand.Id">@brand.NameEn</option>
                            }
                        }
                    </select>
                    <i class="bi bi-building position-absolute text-primary"></i>
                </div>
                <button class="btn btn-primary btn-sm rounded-pill shadow-sm"
                @onclick="ShowAddBrandDialog">
                    <i class="bi bi-plus-lg me-1"></i>
                    <span>Add Brand</span>
                </button>
            </div>
        </div>

        <!-- Main Content Area -->
        <div class="col-xl-9">
            <!-- Product Filters Component -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-body">
                    <ProductFilters SearchString="@searchString"
                    SelectedCategory="@SelectedCategory"
                    ShowOnlyInStock="@showOnlyInStock"
                    IsResettingCache="@isResettingCache"
                    Categories="@brandResponse?.Data?.Categories"
                    SearchStringChanged="value => { searchString = value; ApplyFilters(); }"
                    SelectedCategoryChanged="value => { SelectedCategory = value; ApplyFilters(); }"
                    ShowOnlyInStockChanged="value => { showOnlyInStock = value; ApplyFilters(); }"
                    OnFilterChangeCallback="ApplyFilters"
                    OnGeneratePdfCallback="GeneratePDF"
                    OnResetCacheCallback="ResetCache" />
                </div>
            </div>

            <!-- Selection Toolbar -->
            @if (selectedProductIds.Any())
            {
                <div class="selection-toolbar card border-0 shadow-sm mb-4 overflow-hidden">
                    <div class="card-body p-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <div class="selection-badge rounded-pill me-3">
                                    @selectedProductIds.Count
                                </div>
                                <span class="fw-medium text-dark">Products selected</span>
                                <button class="btn btn-link text-decoration-none p-0 ms-3"
                                @onclick="() => { selectedProductIds.Clear(); StateHasChanged(); }">
                                    Clear selection
                                </button>
                            </div>
                            <div>
                                <button class="btn btn-primary rounded-pill" @onclick="ShowCustomizePriceDialog">
                                    <i class="bi bi-currency-dollar me-1"></i> Customize Price
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Loading State -->
            @if (isLoading)
            {
                <div class="loading-container">
                    <div class="spinner-container">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3 text-muted">Loading products...</p>
                    </div>
                </div>
            }
            else if (FilteredProducts?.Any() == true)
            {
                <!-- Product List Component -->
                <div class="card border-0 shadow-sm">
                    <div class="card-body p-0">
                        <ProductListView Products="@PaginatedProducts"
                        AllProductsSelected="@AllProductsSelected"
                        SelectedProductIds="@selectedProductIds"
                        ExpandedProductIds="@expandedProductIds"
                        CurrentPage="@CurrentPage"
                        PageSize="@PageSize"
                        TotalItems="@(FilteredProducts?.Count() ?? 0)"
                        IsUpdating="@isUpdating"
                        Categories="@brandResponse?.Data?.Categories"
                        AllProductsSelectedChanged="value => { AllProductsSelected = value; }"
                        OnProductSelectCallback="SelectProduct"
                        OnProductSelectionToggleCallback="ToggleProductSelection"
                        OnToggleExpandCallback="ToggleProductExpand"
                        OnShowNotesCallback="ShowAllNotes"
                        OnAddNoteCallback="ShowAddNoteDialog"
                        OnMonitorProductCallback="ShowMonitorDialog"
                        OnAdvancedEditCallback="ShowAdvancedEdit"
                        OnSaveChangesCallback="SaveChanges"
                        OnPageChangedCallback="NavigateToPage"
                        OnNotifyCustomersCallback="ShowProductNotificationDialog" />
                    </div>
                </div>
            }
            else
            {
                <div class="empty-state-container">
                    <div class="empty-state">
                        <i class="bi bi-box-seam"></i>
                        <h5>No products found</h5>
                        <p class="text-muted">Try adjusting your search or filter criteria</p>
                    </div>
                </div>
            }

            <!-- Notifications -->
            @if (!string.IsNullOrWhiteSpace(successMessage))
            {
                <div class="alert alert-success mt-3 d-flex align-items-center">
                    <i class="bi bi-check-circle-fill me-2"></i>
                    <div>@successMessage</div>
                </div>
            }

            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <div class="alert alert-danger mt-3 d-flex align-items-center">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    <div>@errorMessage</div>
                </div>
            }
        </div>

        <!-- Sidebar Stats -->
        <div class="col-xl-3">
            <ProductOverviewPanel FilteredProducts="@FilteredProducts" SelectedProductId="@selectedProductIdforPriceChange" />
        </div>
    </div>

    <!-- PDF Generation Modal -->
    <div class="modal fade" id="pdfProgressModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 shadow">
                <div class="modal-header border-0 pb-0">
                    <h5 class="modal-title visually-hidden">PDF Generation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-4 pt-0">
                    <!-- Price Adjustment Modal Content -->
                    <div id="price-adjustment-section">
                        <div class="text-center mb-4">
                            <div class="icon-container mb-3">
                                <i class="bi bi-file-pdf"></i>
                            </div>
                            <h5 class="fw-bold mb-2">PDF Generation Options</h5>
                            <p class="text-muted small mb-4">Configure range and price adjustment</p>

                            <!-- Range Selection -->
                            <div class="options-section mb-4">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6 class="mb-0 fw-semibold">Select Range</h6>
                                    <div class="badge bg-light text-dark">
                                        Total items: <span id="totalItemsCount" class="fw-bold">0</span>
                                    </div>
                                </div>
                                <p class="text-muted small mb-2 text-start">
                                    Maximum 999 items per range
                                </p>
                                <div class="row g-2">
                                    <div class="col">
                                        <div class="input-group">
                                            <span class="input-group-text border-0 bg-light">From</span>
                                            <input type="number"
                                            class="form-control border-0 shadow-sm"
                                            id="rangeFrom"
                                            min="1"
                                            value="1">
                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="input-group">
                                            <span class="input-group-text border-0 bg-light">To</span>
                                            <input type="number"
                                            class="form-control border-0 shadow-sm"
                                            id="rangeTo"
                                            min="1"
                                            value="999">
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Hide Prices Option -->
                            <div class="options-section mb-4 text-start">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="hidePrices">
                                    <label class="form-check-label" for="hidePrices">
                                        Hide prices in PDF
                                    </label>
                                </div>
                            </div>

                            <!-- Price Adjustment -->
                            <div class="options-section mb-4">
                                <h6 class="text-start mb-2 fw-semibold">Price Adjustment</h6>
                                <div class="input-group" style="max-width: 200px;">
                                    <span class="input-group-text border-0 bg-light">$</span>
                                    <input type="number"
                                    class="form-control border-0 shadow-sm"
                                    id="priceIncrease"
                                    step="0.01"
                                    min="0"
                                    value="0.00"
                                    placeholder="0.00">
                                </div>
                            </div>

                            <button class="btn btn-primary px-4 rounded-pill" onclick="startPdfGeneration()">
                                Generate PDF
                            </button>
                        </div>
                    </div>

                    <!-- Progress Section -->
                    <div id="progress-section" style="display: none;">
                        <div class="text-center">
                            <div class="icon-container mb-3">
                                <i class="bi bi-file-pdf"></i>
                            </div>
                            <h5 class="fw-bold mb-3">Generating PDF</h5>

                            <div class="progress mb-3" style="height: 8px;">
                                <div class="progress-bar bg-primary"
                                role="progressbar"
                                style="width: 0%"
                                aria-valuenow="0"
                                aria-valuemin="0"
                                aria-valuemax="100">
                                </div>
                            </div>

                            <div class="d-flex justify-content-between text-muted small mb-2">
                                <span class="progress-count">0 of 0 items</span>
                                <span class="progress-percentage">0%</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Other Modals/Dialogs -->
    <StickyNoteDetailsDialog IsVisible="@showNoteDialog"
    Note="@selectedNote"
    OnClose="@CloseNoteDialog" />

    <AddStickyNoteDialog IsVisible="@showAddDialog"
    ProductId="@selectedProductId"
    OnClose="@CloseAddDialog"
    OnNoteSaved="@AddNote" />

    <AllNotesDialog IsVisible="@showAllNotesDialog"
    ProductId="@selectedProductForNotes"
    Notes="@currentProductNotes"
    OnClose="@CloseAllNotesDialog"
    OnNoteSaved="@AddNoteFromTimeline" />

    <StockMonitorDialog IsVisible="@showMonitorDialog"
    Model="@monitorModel"
    OnClose="@CloseMonitorDialog"
    OnSave="@SaveMonitoring" />

    <AddBrandDialog IsVisible="@showAddBrandDialog"
    Brand="@newBrand"
    Error="@brandError"
    IsCreating="@isCreatingBrand"
    OnClose="@CloseAddBrandDialog"
    OnSave="@CreateBrand" />

    <AdvancedEditDialog Product="@selectedProduct"
    IsVisible="@showAdvancedEdit"
    IsVisibleChanged="(value) => showAdvancedEdit = value"
    OnSaved="@HandleAdvancedEditSaved"
    Categories="@brandResponse?.Data?.Categories"
    Collections="@brandResponse?.Data?.Collections"
    Brands="@brands" />

    <CustomizePriceDialog IsVisible="@showCustomizePriceDialog"
    SelectedCount="@selectedProductIds.Count"
    SelectedProductIds="@selectedProductIds.ToList()"
    OnClose="CloseCustomizePriceDialog"
    OnApplyCustomPrice="ApplyCustomPrice" />

    <!-- Notification Dialog -->
    <div class="modal fade @(showNotificationDialog ? "show" : "")" id="notificationModal" tabindex="-1" role="dialog"
    style="display: @(showNotificationDialog ? "block" : "none")">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content border-0 shadow">
                <div class="modal-header border-0">
                    <h5 class="modal-title fw-bold">
                        <i class="bi bi-bell me-2 text-info"></i>Send Product Notification
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseNotificationDialog"></button>
                </div>
                <div class="modal-body p-4">
                    <div class="mb-3">
                        <label for="notificationTitle" class="form-label fw-medium">Title</label>
                        <input type="text" class="form-control shadow-sm border-0"
                        id="notificationTitle" @bind="notificationTitle"
                        placeholder="Enter notification title" />
                    </div>
                    <div class="mb-3">
                        <label for="notificationMessage" class="form-label fw-medium">Message</label>
                        <textarea class="form-control shadow-sm border-0" rows="3"
                        id="notificationMessage" @bind="notificationMessage"
                        placeholder="Enter notification message"></textarea>
                    </div>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" id="scheduleNotification"
                        @bind="scheduleNotification">
                        <label class="form-check-label" for="scheduleNotification">
                            Schedule for later
                        </label>
                    </div>
                    @if (scheduleNotification)
                    {
                        <div class="mb-3">
                            <label for="scheduleDateTime" class="form-label fw-medium">Schedule Date/Time</label>
                            <input type="datetime-local" class="form-control shadow-sm border-0"
                            id="scheduleDateTime" @bind="scheduleDateTime" />
                        </div>
                    }
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-light rounded-pill" @onclick="CloseNotificationDialog">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-primary rounded-pill"
                    @onclick="SendNotificationToAllCustomers"
                    disabled="@isSendingNotification">
                        @if (isSendingNotification)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                            <span>Sending...</span>
                        }
                        else
                        {
                            <i class="bi bi-send me-1"></i>
                            <span>Send Notification</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal backdrop -->
    @if (showNotificationDialog)
    {
        <div class="modal-backdrop fade show"></div>
    }
</div>

<style>

    :root {
    --primary-color: #0D6EFD;
    --primary-light: #E6F0FF;
    --success-color: #10B981;
    --success-light: #ECFDF5;
    --danger-color: #EF4444;
    --danger-light: #FEE2E2;
    --warning-color: #F59E0B;
    --warning-light: #FEF3C7;
    --gray-100: #F3F4F6;
    --gray-200: #E5E7EB;
    --gray-300: #D1D5DB;
    --gray-400: #9CA3AF;
    --gray-500: #6B7280;
    --gray-700: #374151;
    --gray-800: #1F2937;
    --gray-900: #111827;
    --border-radius: 0.5rem;
    --border-radius-lg: 0.75rem;
    --border-radius-sm: 0.25rem;
    --shadow-sm: 0 1px 3px rgba(0,0,0,0.08);
    --shadow-md: 0 4px 6px rgba(0,0,0,0.05), 0 1px 3px rgba(0,0,0,0.1);
    --shadow-lg: 0 10px 15px -3px rgba(0,0,0,0.05), 0 4px 6px -2px rgba(0,0,0,0.025);
    --transition: all 0.2s ease;
    }

    .brand-select-container {
    position: relative;
    width: 220px;
    }

    .brand-select-container select {
    padding-left: 2.5rem;
    height: 42px;
    font-weight: 500;
    }

    .brand-select-container i {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    font-size: 1.1rem;
    }

    .selection-toolbar {
    animation: fadeIn 0.3s ease-in-out;
    background-color: var(--primary-light);
    border-left: 4px solid var(--primary-color) !important;
    }

    .selection-badge {
    background-color: var(--primary-color);
    color: white;
    padding: 0.25rem 0.75rem;
    font-weight: 600;
    font-size: 0.875rem;
    }

    .loading-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 300px;
    }

    .spinner-container {
    text-align: center;
    }

    .empty-state-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 300px;
    }

    .empty-state {
    text-align: center;
    padding: 3rem;
    background-color: var(--gray-100);
    border-radius: var(--border-radius);
    max-width: 400px;
    }

    .empty-state i {
    font-size: 3rem;
    color: var(--gray-400);
    margin-bottom: 1rem;
    }

    .empty-state h5 {
    margin-bottom: 0.5rem;
    font-weight: 600;
    }

    .icon-container {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 64px;
    height: 64px;
    margin: 0 auto;
    border-radius: 50%;
    background-color: var(--primary-light);
    }

    .icon-container i {
    font-size: 1.75rem;
    color: var(--primary-color);
    }

    .options-section {
    background-color: white;
    border-radius: var(--border-radius);
    padding: 1rem;
    }

    @@keyframes fadeIn {
    from {
    opacity: 0;
    transform: translateY(-10px);
    }

    to {
    opacity: 1;
    transform: translateY(0);
    }

    }
</style>

@code {
    private List<BrandViewModel> brands;
    private string selectedBrandId;
    private string selectedProductIdforPriceChange;
    private bool isLoading = true;
    private string searchString = "";
    private string SelectedCategory = "";
    private HashSet<string> expandedProductIds = new();
    private BrandResponse brandResponse;
    private const string PASABHACE_DEFAULT_ID = "63459FB9-37CD-4119-BA73-8E614E5F308B";
    private int CurrentPage = 1;
    private const int PageSize = 10;
    private bool isUpdating = false;
    private string successMessage = null;
    private string errorMessage = null;
    private IJSObjectReference _jsModule;
    private bool showOnlyInStock = false;
    private Product selectedProduct = new Product();
    private bool showAdvancedEdit;
    private GetStickyNoteViewModel selectedNote;
    private bool showNoteDialog = false;
    private bool showAddDialog = false;
    private string newNoteText = "";
    private string selectedProductId;
    private bool showMonitorDialog = false;
    private MonitorProductViewModel monitorModel = new();
    private string selectedProductIdForMonitoring;
    private bool showAllNotesDialog = false;
    private List<GetStickyNoteViewModel> currentProductNotes;
    private string selectedProductForNotes;
    private bool isAddingNote = false;
    private bool showAddBrandDialog = false;
    private bool isCreatingBrand = false;
    private string brandError = "";
    private BrandViewModel newBrand = new();
    private bool isResettingCache = false;
    private bool showCustomizePriceDialog = false;
    private HashSet<string> selectedProductIds = new HashSet<string>();
    private bool showNotificationDialog = false;
    private string notificationTitle = "";
    private string notificationMessage = "";
    private bool scheduleNotification = false;
    private DateTime scheduleDateTime = DateTime.Now.AddHours(1);
    private bool isSendingNotification = false;
    private string selectedProductIdForNotification;
    private bool AllProductsSelected
    {
        get => FilteredProducts.Any() && selectedProductIds.Count == FilteredProducts.Count();
        set
        {
            if (value)
            {
                selectedProductIds = new HashSet<string>(FilteredProducts.Select(p => p.Id));
            }
            else
            {
                selectedProductIds.Clear();
            }
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadBrands();
            await SetDefaultBrandAndLoadProducts();
            isLoading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task LoadBrands()
    {
        try
        {
            brands = await BrandService.GetBrandsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading brands: {ex.Message}");
        }
    }

    private async Task SetDefaultBrandAndLoadProducts()
    {
        try
        {
            selectedBrandId = PASABHACE_DEFAULT_ID;
            brandResponse = await ProductsService.GetProductsByBrandAsync(selectedBrandId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching default brand products: {ex.Message}");
        }
    }

    private async Task OnBrandSelected(ChangeEventArgs e)
    {
        try
        {
            selectedBrandId = e.Value.ToString();
            if (!string.IsNullOrEmpty(selectedBrandId))
            {
                isLoading = true;
                brandResponse = await ProductsService.GetProductsByBrandAsync(selectedBrandId);
                isLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products by brand: {ex.Message}");
        }
    }

    private IEnumerable<Product> FilteredProducts =>
        brandResponse?.Data?.Products?
            .Where(p =>
                (string.IsNullOrEmpty(SelectedCategory) || p.CategoryId == SelectedCategory) &&
                (string.IsNullOrEmpty(searchString) ||
                 p.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                 p.Sku.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                 p.PatternNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase)) &&
                (!showOnlyInStock || p.Quantity > 0)
            )
            .OrderByDescending(p => p.IsNew)
            .ThenBy(p => p.Name) ?? Enumerable.Empty<Product>();

    private IEnumerable<Product> PaginatedProducts =>
        FilteredProducts
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize);

    private void NavigateToPage(int page)
    {
        var totalPages = (int)Math.Ceiling((FilteredProducts?.Count() ?? 0) / (double)PageSize);

        if (page >= 1 && page <= totalPages)
        {
            CurrentPage = page;
            StateHasChanged();
        }
    }

    private void ApplyFilters()
    {
        // Reset to first page when filters change
        CurrentPage = 1;
        StateHasChanged();
    }

    private async Task GeneratePDF()
    {
        try
        {
            var productsToExport = FilteredProducts?.Select(p => new
            {
                sku = p.Sku,
                patternNumber = p.PatternNumber,
                price = p.Price,
                image = p.Image,
                boxCount = p.BoxCount,
                pieceCount = p.PieceCount
            }).ToList();

            if (productsToExport == null || !productsToExport.Any())
            {
                errorMessage = "No products available to generate PDF.";
                StateHasChanged();
                return;
            }

            // Show modal with price adjustment option
            await JS.InvokeVoidAsync("showPdfModal", productsToExport);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error generating PDF: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task ShowAdvancedEdit(Product product)
    {
        try
        {
            selectedProduct = product;
            showAdvancedEdit = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error showing advanced edit: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task HandleAdvancedEditSaved()
    {
        showAdvancedEdit = false;
        StateHasChanged();
    }

    private void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProductIdforPriceChange = productId;
        selectedProduct = FilteredProducts.FirstOrDefault(p => p.Id == productId);
        StateHasChanged();
    }

    private void ToggleProductSelection((string productId, bool isChecked) selection)
    {
        if (selection.isChecked)
        {
            selectedProductIds.Add(selection.productId);
        }
        else
        {
            selectedProductIds.Remove(selection.productId);
        }
        StateHasChanged();
    }

    private void ToggleProductExpand(string productId)
    {
        if (expandedProductIds.Contains(productId))
            expandedProductIds.Remove(productId);
        else
            expandedProductIds.Add(productId);

        StateHasChanged();
    }

    private async Task SaveChanges(Product product)
    {
        if (isUpdating) return;
        isUpdating = true;

        try
        {
            var updateModel = new UpdateProductViewModel
                {
                    ProductId = Guid.Parse(product.Id),
                    Name = product.Name,
                    PatternNumber = product.PatternNumber,
                    Price = double.Parse(product.Price.ToString()),
                    CategoryId = product.CategoryId,
                    CollectionId = product.SeriesOrCollectionId,
                    Quantity = product.Quantity,
                    OuterTypeCount = product.BoxCount ?? 0,
                    InnerTypeCount = product.PieceCount ?? 0,
                    Upc = product.Upc,
                    Ean = product.Ean,
                    Points = product.Points,
                    Volume = double.Parse(product.Volume.ToString())
                };

            var response = await ProductsService.UpdateProductAsync(updateModel);

            if (response.Success)
            {
                ToastService.ShowToast(response.Message ?? "Changes saved successfully", "success");
                await LoadBrands();
                await SetDefaultBrandAndLoadProducts();
            }
            else
            {
                ToastService.ShowToast(response.Message ?? "Failed to save changes", "danger");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error updating product: {ex.Message}", "danger");
        }
        finally
        {
            isUpdating = false;
            ToggleProductExpand(product.Id);
            StateHasChanged();
        }
    }

    private void ShowAllNotes((string productId, List<GetStickyNoteViewModel> notes) data)
    {
        selectedProductForNotes = data.productId;
        currentProductNotes = data.notes;
        showAllNotesDialog = true;
    }

    private void CloseAllNotesDialog()
    {
        showAllNotesDialog = false;
        selectedProductForNotes = null;
        currentProductNotes = null;
        newNoteText = "";
    }

    private void ShowAddNoteDialog(string productId)
    {
        selectedProductId = productId;
        showAddDialog = true;
    }

    private void CloseAddDialog()
    {
        showAddDialog = false;
        newNoteText = "";
        selectedProductId = null;
    }

    private async Task AddNote()
    {
        if (string.IsNullOrWhiteSpace(newNoteText) || string.IsNullOrEmpty(selectedProductId))
            return;

        try
        {
            var model = new AddStickyNoteViewModel
                {
                    TableName = "Products",
                    RecordId = selectedProductId,
                    Note = newNoteText,
                    EmployeeId = UserGlobal.User.Id
                };

            var response = await stickyNoteService.CreateStickyNoteAsync(model);

            if (response.Success)
            {
                ToastService.ShowToast("Note added successfully", "success");
                await LoadBrands();
                CloseAddDialog();
            }
            else
            {
                ToastService.ShowToast(response.Message ?? "Failed to add note", "error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error adding note: {ex.Message}", "error");
        }
    }

    private async Task AddNoteFromTimeline()
    {
        if (string.IsNullOrWhiteSpace(newNoteText))
        {
            ToastService.ShowToast("Cannot add empty note", "warning");
            return;
        }

        try
        {
            isAddingNote = true;

            var model = new AddStickyNoteViewModel
                {
                    TableName = "Products",
                    RecordId = selectedProductForNotes,
                    Note = newNoteText,
                    EmployeeId = UserGlobal.User.Id
                };

            var response = await stickyNoteService.CreateStickyNoteAsync(model);

            if (response.Success)
            {
                // Refresh the product data
                await LoadBrands();

                // Get the updated product data
                brandResponse = await ProductsService.GetProductsByBrandAsync(selectedBrandId);

                // Find the current product and update the notes list
                var updatedProduct = brandResponse?.Data?.Products?
                    .FirstOrDefault(p => p.Id == selectedProductForNotes);

                if (updatedProduct != null)
                {
                    currentProductNotes = updatedProduct.StickyNotes;
                    StateHasChanged();
                }

                newNoteText = ""; // Clear the input
                ToastService.ShowToast("Note added successfully", "success");
            }
            else
            {
                ToastService.ShowToast(response.Message ?? "Failed to add note", "error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error adding note: {ex.Message}", "error");
        }
        finally
        {
            isAddingNote = false;
            StateHasChanged();
        }
    }

    private void ShowNoteDetails(GetStickyNoteViewModel note)
    {
        selectedNote = note;
        showNoteDialog = true;
    }

    private void CloseNoteDialog()
    {
        showNoteDialog = false;
        selectedNote = null;
    }

    private void ShowMonitorDialog(string productId)
    {
        selectedProductIdForMonitoring = productId;
        monitorModel = new MonitorProductViewModel
            {
                ProductID = Guid.Parse(productId),
                EmployeeID = UserGlobal.User.Id,
                Threshold = 10 // Default suggested threshold
            };
        showMonitorDialog = true;
    }

    private void CloseMonitorDialog()
    {
        showMonitorDialog = false;
        selectedProductIdForMonitoring = null;
        monitorModel = new();
    }

    private async Task SaveMonitoring()
    {
        if (monitorModel.Threshold <= 0)
        {
            ToastService.ShowToast("Threshold must be greater than 0", "warning");
            return;
        }

        try
        {
            var response = await ProductsService.MonitorProductAsync(monitorModel);

            if (response.Success)
            {
                ToastService.ShowToast("Stock alert threshold set successfully", "success");
                CloseMonitorDialog();
            }
            else
            {
                ToastService.ShowToast(response.Message ?? "Failed to set stock alert threshold", "error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error setting stock alert threshold: {ex.Message}", "error");
        }
    }

    private async Task ResetCache()
    {
        try
        {
            isResettingCache = true;
            StateHasChanged();

            await ProductsService.ResetCacheAsync();

            // Refresh data after cache clear
            await SetDefaultBrandAndLoadProducts();

            ToastService.ShowToast("Cache reset and data refreshed successfully", "success");
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error resetting cache: {ex.Message}", "error");
        }
        finally
        {
            isResettingCache = false;
            StateHasChanged();
        }
    }

    private void ShowAddBrandDialog()
    {
        showAddBrandDialog = true;
        newBrand = new BrandViewModel();
        brandError = "";
    }

    private void CloseAddBrandDialog()
    {
        showAddBrandDialog = false;
        newBrand = new BrandViewModel();
        brandError = "";
    }

    private async Task CreateBrand()
    {
        if (string.IsNullOrWhiteSpace(newBrand.NameEn) ||
            string.IsNullOrWhiteSpace(newBrand.NameAr) ||
            string.IsNullOrWhiteSpace(newBrand.Image))
        {
            brandError = "Please fill in all fields";
            return;
        }

        try
        {
            isCreatingBrand = true;
            brandError = "";

            var response = await BrandService.CreateBrandAsync(newBrand);

            if (response.IsSuccessStatusCode)
            {
                await LoadBrands(); // Refresh the brands list
                ToastService.ShowToast("Brand created successfully", "success");
                CloseAddBrandDialog();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                brandError = $"Failed to create brand: {error}";
            }
        }
        catch (Exception ex)
        {
            brandError = $"Error creating brand: {ex.Message}";
        }
        finally
        {
            isCreatingBrand = false;
            StateHasChanged();
        }
    }

    private void ShowCustomizePriceDialog()
    {
        showCustomizePriceDialog = true;
    }

    private void CloseCustomizePriceDialog()
    {
        showCustomizePriceDialog = false;
        StateHasChanged();
    }

    private async Task ApplyCustomPrice(CustomPriceViewModel model)
    {
        try
        {
            ToastService.ShowToast($"Custom pricing applied for {selectedProductIds.Count} products for customer {model.CustomerName}", "success");

            // Optionally, refresh product data here
            // await LoadBrands();
            // await SetDefaultBrandAndLoadProducts();

            showCustomizePriceDialog = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error applying custom prices: {ex.Message}", "error");
        }
    }

    private void ShowProductNotificationDialog(string productId)
    {
        var product = FilteredProducts.FirstOrDefault(p => p.Id == productId);
        if (product != null)
        {
            selectedProductIdForNotification = productId;
            notificationTitle = $"New update for {product.Name}";
            notificationMessage = "";
            scheduleNotification = false;
            scheduleDateTime = DateTime.Now.AddHours(1);
            showNotificationDialog = true;
            StateHasChanged();
        }
    }

    // Add this method to close the notification dialog
    private void CloseNotificationDialog()
    {
        showNotificationDialog = false;
        StateHasChanged();
    }

    // Add this method to send the notification
    private async Task SendNotificationToAllCustomers()
    {
        if (string.IsNullOrWhiteSpace(notificationTitle) || string.IsNullOrWhiteSpace(notificationMessage))
        {
            ToastService.ShowToast("Please enter both title and message", "warning");
            return;
        }
        try
        {
            isSendingNotification = true;
            StateHasChanged();

            // Get all customer Firebase tokens
            var customersResponse = await CustomerService.GetCustomersAsync(1, 10000); 
            List<CustomerViewModel> customers = new List<CustomerViewModel>();

            if (customersResponse.Success && customersResponse.Data != null)
            {
                // Filter customers with non-null Firebase tokens
                customers = customersResponse.Data
                    .Where(c => !string.IsNullOrEmpty(c.FirebaseToken))
                    .ToList();
            }

            if (customers.Count == 0)
            {
                ToastService.ShowToast("No customers with valid Firebase tokens found", "warning");
                return;
            }

            if (scheduleNotification)
            {
                // Create scheduled notification request
                var scheduledRequest = new ScheduledNotificationRequestViewModel
                    {
                        Title = notificationTitle,
                        Body = notificationMessage,
                        FirebaseTokens = customers.Select(token => token.FirebaseToken).ToList(),
                        employeeNotification = false,
                        ScheduleTime = scheduleDateTime,
                    };

                await NotificationService.ScheduleNotificationAsync(scheduledRequest);
                ToastService.ShowToast($"Notification scheduled for {scheduleDateTime:g} to {customers.Count} customers", "success");
            }
            else
            {
                // Create immediate notification request
                var request = new NotificationRequest
                    {
                        Title = notificationTitle,
                        Message = selectedProduct.Id,
                        Description = notificationMessage,
                        Type = "product",
                        UserIdAndTokenList = customers.Select(token => new UserIdAndToken
                        {
                            Id = token.Id.ToString(),
                            FirebaseToken = token.FirebaseToken
                        }).ToList(),
                        ScheduleTime = null
                    };

                await NotificationService.SendNotificationAsync(request);
                ToastService.ShowToast($"Notification sent to {customers.Count} customers successfully", "success");
            }

            CloseNotificationDialog();
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error sending notification: {ex.Message}", "danger");
        }
        finally
        {
            isSendingNotification = false;
            StateHasChanged();
        }
    }
}


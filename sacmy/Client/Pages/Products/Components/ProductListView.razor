@using sacmy.Shared.ViewModels.Products
@using sacmy.Client.Services
@using sacmy.Shared.ViewModels.StickNoteViewModel

<div class="table-responsive product-table-container">
    <table class="product-table">
        <thead>
            <tr>
                <th class="checkbox-column">
                    <div class="form-check">
                        <input class="form-check-input"
                               type="checkbox"
                               id="selectAllProducts"
                               checked="@AllProductsSelected"
                               @onchange="(e) => { AllProductsSelected = (bool)e.Value; }" />
                        <label class="form-check-label" for="selectAllProducts"></label>
                    </div>
                </th>
                <th class="image-column">Image</th>
                <th class="sku-column">SKU</th>
                <th class="name-column">Name</th>
                <th class="category-column">Category</th>
                <th class="price-column">Price</th>
                <th class="stock-column">Stock</th>
                <th class="notes-column">Notes</th>
                <th class="actions-column">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Products)
            {
                <tr class="@(IsProductSelected(product.Id) ? "selected-row" : "")"
                    @onclick="() => OnProductSelect(product.Id)">
                    <td class="checkbox-column">
                        <div class="form-check">
                            <input class="form-check-input"
                                   type="checkbox"
                                   id="select-@product.Id"
                                   checked="@IsProductSelected(product.Id)"
                                   @onchange="(e) => OnProductSelectionToggle(product.Id, e)"
                                   @onclick:stopPropagation="true" />
                            <label class="form-check-label" for="select-@product.Id"></label>
                        </div>
                    </td>
                    <td class="image-column">
                        <div class="product-image-container">
                            <img src="@product.Image"
                                 class="product-image"
                                 alt="@product.Name"
                                 @onload="() => OnImageLoaded(product.Id)"
                                 @onerror="() => OnImageError(product.Id)" />
                        </div>
                    </td>
                    <td class="sku-column">
                        <div class="product-sku">@product.Sku</div>
                        <div class="product-pattern">@product.PatternNumber</div>
                    </td>
                    <td class="name-column">
                        <div class="product-name">@product.Name</div>
                    </td>
                    <td class="category-column">
                        <span class="category-badge">@GetCategoryName(product.CategoryId)</span>
                    </td>
                    <td class="price-column">
                        <div class="product-price">$@product.Price</div>
                        <div class="product-price-alt">@product.DinarPrice IQD</div>
                    </td>
                    <td class="stock-column">
                        <div class="stock-badge @(product.Quantity > 0 ? "in-stock" : "out-of-stock")">
                            @if (product.Quantity > 0)
                            {
                                <i class="bi bi-check-circle-fill"></i>
                                <span>@product.Quantity in stock</span>
                            }
                            else
                            {
                                <i class="bi bi-x-circle-fill"></i>
                                <span>Out of stock</span>
                            }
                        </div>
                    </td>
                    <td class="notes-column">
                        @if (product.StickyNotes?.Any() == true)
                        {
                            <div class="sticky-notes-container" @onclick="() => OnShowNotes(product.Id, product.StickyNotes)">
                                @foreach (var note in product.StickyNotes.Take(3))
                                {
                                    <div class="sticky-note-wrapper">
                                        <div class="employee-avatar" style="background-color: @(GetNoteBgColor(note, product.StickyNotes))">
                                            <img src="@(note.Employee?.Image ?? "/images/placeholder-avatar.png")"
                                                 alt="@($"{note.Employee?.FirstName} {note.Employee?.LastName}")" />
                                            <div class="sticky-note-tooltip">
                                                <div class="note-header">
                                                    <div class="note-author-image">
                                                        <img src="@(note.Employee?.Image ?? "/images/placeholder-avatar.png")"
                                                             alt="@($"{note.Employee?.FirstName} {note.Employee?.LastName}")" />
                                                    </div>
                                                    <div class="note-author-info">
                                                        <div class="note-author-name">@note.Employee?.FirstName @note.Employee?.LastName</div>
                                                        <div class="note-author-title">@(note.Employee?.JobTitle ?? "Employee")</div>
                                                    </div>
                                                </div>
                                                <div class="note-content">@note.Note</div>
                                                <div class="note-date">@note.CreatedDate.ToString("MMM dd, yyyy")</div>
                                            </div>
                                        </div>
                                    </div>
                                }
                                @if (product.StickyNotes.Count > 3)
                                {
                                    <div class="more-notes">+@(product.StickyNotes.Count - 3)</div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="employee-avatar add-note" @onclick="() => OnAddNote(product.Id)">
                                <i class="bi bi-plus-lg"></i>
                            </div>
                        }
                    </td>
                    <td class="actions-column">
                        <div class="actions-menu">
                            <button class="btn action-btn" @onclick="() => OnMonitorProduct(product.Id)" title="Monitor Stock">
                                <i class="bi bi-eye"></i>
                            </button>
                            <button class="btn action-btn" @onclick="() => OnToggleExpand(product.Id)" title="Quick Edit">
                                <i class="bi @(IsProductExpanded(product.Id) ? "bi-chevron-up" : "bi-chevron-down")"></i>
                            </button>
                        </div>
                    </td>
                </tr>
                @if (IsProductExpanded(product.Id))
                {
                    <tr class="expanded-row">
                        <td colspan="9">
                            <QuickEditForm Product="@product"
                                           OnSaveChanges="OnSaveChanges"
                                           OnAdvancedEdit="() => OnAdvancedEdit(product)"
                                           OnCancel="() => OnToggleExpand(product.Id)"
                                           IsUpdating="IsUpdating" />
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <div class="pagination-container">
        <div class="pagination-info">
            Showing @(((CurrentPage - 1) * PageSize) + 1) to @Math.Min(CurrentPage * PageSize, TotalItems)
            of @TotalItems items
        </div>
        <sacmy.Client.Components.PaginationComponent CurrentPage="@CurrentPage"
                                                     TotalItems="@TotalItems"
                                                     PageSize="@PageSize"
                                                     OnPageChanged="@OnPageChanged" />
    </div>
</div>

<style>
    @@import url('../../../wwwroot/css/variables.css');

    .product-table-container {
        margin-bottom: var(--spacing-lg);
    }

    .product-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
    }

        .product-table thead tr {
            background-color: var(--bg-light);
        }

        .product-table th {
            padding: var(--spacing-md);
            font-weight: 600;
            color: var(--text-color);
            text-align: left;
            font-size: var(--font-size-xs);
            text-transform: uppercase;
            letter-spacing: 0.05em;
            border-bottom: 1px solid var(--border-color);
        }

        .product-table tbody tr {
            transition: all 0.2s ease;
            cursor: pointer;
        }

            .product-table tbody tr:hover {
                background-color: var(--primary-light, #E6F0FF);
            }

            .product-table tbody tr.selected-row {
                background-color: var(--primary-light, #E6F0FF);
            }

        .product-table td {
            padding: var(--spacing-md);
            border-bottom: 1px solid var(--border-color);
            vertical-align: middle;
        }

    /* Column-specific styling */
    .checkbox-column {
        width: 40px;
        text-align: center;
    }

    .image-column {
        width: 80px;
    }

    .sku-column {
        width: 150px;
    }

    .name-column {
        width: 200px;
    }

    .category-column {
        width: 150px;
    }

    .price-column {
        width: 120px;
    }

    .stock-column {
        width: 140px;
    }

    .notes-column {
        width: 120px;
    }

    .actions-column {
        width: 100px;
        text-align: right;
    }

    /* Product elements styling */
    .product-image-container {
        width: 48px;
        height: 48px;
        border-radius: var(--border-radius-sm);
        overflow: hidden;
        background-color: var(--text-white);
        border: 1px solid var(--border-color);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .product-image {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }

    .product-sku {
        font-weight: 600;
        color: var(--text-color);
        font-size: var(--font-size-sm);
    }

    .product-pattern {
        color: var(--text-light);
        font-size: var(--font-size-xs);
        margin-top: var(--spacing-xs);
    }

    .product-name {
        font-weight: 500;
        color: var(--text-color);
    }

    .category-badge {
        display: inline-block;
        padding: var(--spacing-xs) var(--spacing-sm);
        background-color: var(--bg-light);
        color: var(--text-color);
        border-radius: 9999px;
        font-size: var(--font-size-xs);
        font-weight: 500;
    }

    .product-price {
        font-weight: 600;
        color: var(--text-color);
    }

    .product-price-alt {
        color: var(--success-color);
        font-size: var(--font-size-xs);
        margin-top: var(--spacing-xs);
    }

    .stock-badge {
        display: inline-flex;
        align-items: center;
        gap: var(--spacing-sm);
        padding: var(--spacing-xs) var(--spacing-sm);
        border-radius: 9999px;
        font-size: var(--font-size-xs);
        font-weight: 500;
    }

        .stock-badge.in-stock {
            background-color: rgba(16, 185, 129, 0.1);
            color: var(--success-color);
        }

        .stock-badge.out-of-stock {
            background-color: rgba(239, 68, 68, 0.1);
            color: var(--danger-color);
        }

    /* Sticky Notes */
    .sticky-notes-container {
        display: flex;
        align-items: center;
    }

    .sticky-note-wrapper {
        position: relative;
        margin-left: -8px;
    }

        .sticky-note-wrapper:first-child {
            margin-left: 0;
        }

    .employee-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        overflow: hidden;
        position: relative;
        cursor: pointer;
        transition: transform 0.2s ease;
        border: 2px solid var(--text-white);
        box-shadow: var(--box-shadow);
    }

        .employee-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .employee-avatar.add-note {
            background-color: var(--primary-color);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-white);
        }

        .employee-avatar:hover {
            transform: scale(1.1);
            z-index: 10;
        }

    .sticky-note-tooltip {
        position: absolute;
        background: var(--text-white);
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow-lg);
        padding: var(--spacing-md);
        width: 250px;
        z-index: 100;
        top: calc(100% + 10px);
        left: 50%;
        transform: translateX(-50%);
        display: none;
        border: 1px solid var(--border-color);
    }

    .employee-avatar:hover .sticky-note-tooltip {
        display: block;
    }

    .note-header {
        display: flex;
        align-items: center;
        gap: var(--spacing-sm);
        margin-bottom: var(--spacing-sm);
        padding-bottom: var(--spacing-sm);
        border-bottom: 1px solid var(--border-color);
    }

    .note-author-image {
        width: 36px;
        height: 36px;
        overflow: hidden;
        border-radius: 50%;
    }

        .note-author-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .note-author-info {
        flex: 1;
    }

    .note-author-name {
        font-weight: 600;
        color: var(--text-color);
        font-size: var(--font-size-sm);
    }

    .note-author-title {
        color: var(--text-light);
        font-size: var(--font-size-xs);
        margin-top: calc(var(--spacing-xs) / 2);
    }

    .note-content {
        font-size: var(--font-size-sm);
        line-height: 1.5;
        color: var(--text-color);
        margin-bottom: var(--spacing-sm);
    }

    .note-date {
        font-size: var(--font-size-xs);
        color: var(--text-light);
    }

    .more-notes {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 28px;
        height: 28px;
        background-color: var(--border-color);
        color: var(--text-color);
        border-radius: 50%;
        font-size: 0.7rem;
        font-weight: 600;
        margin-left: var(--spacing-xs);
    }

    /* Action Buttons */
    .actions-menu {
        display: flex;
        justify-content: flex-end;
        gap: var(--spacing-sm);
    }

    .action-btn {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        border: none;
        background-color: var(--bg-light);
        color: var(--text-color);
        transition: all 0.2s ease;
    }

        .action-btn:hover {
            background-color: var(--primary-color);
            color: var(--text-white);
        }

    /* Expanded Row */
    .expanded-row {
        background-color: var(--primary-light, #E6F0FF) !important;
    }

        .expanded-row td {
            padding: 0 !important;
        }

    /* Pagination */
    .pagination-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: var(--spacing-md);
        background-color: var(--bg-light);
        border-bottom-left-radius: var(--border-radius);
        border-bottom-right-radius: var(--border-radius);
    }

    .pagination-info {
        font-size: var(--font-size-sm);
        color: var(--text-light);
    }

    @@media (max-width: 768px) {
        .product-table

    {
        font-size: var(--font-size-sm);
    }

    .product-image-container {
        width: 40px;
        height: 40px;
    }

    .category-badge {
        font-size: calc(var(--font-size-xs) - 0.05rem);
        padding: calc(var(--spacing-xs) - 0.05rem) var(--spacing-sm);
    }

    .stock-badge {
        font-size: calc(var(--font-size-xs) - 0.05rem);
        padding: calc(var(--spacing-xs) - 0.05rem) var(--spacing-sm);
    }

    }
</style>


@code {
    [Parameter]
    public IEnumerable<Product> Products { get; set; } = Array.Empty<Product>();

    [Parameter]
    public bool AllProductsSelected { get; set; }

    [Parameter]
    public HashSet<string> SelectedProductIds { get; set; } = new();

    [Parameter]
    public HashSet<string> ExpandedProductIds { get; set; } = new();

    [Parameter]
    public int CurrentPage { get; set; } = 1;

    [Parameter]
    public int PageSize { get; set; } = 10;

    [Parameter]
    public int TotalItems { get; set; }

    [Parameter]
    public bool IsUpdating { get; set; }

    [Parameter]
    public IEnumerable<Category> Categories { get; set; } = Array.Empty<Category>();

    [Parameter]
    public EventCallback<bool> AllProductsSelectedChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnProductSelectCallback { get; set; }

    [Parameter]
    public EventCallback<(string, bool)> OnProductSelectionToggleCallback { get; set; }

    [Parameter]
    public EventCallback<string> OnToggleExpandCallback { get; set; }

    [Parameter]
    public EventCallback<(string, List<GetStickyNoteViewModel>)> OnShowNotesCallback { get; set; }

    [Parameter]
    public EventCallback<string> OnAddNoteCallback { get; set; }

    [Parameter]
    public EventCallback<string> OnMonitorProductCallback { get; set; }

    [Parameter]
    public EventCallback<Product> OnAdvancedEditCallback { get; set; }

    [Parameter]
    public EventCallback<Product> OnSaveChangesCallback { get; set; }

    [Parameter]
    public EventCallback<int> OnPageChangedCallback { get; set; }

    // Track image loading state
    private Dictionary<string, bool> imageLoadStatus = new Dictionary<string, bool>();

    private string GetCategoryName(string categoryId) =>
        Categories.FirstOrDefault(c => c.Id == categoryId)?.NameEn ?? "Unknown";

    private bool IsProductSelected(string productId) =>
        SelectedProductIds.Contains(productId);

    private bool IsProductExpanded(string productId) =>
        ExpandedProductIds.Contains(productId);

    private void OnProductSelect(string productId)
    {
        OnProductSelectCallback.InvokeAsync(productId);
    }

    private void OnProductSelectionToggle(string productId, ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            OnProductSelectionToggleCallback.InvokeAsync((productId, isChecked));
        }
    }

    private void OnToggleExpand(string productId)
    {
        OnToggleExpandCallback.InvokeAsync(productId);
    }

    private void OnShowNotes(string productId, List<GetStickyNoteViewModel> notes)
    {
        OnShowNotesCallback.InvokeAsync((productId, notes));
    }

    private void OnAddNote(string productId)
    {
        OnAddNoteCallback.InvokeAsync(productId);
    }

    private void OnMonitorProduct(string productId)
    {
        OnMonitorProductCallback.InvokeAsync(productId);
    }

    private void OnAdvancedEdit(Product product)
    {
        OnAdvancedEditCallback.InvokeAsync(product);
    }

    private void OnSaveChanges(Product product)
    {
        OnSaveChangesCallback.InvokeAsync(product);
    }

    private void OnPageChanged(int page)
    {
        OnPageChangedCallback.InvokeAsync(page);
    }

    private void OnImageLoaded(string productId)
    {
        imageLoadStatus[productId] = true;
        StateHasChanged();
    }

    private void OnImageError(string productId)
    {
        imageLoadStatus[productId] = false;
        StateHasChanged();
    }

    private string GetNoteBgColor(GetStickyNoteViewModel note, List<GetStickyNoteViewModel> allNotes)
    {

        if (note == allNotes.First())
        {
            return "#FEE2E2";
        }

        else if (note == allNotes.Skip(1).FirstOrDefault())
        {
            return "#D1FAE5";
        }

        else if (note == allNotes.Skip(2).FirstOrDefault())
        {
            return "#DBEAFE";
        }

        return "#F3F4F6";
    }

}
@using sacmy.Shared.ViewModels.Products

<div class="quick-edit-form">
    <div class="form-row">
        <div class="form-group">
            <label>Height</label>
            <input type="number" step="0.01" @bind="Product.Height" />
        </div>
        <div class="form-group">
            <label>Diameter</label>
            <input type="number" step="0.01" @bind="Product.Diameter" />
        </div>
    </div>

    <div class="form-row">
        <div class="form-group">
            <label>Top</label>
            <input type="number" step="0.01" @bind="Product.Top" />
        </div>
        <div class="form-group">
            <label>Base</label>
            <input type="number" step="0.01" @bind="Product.Base" />
        </div>
    </div>

    <div class="form-row three-columns">
        <div class="form-group">
            <label>Volume</label>
            <input type="number" step="0.01" @bind="Product.Volume" />
        </div>
        <div class="form-group">
            <label>Weight</label>
            <input type="number" step="0.01" @bind="Product.Weight" />
        </div>
        <div class="form-group">
            <label>Area</label>
            <input type="number" step="0.01" @bind="Product.Area" />
        </div>
    </div>

    <div class="form-row">
        <div class="form-group">
            <label>EAN</label>
            <input type="text" @bind="Product.Ean" />
        </div>
        <div class="form-group">
            <label>UPC</label>
            <input type="text" @bind="Product.Upc" />
        </div>
    </div>

    <div class="form-actions">
        <button class="btn btn-secondary" @onclick="() => OnAdvancedEdit.InvokeAsync()">
            <i class="bi bi-sliders"></i> Advanced Edit
        </button>
        <button class="btn btn-primary position-relative"
                @onclick="() => OnSaveChanges.InvokeAsync(Product)"
                disabled="@IsUpdating">
            @if (IsUpdating)
            {
                <span class="spinner-border spinner-border-sm me-2"
                      role="status"
                      aria-hidden="true">
                </span>
                <span>Saving...</span>
            }
            else
            {
                <span>Save Changes</span>
            }
        </button>
        <button class="btn btn-link"
                @onclick="() => OnCancel.InvokeAsync()"
                disabled="@IsUpdating">
            Cancel
        </button>
    </div>
</div>

<style>
    .quick-edit-form {
        padding: 1.5rem;
        background: #F8FAFC;
        border-radius: 0.5rem;
        margin: 0.5rem 1rem;
        box-shadow: 0 1px 3px rgba(59, 130, 246, 0.1);
        border: 1px solid #E0E7FF;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
    }

        .form-row.three-columns {
            grid-template-columns: 1fr 1fr 1fr;
        }

    .form-group {
        display: flex;
        flex-direction: column;
    }

        .form-group label {
            font-size: 0.875rem;
            font-weight: 500;
            color: #1E40AF;
            margin-bottom: 0.5rem;
        }

        .form-group input,
        .form-group select {
            height: 2.5rem;
            padding: 0.5rem 0.75rem;
            border: 1px solid #BFDBFE;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            color: #1E293B;
            background-color: white;
            transition: all 0.15s ease-in-out;
        }

            .form-group input:focus,
            .form-group select:focus {
                outline: none;
                border-color: #60A5FA;
                box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
            }

            .form-group input:hover,
            .form-group select:hover {
                border-color: #93C5FD;
            }

    .form-actions {
        display: flex;
        justify-content: flex-start;
        gap: 1rem;
        padding-top: 1rem;
        border-top: 1px solid #E0E7FF;
        margin-top: 1rem;
    }

        .form-actions .btn-secondary {
            background-color: #F3F4F6;
            color: #374151;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            font-weight: 500;
            border: 1px solid #D1D5DB;
            transition: all 0.15s ease-in-out;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

            .form-actions .btn-secondary:hover {
                background-color: #E5E7EB;
                border-color: #9CA3AF;
            }

        .form-actions .btn-primary,
        .form-actions .btn-link {
            margin-left: auto;
        }

            .form-actions .btn-primary + .btn-link {
                margin-left: 0;
            }

        .form-actions .btn-primary {
            background-color: #2563EB;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            font-weight: 500;
            border: none;
            transition: background-color 0.15s ease-in-out;
        }

            .form-actions .btn-primary:hover {
                background-color: #1D4ED8;
            }

        .form-actions .btn-link {
            color: #6B7280;
            text-decoration: none;
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
            font-weight: 500;
            transition: color 0.15s ease-in-out;
        }

            .form-actions .btn-link:hover {
                color: #1E40AF;
            }

    @@media (max-width: 768px) {
        .form-row, .form-row.three-columns

    {
        grid-template-columns: 1fr;
        gap: 1rem;
    }

    .quick-edit-form {
        padding: 1rem;
        margin: 0.5rem;
    }

    }
</style>

@code {
    [Parameter]
    public Product Product { get; set; }

    [Parameter]
    public bool IsUpdating { get; set; }

    [Parameter]
    public EventCallback OnAdvancedEdit { get; set; }

    [Parameter]
    public EventCallback<Product> OnSaveChanges { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }
}
@using Microsoft.AspNetCore.Components.Forms
@using sacmy.Client.Services
@using sacmy.Shared.ViewModels.BrandViewModel
@using sacmy.Shared.ViewModels.Products
@inject ProductsService ProductsService
@inject ToastService ToastService

@if (IsVisible)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content border-0 shadow-lg">
                <div class="modal-header bg-light">
                    <h5 class="modal-title d-flex align-items-center gap-2">
                        <i class="bi bi-pencil-square text-primary"></i>
                        Advanced Edit - @(Product?.Name ?? "Loading...")
                    </h5>
                    <button type="button" class="btn-close" @onclick="HandleClose"></button>
                </div>

                @if (isLoading)
                {
                    <div class="modal-body d-flex align-items-center justify-content-center" style="min-height: 400px;">
                        <div class="text-center">
                            <div class="spinner-border text-primary mb-3" role="status"></div>
                            <p class="text-muted mb-0">Loading product details...</p>
                        </div>
                    </div>
                }
                else if (productDetail == null)
                {
                    <div class="modal-body d-flex align-items-center justify-content-center" style="min-height: 400px;">
                        <div class="text-center">
                            <div class="alert alert-danger d-inline-flex align-items-center gap-2 mb-0">
                                <i class="bi bi-exclamation-triangle"></i>
                                Failed to load product details
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="modal-body p-4">
                        <div class="row g-4">
                            <!-- Images Gallery -->
                            <div class="col-12">
                                <div class="card border-0 shadow-sm">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                            <h6 class="card-title text-primary mb-0">
                                                <i class="bi bi-images me-2"></i>Product Images
                                            </h6>
                                        </div>
                                        <div class="product-images">
                                            @if (productDetail.Images?.Any() == true)
                                            {
                                                <div class="row g-3">
                                                    @foreach (var image in productDetail.Images)
                                                    {
                                                        <div class="col-auto">
                                                            <div class="position-relative">
                                                                <img src="@image.ImageLink"
                                                                     alt="Product Image"
                                                                     class="rounded shadow-sm"
                                                                     style="width: 120px; height: 120px; object-fit: contain;" />
                                                                <button class="btn btn-danger btn-sm position-absolute top-0 end-0 m-1 p-1"
                                                                        @onclick="() => HandleImageDelete(image.Id)"
                                                                        disabled="@(isDeletingImage == image.Id)">
                                                                    @if (isDeletingImage == image.Id)
                                                                    {
                                                                        <div class="spinner-border spinner-border-sm" role="status">
                                                                            <span class="visually-hidden">Loading...</span>
                                                                        </div>
                                                                    }
                                                                    else
                                                                    {
                                                                        <i class="bi bi-trash"></i>
                                                                    }
                                                                </button>
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="text-muted text-center py-4">
                                                    <i class="bi bi-image text-muted" style="font-size: 2rem;"></i>
                                                    <p class="mb-0 mt-2">No images available</p>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Basic Information -->
                            <div class="col-12">
                                <div class="card border-0 shadow-sm">
                                    <div class="card-body">
                                        <h6 class="card-title text-primary mb-3">
                                            <i class="bi bi-info-circle me-2"></i>Basic Information
                                        </h6>
                                        <div class="row g-3">
                                            <div class="col-md-3">
                                                <label class="form-label text-muted small">SKU</label>
                                                <input type="text" class="form-control bg-light" value="@productDetail.Sku" readonly />
                                            </div>
                                            <div class="col-md-3">
                                                <label class="form-label text-muted small">Pattern Number</label>
                                                <input type="text" class="form-control bg-light" value="@productDetail.PatternNumber" readonly />
                                            </div>
                                            <div class="col-md-6">
                                                <label class="form-label text-muted small">Name</label>
                                                <input type="text" class="form-control" @bind="productDetail.Name" />
                                            </div>
                                            <div class="col-12">
                                                <label class="form-label text-muted small">Description</label>
                                                <textarea class="form-control" rows="3" @bind="productDetail.Description"></textarea>
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label text-muted small">Price</label>
                                                <div class="input-group">
                                                    <span class="input-group-text">$</span>
                                                    <input type="number" step="0.01" class="form-control" @bind="productDetail.Price" />
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label text-muted small">Points</label>
                                                <input type="number" class="form-control" @bind="productDetail.Points" />
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label text-muted small">Quantity</label>
                                                <input type="number" class="form-control" @bind="productDetail.Quantity" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Categories & Relations -->
                            <div class="col-12">
                                <div class="card border-0 shadow-sm">
                                    <div class="card-body">
                                        <h6 class="card-title text-primary mb-3">
                                            <i class="bi bi-diagram-3 me-2"></i>Categories & Relations
                                        </h6>
                                        <div class="row g-3">
                                            <div class="col-md-4">
                                                <label class="form-label text-muted small">Brand</label>
                                                <select class="form-select" @bind="productDetail.BrandId">
                                                    @foreach (var brand in Brands ?? new List<BrandViewModel>())
                                                    {
                                                        <option value="@brand.Id">@brand.NameEn</option>
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label text-muted small">Category</label>
                                                <select class="form-select" @bind="productDetail.CategoryId">
                                                    @foreach (var category in Categories ?? new List<Category>())
                                                    {
                                                        <option value="@category.Id">@category.NameEn</option>
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label text-muted small">Collection</label>
                                                <select class="form-select" @bind="productDetail.CollectionId">
                                                    @foreach (var collection in Collections ?? new List<Collection>())
                                                    {
                                                        <option value="@collection.Id">@collection.NameEn</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <!-- Measurements -->
                                <div class="card border-0 shadow-sm h-100">
                                    <div class="card-body">
                                        <h6 class="card-title text-primary mb-3">
                                            <i class="bi bi-rulers me-2"></i>Measurements
                                        </h6>
                                        <div class="row g-3">
                                            <div class="col-6">
                                                <label class="form-label text-muted small">Height</label>
                                                <input type="number" step="0.01" class="form-control" @bind="productDetail.Height" />
                                            </div>
                                            <div class="col-6">
                                                <label class="form-label text-muted small">Diameter</label>
                                                <input type="number" step="0.01" class="form-control" @bind="productDetail.Diameter" />
                                            </div>
                                            <div class="col-6">
                                                <label class="form-label text-muted small">Top</label>
                                                <input type="number" step="0.01" class="form-control" @bind="productDetail.Top" />
                                            </div>
                                            <div class="col-6">
                                                <label class="form-label text-muted small">Base</label>
                                                <input type="number" step="0.01" class="form-control" @bind="productDetail.Base" />
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label text-muted small">Volume</label>
                                                <input type="number" step="0.01" class="form-control" @bind="productDetail.Volume" />
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label text-muted small">Weight</label>
                                                <input type="number" step="0.01" class="form-control" @bind="productDetail.Weight" />
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label text-muted small">Area</label>
                                                <input type="number" step="0.01" class="form-control" @bind="productDetail.Area" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <!-- Packaging Information -->
                                <div class="card border-0 shadow-sm h-100">
                                    <div class="card-body">
                                        <h6 class="card-title text-primary mb-3">
                                            <i class="bi bi-box-seam me-2"></i>Packaging Information
                                        </h6>
                                        <div class="row g-3">
                                            <div class="col-md-6">
                                                <label class="form-label text-muted small">Inner Type</label>
                                                <input type="text" class="form-control" @bind="productDetail.InnerType" />
                                            </div>
                                            <div class="col-md-6">
                                                <label class="form-label text-muted small">Inner Type Count</label>
                                                <input type="number" class="form-control" @bind="productDetail.InnerTypeCount" />
                                            </div>
                                            <div class="col-md-6">
                                                <label class="form-label text-muted small">Outer Type</label>
                                                <input type="text" class="form-control" @bind="productDetail.OuterType" />
                                            </div>
                                            <div class="col-md-6">
                                                <label class="form-label text-muted small">Outer Type Count</label>
                                                <input type="number" class="form-control" @bind="productDetail.OuterTypeCount" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Product Identifiers -->
                            <div class="col-12">
                                <div class="card border-0 shadow-sm">
                                    <div class="card-body">
                                        <h6 class="card-title text-primary mb-3">
                                            <i class="bi bi-upc-scan me-2"></i>Product Identifiers
                                        </h6>
                                        <div class="row g-3">
                                            <div class="col-md-6">
                                                <label class="form-label text-muted small">EAN</label>
                                                <input type="text" class="form-control" @bind="productDetail.Ean" />
                                            </div>
                                            <div class="col-md-6">
                                                <label class="form-label text-muted small">UPC</label>
                                                <input type="text" class="form-control" @bind="productDetail.Upc" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer bg-light">
                        <button type="button"
                                class="btn btn-link text-decoration-none"
                                @onclick="HandleClose"
                                disabled="@isSaving">
                            Cancel
                        </button>
                        <button type="button"
                                class="btn btn-primary px-4 d-flex align-items-center gap-2"
                                @onclick="HandleSave"
                                disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm"></span>
                                <span>Saving Changes...</span>
                            }
                            else
                            {
                                <i class="bi bi-check2"></i>
                                <span>Save Changes</span>
                            }
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Product Product { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public IEnumerable<Category> Categories { get; set; }
    [Parameter] public IEnumerable<Collection> Collections { get; set; }
    [Parameter] public IEnumerable<BrandViewModel> Brands { get; set; }

    private string isDeletingImage;
    private bool isLoading = true;
    private bool isSaving = false;
    private ProductDetailViewModel productDetail;

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && Product != null)
        {
            await LoadProductDetails();
        }
    }

    private async Task LoadProductDetails()
    {
        try
        {
            isLoading = true;
            var result = await ProductsService.GetProductByIdAsync(Product.Id);
            if (result.Success)
            {
                productDetail = result.Data;
            }
            else
            {
                ToastService.ShowToast("Failed to load product details", "error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error: {ex.Message}", "error");
            Console.WriteLine($"Error loading product details: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleClose()
    {
        if (isSaving) return;
        await IsVisibleChanged.InvokeAsync(false);
    }

    private async Task HandleSave()
    {
        if (isSaving) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            var updateModel = new UpdateProductViewModel
            {
                ProductId = Guid.Parse(productDetail.Id),
                Name = productDetail.Name,
                Description = productDetail.Description,
                Price = productDetail.Price,
                Points = productDetail.Points,
                Quantity = productDetail.Quantity,
                BrandId = Guid.Parse(productDetail.BrandId),
                CategoryId = productDetail.CategoryId,
                CollectionId = productDetail.CollectionId,
                InnerType = productDetail.InnerType,
                InnerTypeCount = productDetail.InnerTypeCount,
                OuterType = productDetail.OuterType,
                OuterTypeCount = productDetail.OuterTypeCount,
                Height = productDetail.Height,
                Diameter = productDetail.Diameter,
                Top = productDetail.Top,
                Base = productDetail.Base,
                Volume = productDetail.Volume,
                Weight = productDetail.Weight,
                Area = productDetail.Area,
                Ean = productDetail.Ean,
                Upc = productDetail.Upc
            };

            var response = await ProductsService.UpdateProductAsync(updateModel);

            if (response.Success)
            {
                ToastService.ShowToast("Product updated successfully", "success");
                await OnSaved.InvokeAsync();
                await HandleClose();
            }
            else
            {
                ToastService.ShowToast(response.Message ?? "Failed to update product", "error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error: {ex.Message}", "error");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task HandleImageDelete(string imageId)
    {
        try
        {
            isDeletingImage = imageId;
            StateHasChanged();

            var result = await ProductsService.DeleteProductImageAsync(imageId);

            if (result.Success)
            {
                ToastService.ShowToast("Image deleted successfully", "success");
                // Refresh product details to update the image list
                await LoadProductDetails();
            }
            else
            {
                ToastService.ShowToast(result.Message ?? "Failed to delete image", "error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error: {ex.Message}", "error");
        }
        finally
        {
            isDeletingImage = null;
            StateHasChanged();
        }
    }
}
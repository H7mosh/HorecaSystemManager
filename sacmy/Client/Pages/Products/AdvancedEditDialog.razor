@using Microsoft.AspNetCore.Components.Forms
@using sacmy.Client.Services
@using sacmy.Shared.ViewModels.BrandViewModel
@using sacmy.Shared.ViewModels.Products
@inject ProductsService ProductsService
@inject ToastService ToastService
@inject IJSRuntime JS


@if (IsVisible)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.6);">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content border-0 rounded-lg shadow-2xl">
                <!-- Header section -->
                <div class="modal-header border-0 bg-gradient-to-r from-blue-50 to-white p-4">
                    <h5 class="modal-title d-flex align-items-center gap-2 text-primary">
                        <i class="bi bi-pencil-square"></i>
                        <span class="fw-semibold">Edit Product Details - @(Product?.Name ?? "Loading...")</span>
                    </h5>
                    <button type="button" class="btn-close shadow-none" @onclick="HandleClose"></button>
                </div>

                @if (isLoading)
                {
                    <div class="modal-body d-flex align-items-center justify-content-center min-h-96">
                        <div class="text-center">
                            <div class="spinner-grow text-primary mb-3" role="status"></div>
                            <p class="text-muted mb-0 fw-medium">Loading product information...</p>
                        </div>
                    </div>
                }
                else if (productDetail == null)
                {
                    <div class="modal-body d-flex align-items-center justify-content-center min-h-96">
                        <div class="alert alert-danger d-inline-flex align-items-center gap-2 shadow-sm">
                            <i class="bi bi-exclamation-triangle-fill"></i>
                            <span>Failed to load product details</span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="modal-body p-4">
                        <!-- Tab Navigation -->
                        <nav class="nav nav-tabs nav-fill mb-4">
                            <button class="nav-link @(activeTab == "images" ? "active" : "")" @onclick='() => activeTab = "images"'>
                                <i class="bi bi-images me-2"></i>Images
                            </button>
                            <button class="nav-link @(activeTab == "details" ? "active" : "")" @onclick='() => activeTab = "details"'>
                                <i class="bi bi-info-circle me-2"></i>Details
                            </button>
                            <button class="nav-link @(activeTab == "specs" ? "active" : "")" @onclick='() => activeTab = "specs"'>
                                <i class="bi bi-tools me-2"></i>Specifications
                            </button>
                        </nav>

                        <div class="tab-content">
                            <!-- Images Tab Content -->
                            <div class="@(activeTab == "images" ? "d-block" : "d-none")">
                                <div class="card border-0 shadow-sm">
                                    <div class="card-body">
                                        <div class="product-images mb-4">
                                            @if (productDetail.Images?.Any() == true)
                                            {
                                                <div class="row g-4">
                                                    @foreach (var image in productDetail.Images)
                                                    {
                                                        <div class="col-auto">
                                                            <div class="position-relative image-container">
                                                                <img src="@image.ImageLink" alt="Product Image" class="rounded-lg shadow-sm product-image" style="width: 150px; height: 150px; object-fit: cover;" />
                                                                <div class="image-overlay">
                                                                    <button class="btn btn-danger btn-sm rounded-circle p-2" @onclick="() => HandleImageDelete(image.Id)" disabled="@(isDeletingImage == image.Id)">
                                                                        @if (isDeletingImage == image.Id)
                                                                        {
                                                                            <div class="spinner-border spinner-border-sm"></div>
                                                                        }
                                                                        else
                                                                        {
                                                                            <i class="bi bi-trash"></i>
                                                                        }
                                                                    </button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="text-center py-5 bg-light rounded-lg">
                                                    <i class="bi bi-images text-muted" style="font-size: 3rem;"></i>
                                                    <p class="text-muted mt-3 mb-0">No product images available</p>
                                                </div>
                                            }
                                        </div>

                                        <InputFile OnChange="@HandleFileSelected" multiple accept="image/*" class="d-none" id="@fileInputId" />
                                        <div class="upload-zone @(isDragging ? "dragging" : "") @(isUploading ? "uploading" : "")" @ondragenter:preventDefault @ondragenter="HandleDragEnter" @ondragleave:preventDefault @ondragleave="HandleDragLeave" @ondragover:preventDefault @ondrop:preventDefault @ondrop="HandleDrop" @onclick="ClickFileInput">
                                            <div class="text-center p-5">
                                                @if (isUploading)
                                                {
                                                    <div class="spinner-border text-primary mb-3"></div>
                                                    <p class="mb-0 fw-medium">Uploading your images...</p>
                                                }
                                                else
                                                {
                                                    <i class="bi bi-cloud-arrow-up text-primary" style="font-size: 2.5rem;"></i>
                                                    <p class="fw-medium mt-3 mb-2">Drag and drop your images here</p>
                                                    <p class="text-muted small mb-3">or</p>
                                                    <button type="button" class="btn btn-outline-primary px-4">Select Files</button>
                                                    <p class="text-muted small mt-3 mb-0">Supported formats: PNG, JPG, JPEG (Max: 10MB)</p>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Other Tabs -->
                            <div class="@(activeTab == "details" ? "d-block" : "d-none")">
                                <!-- Details Tab Content -->
                                <!-- Add content here -->
                            </div>
                            <div class="@(activeTab == "specs" ? "d-block" : "d-none")">
                                <!-- Specifications Tab Content -->
                                <!-- Add content here -->
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer border-0 bg-light p-4">
                        <div class="d-flex gap-3">
                            <button type="button" class="btn btn-light px-4" @onclick="HandleClose" disabled="@isSaving">Cancel</button>
                            <button type="button" class="btn btn-primary px-4 d-inline-flex align-items-center gap-2" @onclick="SaveBasicInformation" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <div class="spinner-border spinner-border-sm"></div>
                                    <span>Saving Changes...</span>
                                }
                                else
                                {
                                    <i class="bi bi-check2-circle"></i>
                                    <span>Save Changes</span>
                                }
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}


@code {
    [Parameter] public Product Product { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public IEnumerable<Category> Categories { get; set; }
    [Parameter] public IEnumerable<Collection> Collections { get; set; }
    [Parameter] public IEnumerable<BrandViewModel> Brands { get; set; }

    private string isDeletingImage;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isDragging;
    private bool isUploading;
    private ProductDetailViewModel productDetail;
    private string fileInputId = "fileInput_" + Guid.NewGuid().ToString("N");
    private string activeTab = "images";

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && Product != null)
        {
            await LoadProductDetails();
        }
    }

    private async Task ClickFileInput()
    {
        await JS.InvokeVoidAsync("imageUploadHelpers.clickInput", fileInputId);
    }

    private void HandleDragEnter()
    {
        isDragging = true;
        StateHasChanged();
    }

    private void HandleDragLeave()
    {
        isDragging = false;
        StateHasChanged();
    }

    private async Task HandleDrop(DragEventArgs e)
    {
        try
        {
            isDragging = false;
            isUploading = true;
            StateHasChanged();

            if (productDetail == null) return;

            var files = await JS.InvokeAsync<string[]>("imageUploadHelpers.handleDrop", e);

            if (files == null || files.Length == 0) return;

            foreach (var fileData in files)
            {
                try
                {
                    byte[] fileBytes = Convert.FromBase64String(fileData);
                    using var memoryStream = new MemoryStream(fileBytes);

                    var result = await ProductsService.AddProductImageAsync(
                        productDetail.Id,
                        memoryStream,
                        "dropped_image.jpg"
                    );

                    if (result.Success)
                    {
                        ToastService.ShowToast("Image uploaded successfully", "success");
                        await LoadProductDetails();
                    }
                    else
                    {
                        ToastService.ShowToast(result.Message ?? "Failed to upload image", "error");
                    }
                }
                catch (Exception ex)
                {
                    ToastService.ShowToast($"Error processing file: {ex.Message}", "error");
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error uploading files: {ex.Message}", "error");
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            isUploading = true;
            StateHasChanged();

            if (productDetail == null) return;

            foreach (var file in e.GetMultipleFiles(10))
            {
                await ProcessFile(file);
            }
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private async Task ProcessFile(IBrowserFile file)
    {
        try
        {
            if (file.Size > 10485760)
            {
                ToastService.ShowToast($"File {file.Name} is too large. Maximum size is 10MB.", "error");
                return;
            }

            using var stream = file.OpenReadStream(maxAllowedSize: 10485760);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            var result = await ProductsService.AddProductImageAsync(
                productDetail.Id,
                memoryStream,
                file.Name
            );

            if (result.Success)
            {
                ToastService.ShowToast($"Image {file.Name} uploaded successfully", "success");
                await LoadProductDetails();
            }
            else
            {
                ToastService.ShowToast($"Failed to upload {file.Name}: {result.Message}", "error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error processing file {file.Name}: {ex.Message}", "error");
        }
    }

    private async Task LoadProductDetails()
    {
        try
        {
            isLoading = true;
            var result = await ProductsService.GetProductByIdAsync(Product.Id);
            if (result.Success)
            {
                productDetail = result.Data;
            }
            else
            {
                ToastService.ShowToast("Failed to load product details", "error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error: {ex.Message}", "error");
            Console.WriteLine($"Error loading product details: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleImageDelete(string imageId)
    {
        try
        {
            isDeletingImage = imageId;
            StateHasChanged();

            var result = await ProductsService.DeleteProductImageAsync(imageId);

            if (result.Success)
            {
                ToastService.ShowToast("Image deleted successfully", "success");
                await LoadProductDetails();
            }
            else
            {
                ToastService.ShowToast(result.Message ?? "Failed to delete image", "error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error: {ex.Message}", "error");
        }
        finally
        {
            isDeletingImage = null;
            StateHasChanged();
        }
    }

    private async Task HandleClose()
    {
        if (isSaving) return;
        await IsVisibleChanged.InvokeAsync(false);
    }

    private async Task SaveBasicInformation()
    {
        if (isSaving) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            var updateModel = new UpdateProductViewModel
                {
                    ProductId = Guid.Parse(productDetail.Id),
                    Sku = productDetail.Sku,
                    PatternNumber = productDetail.PatternNumber,
                    Name = productDetail.Name,
                    Description = productDetail.Description,
                    Price = productDetail.Price,
                    Points = productDetail.Points,
                    Quantity = productDetail.Quantity,
                    BrandId = Guid.Parse(productDetail.BrandId),
                    CategoryId = productDetail.CategoryId,
                    CollectionId = productDetail.CollectionId,
                    Height = productDetail.Height,
                    Diameter = productDetail.Diameter,
                    Top = productDetail.Top,
                    Base = productDetail.Base,
                    Volume = productDetail.Volume,
                    Weight = productDetail.Weight,
                    Area = productDetail.Area,
                    InnerType = productDetail.InnerType,
                    InnerTypeCount = productDetail.InnerTypeCount,
                    OuterType = productDetail.OuterType,
                    OuterTypeCount = productDetail.OuterTypeCount,
                    Ean = productDetail.Ean,
                    Upc = productDetail.Upc
                };

            var response = await ProductsService.UpdateProductAsync(updateModel);

            if (response.Success)
            {
                ToastService.ShowToast("Product updated successfully", "success");
                await OnSaved.InvokeAsync();
                await HandleClose();
            }
            else
            {
                ToastService.ShowToast(response.Message ?? "Failed to update product", "error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error: {ex.Message}", "error");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    // Helper method to show confirmation dialog
    private async Task<bool> ShowConfirmDialog(string title, string message)
    {
        return await JS.InvokeAsync<bool>("confirm", $"{title}\n\n{message}");
    }

    // Helper method to format currency
    private string FormatCurrency(decimal value)
    {
        return value.ToString("C2");
    }

    // Helper method to validate required fields
    private bool ValidateRequiredFields()
    {
        if (string.IsNullOrWhiteSpace(productDetail.Name))
        {
            ToastService.ShowToast("Product name is required", "error");
            return false;
        }

        if (productDetail.Price <= 0)
        {
            ToastService.ShowToast("Price must be greater than zero", "error");
            return false;
        }

        if (productDetail.Quantity < 0)
        {
            ToastService.ShowToast("Quantity cannot be negative", "error");
            return false;
        }

        return true;
    }
}
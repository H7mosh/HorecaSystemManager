@page "/HomeScreen"
@inject HttpClient httpClient
@using Newtonsoft.Json
@using sacmy.Client.Configuraion
@using sacmy.Client.Services
@using sacmy.Shared.ViewModels.DashboardViewModel
@using sacmy.Shared.ViewModels.InvoiceViewModel
@inject AppConfig appConfig
@page "/dashboard"
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject DashboardService dashboardService;

<style>
    .salesType {
        width: 100%;
        padding: 2%;
    }

    .chart-container {
        display: flex;
        flex-direction: row;
        align-items: center;
        margin-top: 20px;
    }

    .legend-container {
        display: flex;
        flex-direction: column;
        margin-left: 20px;
    }

    .legend-item {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
    }

    .legend-color {
        width: 20px;
        height: 20px;
        margin-right: 5px;
    }

    .input-row {
        display: flex;
        gap: 10px;
        align-items: center;
        margin-top: 20px;
    }

    .custom-input {
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 5px;
        font-size: 16px;
        width: 200px;
    }

    .custom-select {
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 5px;
        font-size: 16px;
        width: 200px;
    }

    .custom-button {
        margin-left: 10px;
        background-color: #3f51b5;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
    }

        .custom-button:hover {
            background-color: #303f9f;
        }

    .branch-stats {
        display: flex;
        gap: 20px;
        margin-top: 20px;
    }

    .branch-card {
        border: 1px solid #ccc;
        padding: 20px;
        border-radius: 10px;
        width: 300px;
    }

    .branch-title {
        font-size: 24px;
        font-weight: bold;
        color: #3f51b5;
        margin-bottom: 10px;
    }

    .stats {
        font-size: 16px;
    }

        .stats .total {
            color: #000;
        }

        .stats .cost {
            color: #f00;
        }

        .stats .profit {
            color: #0a0;
        }
</style>

<div class="salesType">
    <div class="input-row">
        <input type="date" @bind="startDate" class="custom-input" placeholder="First Date" />
        <input type="date" @bind="endDate" class="custom-input" placeholder="Second Date" />
        
        <select @bind="selectedBranch" class="custom-select">
            <option value="All">All</option>
            <option value="Erbil">Erbil</option>
            <option value="Baghdad">Baghdad</option>
            <option value="zakho">Zakho</option>
        </select>
        <button type="button" class="btn btn-primary" @onclick="LoadInvoiceCounts">
            Apply &#x2192;
        </button>
    </div>
    <div class="branch-stats">
        @foreach (var branch in branchSales)
        {
            <div class="branch-card">
                <div class="branch-title">@branch.Branch</div>
                <div class="stats">
                    <div class="total">TOTAL: @branch.TotalSales.ToString("N2")$</div>
                </div>
            </div>
        }
    </div>
    <div class="chart-container">
        <PieChart @ref="pieChart" Width="450" Class="mb-5" />
    </div>
</div>

@code {
    private List<InvoiceTypeViewModel> InvoiceCounts { get; set; } = new List<InvoiceTypeViewModel>();
    private List<GetBranchSales> branchSales { get; set; } = new List<GetBranchSales>();
    private PieChart pieChart = default!;
    private PieChartOptions pieChartOptions = default!;
    private BlazorBootstrap.ChartData chartData = default!;
    private string[]? backgroundColors;
    private DateTime? startDate = null;
    private DateTime? endDate = null;
    private string selectedBranch = "All";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadInvoiceCounts();
            await pieChart.InitializeAsync(chartData, pieChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        backgroundColors = ColorBuilder.CategoricalTwelveColors;
        chartData = new BlazorBootstrap.ChartData { Labels = new List<string>(), Datasets = new List<IChartDataset>() };
        pieChartOptions = new PieChartOptions
            {
                Responsive = true,
                Plugins = new PieChartPlugins
                {
                    Legend = new ChartPluginsLegend
                    {
                        Position = "right"
                    }
                }
            };
    }

    private async Task LoadInvoiceCounts()
    {
        await dashboardService.LoadInvoiceCounts(startDate, endDate, selectedBranch, chartData, pieChartOptions, backgroundColors.ToList(), pieChart, async () => await InvokeAsync(StateHasChanged));
        branchSales = await dashboardService.GetBranchSalesAsync(startDate, endDate, selectedBranch);
        await InvokeAsync(StateHasChanged); // Update the UI
    }
}
@page "/HomeScreen"
@inject HttpClient httpClient
@using Newtonsoft.Json
@using sacmy.Client.Configuraion
@using sacmy.Client.Services
@using sacmy.Shared.Core
@using sacmy.Shared.ViewModels.DashboardViewModel
@using sacmy.Shared.ViewModels.InvoiceViewModel
@using System.Net.Http.Json
@inject AppConfig appConfig
@inject HttpClient httpClient
@inject DashboardService dashboardService
@inject UserGlobalClass userGlobalClass
@inject IJSRuntime JS

<style>
    .salesType {
        width: 100%;
        padding: 2%;
    }

    .chart-container {
        display: flex;
        flex-direction: row;
        align-items: center;
        margin-top: 20px;
    }

    .chart-wrapper {
        width: 450px;
        height: 450px;
        position: relative;
    }

    .legend-container {
        display: flex;
        flex-direction: column;
        margin-left: 20px;
    }

    .legend-item {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
    }

    .legend-color {
        width: 20px;
        height: 20px;
        margin-right: 5px;
    }

    .input-row {
        display: flex;
        gap: 10px;
        align-items: center;
        margin-top: 20px;
    }

    .custom-input {
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 5px;
        font-size: 16px;
        width: 200px;
    }

    .custom-select {
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 5px;
        font-size: 16px;
        width: 200px;
    }

    .custom-button {
        margin-left: 10px;
        background-color: #3f51b5;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
    }

        .custom-button:hover {
            background-color: #303f9f;
        }

    .branch-stats {
        display: flex;
        gap: 20px;
        margin-top: 20px;
    }

    .branch-card {
        border: 1px solid #ccc;
        padding: 20px;
        border-radius: 10px;
        width: 300px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: transform 0.2s;
    }

        .branch-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

    .branch-title {
        font-size: 24px;
        font-weight: bold;
        color: #3f51b5;
        margin-bottom: 10px;
    }

    .stats {
        font-size: 16px;
    }

        .stats .total {
            color: #000;
        }

        .stats .cost {
            color: #f00;
        }

        .stats .profit {
            color: #0a0;
        }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .input-row {
            flex-direction: column;
        }

        .custom-input,
        .custom-select {
            width: 100%;
        }

        .branch-stats {
            flex-direction: column;
        }

        .branch-card {
            width: 100%;
        }

        .chart-wrapper {
            width: 100%;
            height: 300px;
        }
    }
</style>

<div class="salesType">
    @if (userGlobalClass.User.Role != "manager")
    {
        <div>لا تملك صلاحية لعرض هذه البيانات.</div>
    }
    else
    {
        <div class="input-row">
            <input type="date" @bind="startDate" class="custom-input" placeholder="First Date" />
            <input type="date" @bind="endDate" class="custom-input" placeholder="Second Date" />

            <select @bind="selectedBranch" class="custom-select">
                <option value="All">All</option>
                <option value="Erbil">Erbil</option>
                <option value="Baghdad">Baghdad</option>
                <option value="zakho">Zakho</option>
            </select>
            <button type="button" class="btn btn-primary" @onclick="LoadInvoiceCounts">
                Apply &#x2192;
            </button>
        </div>
        <div class="branch-stats">
            @foreach (var branch in branchSales)
            {
                <div class="branch-card">
                    <div class="branch-title">@branch.Branch</div>
                    <div class="stats">
                        <div class="total">TOTAL: @branch.TotalSales.ToString("N2")$</div>
                    </div>
                </div>
            }
        </div>
        <div class="chart-container">
            <div class="chart-wrapper">
                <canvas id="salesChart"></canvas>
            </div>
        </div>
    }
</div>

@code {
    private List<InvoiceTypeViewModel> InvoiceCounts { get; set; } = new();
    private List<GetBranchSales> branchSales { get; set; } = new();
    private string[]? backgroundColors;
    private DateTime? startDate = null;
    private DateTime? endDate = null;
    private string selectedBranch = "All";
    private bool chartInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (userGlobalClass.User.Role == "manager")
        {
            if (firstRender)
            {
                await LoadInvoiceCounts();
                await InitializeChartAsync();
            }
            await base.OnAfterRenderAsync(firstRender);
        }
    }

    protected override void OnInitialized()
    {
        backgroundColors = new[] {
            "rgba(255, 99, 132, 0.8)",
            "rgba(54, 162, 235, 0.8)",
            "rgba(255, 206, 86, 0.8)",
            "rgba(75, 192, 192, 0.8)",
            "rgba(153, 102, 255, 0.8)",
            "rgba(255, 159, 64, 0.8)"
        };
    }

    private async Task LoadInvoiceCounts()
    {
        try
        {
            // Keep your existing service calls
            branchSales = await dashboardService.GetBranchSalesAsync(startDate, endDate, selectedBranch);
            await UpdateChartAsync();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoadInvoiceCounts: {ex.Message}");
        }
    }

    private async Task InitializeChartAsync()
    {
        try
        {
            await JS.InvokeVoidAsync("initializeChart", "salesChart");
            await UpdateChartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in InitializeChartAsync: {ex.Message}");
        }
    }

    private async Task UpdateChartAsync()
    {
        try
        {
            var chartData = new
            {
                labels = branchSales.Select(b => b.Branch).ToArray(),
                datasets = new[]
                {
                    new
                    {
                        data = branchSales.Select(b => b.TotalSales).ToArray(),
                        backgroundColor = backgroundColors
                    }
                }
            };

            await JS.InvokeVoidAsync("updateChart", "salesChart", chartData);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in UpdateChartAsync: {ex.Message}");
        }
    }
}
@page "/Horeca"
@using sacmy.Shared.ViewModel.HorecaViewModel
@inject NavigationManager NavigationManager;
@inject HttpClient httpClient
@inject IDialogService DialogService

<style>
    .my-header-class .mud-table-cell {
        background-color: #92a8d1;
        font-size: 1rem;
    }
</style>


<MudDataGrid Items="@HorecaInformations" Filterable="true" Virtualize="true" Striped="true" FixedHeader="true" Height="600px"
             QuickFilter="@_quickFilter" ColumnResizeMode="ResizeMode.None" Bordered="false" Outlined="true">
    <ToolBarContent>
        
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <HierarchyColumn T="GetHorecaInformationsViewModel"  />
        <PropertyColumn Property="x => x.Name" Title="Name" />
        <PropertyColumn Property="x => x.Governorate" Title="Governorate" />
        <PropertyColumn Property="x => x.OwnerName" Title="Owner Name" />
        <PropertyColumn Property="x => x.OwnerPhone" Title="Owner Phone" />
        <PropertyColumn Property="x => x.PurcasingManagerName" Title="Purchase Manager Name" />
        <PropertyColumn Property="x => x.PurchasingManagerPhone" Title="Purchase Manager Phone" />
        <PropertyColumn Property="x => x.Concept" Title="Concept" />
        <PropertyColumn Property="x => x.CreatedBy" Title="Created By" />
        <PropertyColumn Property="x => x.OwnerName" Title="Owner Name" />
        <TemplateColumn CellClass="d-flex justify-end" Filterable="false">
            <CellTemplate>
                <MudStack Row>
                    <MudIcon Icon="@Icons.Material.Rounded.RemoveRedEye" Color="Color.Primary" @onclick="() => ShowDetails(context.Item)" />
                    <MudIcon Icon="@Icons.Material.Rounded.Delete" Color="Color.Error" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <ChildRowContent>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@context.Item.Name</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudDataGrid Items="@context.Item.getHorecaStatictsInformationViewModels" Filterable="false" Virtualize="true" Striped="true" Height="300px">
                        <Columns>
                            <PropertyColumn Property="x => x.Rating" Title="Rating" />
                            <PropertyColumn Property="x => x.TablesCount" Title="Tables Count" />
                            <PropertyColumn Property="x => x.ChairsCount" Title="Chairs Count" />
                            <PropertyColumn Property="x => x.IsHePasabahceBuyer" Title="Is Pasabahce Buyer" />
                            <PropertyColumn Property="x => x.PasabahcePercentage" Title="Pasabahce Percentage" />
                            <PropertyColumn Property="x => x.IsHeBonnaBuyer" Title="Is Bonna Buyer" />
                            <PropertyColumn Property="x => x.BonnaPercentage" Title="Bonna Percentage" />
                            <PropertyColumn Property="x => x.IsHeNudeBuyer" Title="Is Nude Buyer" />
                            <PropertyColumn Property="x => x.NudePercentage" Title="Nude Percentage" />
                        </Columns>
                    </MudDataGrid>
                </MudCardContent>
            </MudCard>
        </ChildRowContent>

</MudDataGrid>


@code {
    private List<GetHorecaInformationsViewModel> HorecaInformations = new List<GetHorecaInformationsViewModel>();
    private string _searchString;
    protected override async Task OnInitializedAsync()
    {
        HorecaInformations = await httpClient.GetFromJsonAsync<List<GetHorecaInformationsViewModel>>("api/horeca");
    }

    private Func<GetHorecaInformationsViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Governorate.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Name} {x.OwnerName} {x.OwnerPhone} {x.PurcasingManagerName} {x.PurchasingManagerPhone} {x.Governorate}".Contains(_searchString))
            return true;

        return false;
    };

    private void ShowDetails(GetHorecaInformationsViewModel row)
    {
        NavigationManager.NavigateTo($"/horeca-details/{row.Id.ToString()}");
    }
}

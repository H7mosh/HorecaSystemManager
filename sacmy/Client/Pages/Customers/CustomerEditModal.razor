@using Microsoft.AspNetCore.Components.Forms
@using sacmy.Shared.Core
@using sacmy.Shared.ViewModels.CustomerViewModel
@using sacmy.Shared.ViewModels.UserViewModel
@using sacmy.Client.Services
@using sacmy.Client.Shared.Toast
@inject CustomerService CustomerService
@inject ToastService ToastService
@inject IJSRuntime JSRuntime


@if (IsVisible)
{
    <div class="modal-backdrop fade show" style="z-index: 1040;"></div>

    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="z-index: 1050;">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header custom-header">
                    <h5 class="modal-title">@(IsNewCustomer ? "Add New Customer" : "Edit Customer")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (isSaving)
                    {
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Saving...</span>
                            </div>
                            <p class="mt-2">Saving changes...</p>
                        </div>
                    }
                    else
                    {
                        <EditForm Model="@customerModel" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="name" class="form-label">Name *</label>
                                        <InputText id="name" class="form-control" @bind-Value="customerModel.Name" />
                                        <ValidationMessage For="@(() => customerModel.Name)" />
                                    </div>

                                    <div class="mb-3">
                                        <label for="phoneNumber" class="form-label">Phone Number *</label>
                                        <InputText id="phoneNumber" class="form-control" @bind-Value="customerModel.PhoneNumber" />
                                        <ValidationMessage For="@(() => customerModel.PhoneNumber)" />
                                    </div>

                                    <div class="mb-3">
                                        <label for="address" class="form-label">Address</label>
                                        <InputText id="address" class="form-control" @bind-Value="customerModel.Address" />
                                        <ValidationMessage For="@(() => customerModel.Address)" />
                                    </div>

                                    <div class="mb-3">
                                        <label for="branch" class="form-label">Branch *</label>
                                        <InputSelect id="branch" class="form-select" @bind-Value="customerModel.Branch">
                                            <option value="">-- Select Branch --</option>
                                            <option value="Erbil">Erbil</option>
                                            <option value="Baghdad">Baghdad</option>
                                            <option value="zakho">Zakho</option>
                                        </InputSelect>
                                        <ValidationMessage For="@(() => customerModel.Branch)" />
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="costType" class="form-label">Cost Type</label>
                                        <InputText id="costType" class="form-control" @bind-Value="customerModel.CostType" />
                                        <ValidationMessage For="@(() => customerModel.CostType)" />
                                    </div>

                                    <div class="mb-3">
                                        <label for="userName" class="form-label">Username</label>
                                        <InputText id="userName" class="form-control" @bind-Value="customerModel.UserName" />
                                        <ValidationMessage For="@(() => customerModel.UserName)" />
                                    </div>

                                    <div class="mb-3">
                                        <label for="password" class="form-label">Password</label>
                                        <div class="input-group">
                                            <InputText id="password" class="form-control" type="@(showPassword ? "text" : "password")" @bind-Value="customerModel.Password" />
                                            <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                                <i class="bi @(showPassword ? "bi-eye-slash" : "bi-eye")"></i>
                                            </button>
                                        </div>
                                        <ValidationMessage For="@(() => customerModel.Password)" />
                                    </div>

                                    <!-- Profit Calculation Section -->
                                    <div class="mb-3">
                                        <div class="form-check mb-3">
                                            <InputCheckbox id="isPlusOneChecked" class="form-check-input" @bind-Value="isPlusOneChecked" @oninput="UpdateProfitCalculationMode" />
                                            <label class="form-check-label" for="isPlusOneChecked">
                                                Use Static Profit
                                            </label>
                                        </div>
                                        
                                        <div class="mb-3">
                                            <label for="constProfit" class="form-label">Static Profit Value</label>
                                            <InputNumber id="constProfit" class="@GetFieldClass(isPlusOneChecked)" 
                                                        @bind-Value="customerModel.ConstProfit" 
                                                        disabled="@(!isPlusOneChecked)" />
                                            <ValidationMessage For="@(() => customerModel.ConstProfit)" />
                                            <small class="text-muted">Enter a fixed amount (e.g., 1, 2, 3, 0.5)</small>
                                        </div>
                                        
                                        <div class="mb-3">
                                            <label for="profitPercentage" class="form-label">Profit Percentage (%)</label>
                                            <InputNumber id="profitPercentage" class="@GetPercentageFieldClass(isPlusOneChecked)" 
                                                        @bind-Value="customerModel.ProfitPercentage" 
                                                        disabled="@(isPlusOneChecked)" />
                                            <ValidationMessage For="@(() => customerModel.ProfitPercentage)" />
                                        </div>

                                        <div class="mb-3">
                                            <label for="extraProfitPercentage" class="form-label">Extra Profit Percentage (%)</label>
                                            <InputNumber id="extraProfitPercentage" class="@GetPercentageFieldClass(isPlusOneChecked)" 
                                                        @bind-Value="customerModel.ExtraProfitPercentage" 
                                                        disabled="@(isPlusOneChecked)" />
                                            <ValidationMessage For="@(() => customerModel.ExtraProfitPercentage)" />
                                        </div>
                                    </div>

                                    <div class="form-check mb-3">
                                        <InputCheckbox id="active" class="form-check-input" @bind-Value="activeValue" />
                                        <label class="form-check-label" for="active">
                                            Active
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <div class="d-grid gap-2 mt-4">
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-save me-1"></i> Save Changes
                                </button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public CustomerViewModel Customer { get; set; }
    [Parameter] public bool IsNewCustomer { get; set; }
    [Parameter] public EventCallback<CustomerViewModel> OnSave { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private CustomerViewModel customerModel = new CustomerViewModel();
    private bool isSaving = false;
    private bool activeValue = false;
    private bool isPlusOneChecked = false;

    private bool showPassword = false;
    
    // Helper methods for conditional CSS classes
    private string GetFieldClass(bool isEnabled)
    {
        return isEnabled ? "form-control" : "form-control bg-light";
    }
    
    private string GetPercentageFieldClass(bool isStaticProfitEnabled)
    {
        return isStaticProfitEnabled ? "form-control bg-light" : "form-control";
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void UpdateProfitCalculationMode()
    {
        customerModel.IsPlusOneChecked = isPlusOneChecked;
        
        if (isPlusOneChecked)
        {
            // If switching to static profit, initialize constant profit if needed
            if (!customerModel.ConstProfit.HasValue)
            {
                customerModel.ConstProfit = 0;
            }
            
            // Keep the percentage values but they won't be used
        }
        else
        {
            // If switching to percentage, initialize percentage values if needed
            if (!customerModel.ProfitPercentage.HasValue)
            {
                customerModel.ProfitPercentage = 0;
            }
            
            if (!customerModel.ExtraProfitPercentage.HasValue)
            {
                customerModel.ExtraProfitPercentage = 0;
            }
            
            // Keep the constant profit value but it won't be used
        }
        
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        if (IsVisible)
        {
            JSRuntime.InvokeVoidAsync("document.body.classList.add", "modal-open");
        }
    }

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            JSRuntime.InvokeVoidAsync("document.body.classList.add", "modal-open");
        }
        else
        {
            JSRuntime.InvokeVoidAsync("document.body.classList.remove", "modal-open");
        }

        if (Customer != null)
        {
            customerModel = new CustomerViewModel
            {
                Id = Customer.Id,
                Name = Customer.Name,
                PhoneNumber = Customer.PhoneNumber,
                Address = Customer.Address,
                Branch = Customer.Branch,
                CostType = Customer.CostType,
                UserName = Customer.UserName,
                Password = Customer.Password,
                IsPlusOneChecked = Customer.IsPlusOneChecked,
                ConstProfit = Customer.ConstProfit,
                ProfitPercentage = Customer.ProfitPercentage,
                ExtraProfitPercentage = Customer.ExtraProfitPercentage,
                DeviceId = Customer.DeviceId,
                Active = Customer.Active,
                FirebaseToken = Customer.FirebaseToken
            };

            activeValue = Customer.Active.GetValueOrDefault(false);
            isPlusOneChecked = Customer.IsPlusOneChecked.GetValueOrDefault(false);
        }
        else if (IsNewCustomer)
        {
            customerModel = new CustomerViewModel
            {
                Id = 0,
                Active = true,
                IsPlusOneChecked = false,
                ProfitPercentage = 0,
                ExtraProfitPercentage = 0,
                ConstProfit = 0
            };

            activeValue = true;
            isPlusOneChecked = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        isSaving = true;

        try
        {
            customerModel.Active = activeValue;
            customerModel.IsPlusOneChecked = isPlusOneChecked;

            // Make sure the backend uses the right values based on IsPlusOneChecked
            if (isPlusOneChecked)
            {
                // Server will ignore these, but we'll still send null to be clear
                customerModel.ProfitPercentage = null;
                customerModel.ExtraProfitPercentage = null;
            }
            else
            {
                // Server will ignore this, but we'll still send null to be clear
                customerModel.ConstProfit = null;
            }

            ApiResponse<CustomerViewModel> response;

            if (IsNewCustomer)
            {
                response = await CustomerService.CreateCustomerAsync(customerModel);
            }
            else
            {
                response = await CustomerService.UpdateCustomerAsync(customerModel);
            }

            if (response.Success)
            {
                // Using your ToastService implementation
                ToastService.ShowToast(response.Message, "success");

                if (OnSave.HasDelegate)
                {
                    await OnSave.InvokeAsync(response.Data);
                }

                await CloseModal();
            }
            else
            {
                ToastService.ShowToast(response.Message, "danger");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Failed to save customer: {ex.Message}", "danger");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task CloseModal()
    {
        // Remove body class when closing
        await JSRuntime.InvokeVoidAsync("document.body.classList.remove", "modal-open");

        if (OnClose.HasDelegate)
        {
            await OnClose.InvokeAsync();
        }
    }
}
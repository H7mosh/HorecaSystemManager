@page "/Orders"
@using sacmy.Client.Components.DialogHeader
@using sacmy.Client.Pages.Components.Dialogs
@using sacmy.Client.Services
@using sacmy.Shared.Core
@using sacmy.Shared.ViewModels.InvoiceViewModel
@using sacmy.Shared.ViewModels.OrdersViewModel
@using System.Globalization
@using sacmy.Shared.ViewModels.StickNoteViewModel
@inject OrderService OrderService
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject UserGlobalClass UserGlobal
@inject StickyNoteService stickyNoteService



<script>
    window.openFileDialog = function () {
        document.getElementById('fileInput').click();
    };

    window.openModal = function (modalId) {
        console.log("Opening modal with ID:", modalId);
        $('#' + modalId).modal('show');
    };

    window.closeModal = function (modalId) {
        console.log("Closing modal with ID:", modalId);
        $('#' + modalId).modal('hide');
    };
</script>

<style>
    
    .nav-tabs .nav-link {
        color: #6b7280;
        padding: 0.5rem 0;
        position: relative;
        background: none;
    }

    .nav-tabs .nav-link.active {
        color: #0D6EFD;
        font-weight: 500;
    }

    .nav-tabs .nav-link.active::after {
        content: '';
        position: absolute;
        bottom: -2px;
        left: 0;
        right: 0;
        height: 2px;
        background-color: #0D6EFD;
    }

    .form-control {
        height: 42px;
    }

    .form-control:focus {
        box-shadow: none;
        border-color: #ddd;
    }

    .table > :not(caption) > * > * {
        padding: 1rem 0.75rem;
        border-bottom-color: #f0f0f0;
    }

    .table tbody tr:hover {
        background-color: #f9fafb;
    }

    .btn-light {
        background-color: #f9fafb;
        border-color: #f0f0f0;
    }

    .btn-light:hover {
        background-color: #f0f0f0;
    }

    .pagination .page-link {
        color: #0D6EFD;
        border-color: #f0f0f0;
    }

    .pagination .page-item.active .page-link {
        color: #fff;
        background-color: #0D6EFD;
        border-color: #0D6EFD;
    }

    .main-invoice {
        background-color: #e6f7ff;
        font-weight: bold;
        color: #333;
    }

    
    .pdf-button {
        background-color: #dc3545;
        color: white;
        border: none;
        padding: 0.375rem 0.75rem;
        border-radius: 0.25rem;
        transition: background-color 0.2s;
    }

    .pdf-button:hover {
        background-color: #c82333;
    }

    .delivered-button {
        background-color: #00a6fb;
        color: white;
        border: none;
        padding: 0.375rem 0.75rem;
        border-radius: 0.25rem;
        transition: background-color 0.2s;
    }

    .pdf-button:hover {
        background-color: #0582ca;
    }

    /* Responsive Styles */
    @@media (max-width: 768px) {
        .table-responsive {
            overflow-x: auto;
        }

        .hide-on-mobile {
            display: none;
        }

        .table td, .table th {
            min-width: 100px;
        }

        .customer-cell {
            min-width: 200px;
        }

        .expanded-invoice-section {
            padding: 0 !important;
        }

        .expanded-invoice-table {
            font-size: 0.875rem;
        }

        .nav-tabs-wrapper {
            overflow-x: auto;
            width: 100%;
        }

        .nav-tabs {
            flex-wrap: nowrap;
            min-width: max-content;
        }
    }

    .sticky-notes-container {
        display: flex;
        margin-left: -8px;
    }

    .sticky-note-wrapper {
        position: relative;
        margin-left: -8px;
    }

    .sticky-note-wrapper:first-child {
        margin-left: 0;
    }

    .employee-avatar {
        width: 35px;
        height: 35px;
        border-radius: 50%;
        overflow: hidden;
        position: relative;
        cursor: pointer;
        transition: transform 0.2s ease;
        border: 2px solid white;
    }

    .employee-avatar.add-note {
        background-color: #3B82F6;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
    }

    .employee-avatar:hover {
        transform: scale(1.1);
        z-index: 2;
    }

    .sticky-note-tooltip {
        position: absolute;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.15);
        padding: 12px;
        width: 280px;
        z-index: 1000;
        top: 100%;
        left: 50%;
        transform: translateX(-50%);
        margin-top: 8px;
        display: none;
    }

    .employee-avatar:hover .sticky-note-tooltip {
        display: block;
    }

    .note-timeline-item {
        padding: 1rem;
        border-left: 2px solid #e5e7eb;
        margin-left: 1rem;
        position: relative;
    }

    .note-timeline-item::before {
        content: '';
        position: absolute;
        width: 12px;
        height: 12px;
        background: #3b82f6;
        border-radius: 50%;
        left: -7px;
        top: 1.5rem;
    }
</style>

<div class="container-fluid py-4 px-5">

    @* Orders Table Header *@
    <div class="mb-4">
        <!-- Tabs and Pagination Info -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div class="nav-tabs-wrapper">
                <div class="nav nav-tabs border-0 gap-4">
                    @foreach (var stage in stages.OrderBy(s => s.Sequence))
                    {
                        <button class="nav-link border-0 px-0 @(selectedStageId == stage.OrderStageId ? "active" : "")"
                                @onclick="() => SelectStage(stage.OrderStageId)">
                            @stage.OrderStageNameEn
                            <span class="ms-2 small text-muted">
                                @stage.OrderCount
                            </span>
                        </button>
                    }
                </div>
            </div>
            <div>
                <span class="text-muted small">
                    @if (orderResponse != null)
                    {
                        <text>
                            Showing @(((filter.PageNumber - 1) * filter.PageSize) + 1) -
                            @Math.Min(filter.PageNumber * filter.PageSize, orderResponse.TotalCount)
                            of @orderResponse.TotalCount results
                        </text>
                    }
                </span>
            </div>
        </div>

        <!-- Search and Filters -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="search-wrapper position-relative" style="width: 350px;">
                <input type="text"
                       class="form-control bg-light border-0 ps-5"
                       placeholder="Search..."
                       @bind="searchTerm"
                       @bind:event="oninput"
                       @onkeyup="HandleSearch">
                <i class="bi bi-search position-absolute text-muted"
                   style="left: 1rem; top: 50%; transform: translateY(-50%);"></i>

                @if (!string.IsNullOrEmpty(searchTerm))
                {
                    <button class="btn position-absolute end-0 top-50 translate-middle-y border-0 py-1 px-3"
                            @onclick="ClearSearch">
                        <i class="bi bi-x"></i>
                    </button>
                }
            </div>
        </div>
    </div>

    @* Orders Table *@
    <div class="table-responsive">
        <table class="table table-hover align-middle">
            <thead>
                <tr class="text-uppercase small text-muted">
                    @if (selectedStageId == Guid.Parse("480140E5-35DB-4887-B8F9-1EB5BA2977E9"))
                    {
                        <th class="fw-normal ps-0" style="width: 40px"></th>
                    }
                    <th class="fw-normal">Order ID</th>
                    <th class="fw-normal">Customer</th>
                    <th class="fw-normal hide-on-mobile">Address</th>
                    <th class="fw-normal">Total</th>
                    <th class="fw-normal hide-on-mobile">Products</th>
                    <th class="fw-normal">Notes</th>
                    <th class="fw-normal">Created Date</th>
                    @if (selectedStageId == Guid.Parse("3EA54A69-1168-4641-B8CE-AC6E40D0556D")) 
                    {
                        <th class="fw-normal">Actions</th>
                    }
                    
                    @if (selectedStageId == Guid.Parse("FB10171A-21CD-4D8D-8453-0AC58D31D95F"))
                    {
                        <th class="fw-normal">Actions</th>
                    }
                
                </tr>
            </thead>
            <tbody>
                @if (orderResponse?.Items != null)
                {
                    @foreach (var order in orderResponse.Items)
                    {

                        <tr style="cursor: pointer;">
                            @if (selectedStageId == Guid.Parse("480140E5-35DB-4887-B8F9-1EB5BA2977E9"))
                            {
                                <td class="ps-0">
                                    @if (order.Invoices?.Any() == true)
                                    {
                                        <button class="btn btn-link p-0 text-muted"
                                                @onclick="() => ToggleOrderExpansion(order.OrderId)"
                                                @onclick:stopPropagation="true">
                                            <i class="bi @(expandedOrders.Contains(order.OrderId) ? "bi-chevron-down" : "bi-chevron-right")"></i>
                                        </button>
                                    }
                                </td>
                            }

                            <td @onclick="() => OpenOrderDetails(order.OrderId, order.CustomerId , order.CostumerFirebaseToken)">
                                <span style="color: #6366f1;">#@order.OrderId</span>
                            </td>
                            <td class="customer-cell" @onclick="() => OpenOrderDetails(order.OrderId, order.CustomerId , order.CostumerFirebaseToken)">
                                <div class="d-flex align-items-center gap-2">
                                    <div class="rounded-circle bg-secondary text-white d-flex align-items-center justify-content-center"
                                         style="width: 32px; height: 32px;">
                                        @(string.IsNullOrEmpty(order.CostumerName) ? "?" : order.CostumerName[0].ToString().ToUpper())
                                    </div>
                                    <span>@order.CostumerName</span>
                                </div>
                            </td>

                            <td class="text-muted hide-on-mobile" @onclick="() => OpenOrderDetails(order.OrderId, order.CustomerId , order.CostumerFirebaseToken)">
                                @order.Address
                            </td>

                            <td class="text-muted" @onclick="() => OpenOrderDetails(order.OrderId, order.CustomerId , order.CostumerFirebaseToken)">
                                $@string.Format(CultureInfo.InvariantCulture, "{0:0.00}", order.Total)
                            </td>

                            <td class="text-muted hide-on-mobile" @onclick="() => OpenOrderDetails(order.OrderId, order.CustomerId, order.CostumerFirebaseToken)">
                                @order.ItemCount items
                            </td>

                            <td>
                                @if (order.StickyNotes?.Any() == true)
                                {
                                    <div class="sticky-notes-container" @onclick="() => ShowAllNotes(order.OrderId, order.StickyNotes)">
                                        @foreach (var note in order.StickyNotes)
                                        {
                                            <div class="sticky-note-wrapper">
                                                <div class="employee-avatar" style="background-color: @(note == order.StickyNotes.First() ? "#FEE2E2" : "#D1FAE5")">
                                                    <img src="@(note.Employee?.Image ?? "/images/placeholder-avatar.png")"
                                                         alt="@($"{note.Employee?.FirstName} {note.Employee?.LastName}")" />

                                                    <div class="sticky-note-tooltip">
                                                        <div class="note-header">
                                                            <img class="note-author-image"
                                                                 src="@(note.Employee?.Image ?? "/images/placeholder-avatar.png")"
                                                                 alt="@($"{note.Employee?.FirstName} {note.Employee?.LastName}")" />
                                                            <div class="note-author-info">
                                                                <div class="note-author-name">@(note.Employee?.FirstName) @(note.Employee?.LastName)</div>
                                                                <div class="note-author-title">@(note.Employee?.JobTitle ?? "Employee")</div>
                                                            </div>
                                                        </div>
                                                        <div class="note-content">@note.Note</div>
                                                        <div class="note-date">@note.CreatedDate.ToString("MMM dd, yyyy")</div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="employee-avatar add-note" @onclick="() => ShowAddNoteDialog(order.OrderId)">
                                        <i class="bi bi-plus-lg"></i>
                                    </div>
                                }
                            </td>

                            <td @onclick="() => OpenOrderDetails(order.OrderId, order.CustomerId, order.CostumerFirebaseToken)">
                                @order.CreatedDate.ToString("MM/dd/yyyy HH:mm")
                            </td>

                            @if (selectedStageId == Guid.Parse("3EA54A69-1168-4641-B8CE-AC6E40D0556D")) // order loaded into vehicle
                            {
                                <td>
                                    <button class="pdf-button"
                                            @onclick="() => GenerateOrderPdf(order.OrderId)"
                                            @onclick:stopPropagation="true">
                                        <i class="bi bi-file-pdf me-1"></i>PDF
                                    </button>
                                </td>
                            }
    
                            
                            @if (selectedStageId == Guid.Parse("FB10171A-21CD-4D8D-8453-0AC58D31D95F")) // order loaded into vehicle
                            {
                                <td>
                                    <button class="delivered-button"
                                            @onclick="() => MarkAsDelivered(order.OrderId)"
                                            @onclick:stopPropagation="true">
                                        <i class="bi bi-file-pdf me-1"></i>Mark as Delivered
                                    </button>
                                </td>
                            }
                
                        </tr>

                        @if (selectedStageId == Guid.Parse("480140E5-35DB-4887-B8F9-1EB5BA2977E9") && expandedOrders.Contains(order.OrderId) && order.Invoices?.Any() == true)
                        {
                            <tr class="border-0">
                                <td colspan="8" class="pt-0 pb-3">
                                    <div class="ms-4 bg-light rounded p-3 expanded-invoice-section">
                                        <div class="small text-muted mb-2">Related Invoices</div>
                                        <div class="table-responsive">
                                            <table class="table table-sm mb-0 expanded-invoice-table">
                                                <thead>
                                                    <tr class="text-muted">
                                                        <th>Invoice #</th>
                                                        <th>Date</th>
                                                        <th>Total</th>
                                                        <th>Paid</th>
                                                        <th>Remaining</th>
                                                        <th>Branch</th>
                                                        <th></th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var invoice in order.Invoices)
                                                    {
                                                        <tr class="@(invoice.IsItTheMainOne ? "main-invoice" : "")">
                                                            <td class="text-primary fw-medium">#@invoice.Id</td>
                                                            <td>@(invoice.Date?.ToString("MM/dd/yyyy"))</td>
                                                            <td>$@(invoice.Tootal?.ToString("N2") ?? "0.00")</td>
                                                            <td class="text-success">$@(invoice.Payed?.ToString("N2") ?? "0.00")</td>
                                                            <td>
                                                                @if (invoice.Remaing > 0)
                                                                {
                                                                    <span class="text-warning">$@invoice.Remaing?.ToString("N2")</span>
                                                                }
                                                                else
                                                                {
                                                                    <span>-</span>
                                                                }
                                                            </td>
                                                            <td>@invoice.branch</td>
                                                            <td class="text-end">
                                                                <button class="btn btn-sm btn-light"
                                                                        @onclick="() => ShowInvoiceItems(invoice, order.OrderId , order.CostumerFirebaseToken , order.CustomerId.ToString())"
                                                                        @onclick:stopPropagation="true">
                                                                    <i class="bi bi-box me-1"></i>Items
                                                                </button>
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    </div>

    @* Pagination *@
    @if (orderResponse != null)
    {
        <div class="d-flex justify-content-between align-items-center mt-4">
            <div class="text-muted">
                Total Orders: @orderResponse.TotalCount
            </div>
            <nav>
                <ul class="pagination">
                    <li class="page-item @(filter.PageNumber == 1 ? "disabled" : "")">
                        <button class="page-link"
                                @onclick="() => ChangePage(filter.PageNumber - 1)"
                                disabled="@(filter.PageNumber == 1)">
                            Previous
                        </button>
                    </li>
                    @for (int i = 1; i <= orderResponse.TotalPages; i++)
                    {
                        var pageNumber = i;
                        <li class="page-item @(filter.PageNumber == pageNumber ? "active" : "")">
                            <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                        </li>
                    }
                    <li class="page-item @(filter.PageNumber == orderResponse.TotalPages ? "disabled" : "")">
                        <button class="page-link"
                                @onclick="() => ChangePage(filter.PageNumber + 1)"
                                disabled="@(filter.PageNumber == orderResponse.TotalPages)">
                            Next
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
    }


    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050">
        @if (showNotification)
        {
            <div class="toast show @(notificationType == "success" ? "bg-success" : "bg-danger") text-white" role="alert">
                <div class="toast-body d-flex justify-content-between align-items-center">
                    <span>@notificationMessage</span>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => showNotification = false"></button>
                </div>
            </div>
        }
    </div>

    <OrderDetails OrderId="@selectedOrderId"
                  CustomerId="@selectedOrderCustomerId"
                  @bind-Visible="isOrderDetailsOpen"
                  CustomerFirebaseToken="@selectedOrderCustomerFirebaseToken"
                  OnProcessingComplete="HandleProcessingComplete" />

    <FilteredOrder OrderId="@selectedOrderId"
                   CustomerId="@selectedOrderCustomerId"
                   @bind-Visible="showFilteredOrder"
                   CustomerFirebaseToken="@selectedOrderCustomerFirebaseToken"
                   Results="@processingResults"
                   OnRefreshOrders="LoadOrders" />


</div>

<InvoicePdfDialog @ref="_invoicePdfDialog" OrderId="@selectedOrderId" Invoices="@selectedInvoices" />


@if (showAllNotesDialog)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" id="notesModal">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content border-0 shadow">
                <!-- Using the same DialogHeader component as in the Advanced Edit modal -->
                <DialogHeader 
                    Title="Order Notes History"
                    Icon="bi bi-sticky" 
                    OnClose="@(CloseAllNotesDialog)"/>

                <div class="modal-body p-4">
                    <div class="notes-timeline">
                        @if (currentOrderNotes?.Any() == true)
                        {
                            @foreach (var note in currentOrderNotes.OrderByDescending(n => n.CreatedDate))
                            {
                                <div class="note-timeline-item">
                                    <div class="note-timeline-header d-flex justify-content-between mb-2">
                                        <div class="d-flex align-items-center gap-3">
                                            <div class="employee-avatar" style="width: 40px; height: 40px; border: none;">
                                                <img src="@(note.Employee?.Image ?? "/images/placeholder-avatar.png")"
                                                    alt="@($"{note.Employee?.FirstName} {note.Employee?.LastName}")"
                                                    class="w-100 h-100 object-fit-cover" />
                                            </div>
                                            <div>
                                                <div class="fw-medium">
                                                    @(note.Employee?.FirstName) @(note.Employee?.LastName)
                                                </div>
                                                <div class="text-muted small">
                                                    @(note.Employee?.JobTitle ?? "Employee")
                                                </div>
                                            </div>
                                        </div>
                                        <div class="text-muted small">
                                            @note.CreatedDate.ToString("MMM dd, yyyy HH:mm")
                                        </div>
                                    </div>
                                    <div class="note-timeline-content bg-light p-3 rounded">
                                        @note.Note
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center text-muted p-4 bg-light rounded">
                                <i class="bi bi-sticky" style="font-size: 2rem;"></i>
                                <p class="mb-0 mt-2">No notes found for this order.</p>
                            </div>
                        }
                    </div>

                    <div class="add-note-section mt-4 pt-4 border-top">
                        <div class="d-flex gap-3">
                            <textarea class="form-control"
                                      rows="2"
                                      placeholder="Add a new note..."
                                      @bind="newNoteText"></textarea>
                            <button class="btn btn-primary align-self-start px-4 d-flex align-items-center gap-2"
                                    @onclick="AddNote"
                                    disabled="@isAddingNote">
                                @if (isAddingNote)
                                {
                                    <span class="spinner-border spinner-border-sm"></span>
                                    <span>Adding...</span>
                                }
                                else
                                {
                                    <i class="bi bi-plus-lg"></i>
                                    <span>Add Note</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@if (showAddDialog)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" id="addNoteModal">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 shadow">
                <!-- Using the same DialogHeader component as in the Advanced Edit modal -->
                <DialogHeader Title="Add Note to Order"
                              Icon="bi bi-plus-circle"
                              OnClose="@(CloseAddDialog)" />

                <div class="modal-body p-4">
                    <div class="mb-3">
                        <label for="noteText" class="form-label text-muted">Note</label>
                        <textarea id="noteText"
                                  class="form-control"
                                  rows="4"
                                  placeholder="Enter your note here..."
                                  @bind="newNoteText"></textarea>
                    </div>
                </div>

                <div class="modal-footer border-top bg-light">
                    <button type="button"
                            class="btn btn-link text-decoration-none"
                            @onclick="CloseAddDialog"
                            disabled="@isAddingNote">
                        Cancel
                    </button>
                    <button type="button"
                            class="btn btn-primary px-4 d-flex align-items-center gap-2"
                            @onclick="AddNote"
                            disabled="@isAddingNote">
                        @if (isAddingNote)
                        {
                            <span class="spinner-border spinner-border-sm"></span>
                            <span>Adding...</span>
                        }
                        else
                        {
                            <i class="bi bi-plus-lg"></i>
                            <span>Add Note</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@code {

    private List<OrdersByStagesViewModel> stages = new();
    private Guid? selectedStageId;
    private string searchTerm = "";
    private DateTime? startDate;
    private DateTime? endDate;
    private PaginatedResponse<OrderViewModel>? orderResponse;
    private PaginationFilter filter = new() { PageNumber = 1, PageSize = 10 };
    private Timer? searchTimer;

    private bool isOrderDetailsOpen;
    private bool showFilteredOrder;
    private int selectedOrderId;
    private int selectedOrderCustomerId;
    private string selectedOrderCustomerFirebaseToken;



    private string selectedCustomerId;

    private int? selectedInvoiceId;
    private bool showInvoiceItems;

    private HashSet<int> expandedOrders = new();

    private void ToggleOrderExpansion(int orderId)
    {
        if (expandedOrders.Contains(orderId))
        {
            expandedOrders.Remove(orderId);
        }
        else
        {
            expandedOrders.Add(orderId);
        }

    }

    private Dictionary<string, List<OrderViewerViewModel>> processingResults;

    private Dictionary<int, bool> loadingStates = new();

    private string notificationMessage = string.Empty;

    private string notificationType = string.Empty; // "success" or "error"

    private bool showNotification = false;

    private bool showAllNotesDialog = false;
    private bool showAddDialog = false;
    private string newNoteText = "";
    private List<GetStickyNoteViewModel> currentOrderNotes;
    private bool isAddingNote = false;

    protected override async Task OnInitializedAsync()
    {
        stages = await OrderService.GetStagesAsync();
        var firstStage = stages.OrderBy(s => s.Sequence).FirstOrDefault();
        if (firstStage != null)
        {
            await SelectStage(firstStage.OrderStageId);
        }
    }

    private async Task ShowNotification(string message, string type)

    {

        notificationMessage = message;

        notificationType = type;

        showNotification = true;

        StateHasChanged();


        // Auto-hide notification after 3 seconds

        await Task.Delay(3000);

        showNotification = false;

        StateHasChanged();

    }

    private async Task SelectStage(Guid stageId)
    {
        selectedStageId = stageId;
        filter.OrderStageId = stageId;
        filter.PageNumber = 1;
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        orderResponse = await OrderService.GetOrdersByStageAsync(filter);
        StateHasChanged();
    }

    private void OpenOrderDetails(int orderId, int customerId, string customerFirebaseToken)
    {
        if (selectedStageId == Guid.Parse("CC468327-47DF-4FA7-95B5-DE14D4C78C44"))
        {
            selectedOrderCustomerId = customerId;
            selectedOrderCustomerFirebaseToken = customerFirebaseToken;
            selectedOrderId = orderId;
            isOrderDetailsOpen = true;
            showFilteredOrder = false;
        }
    }

    private void ShowInvoiceItems(int invoiceId, string customerFirebaseToken, string customerId)
    {
        selectedInvoiceId = invoiceId;
        selectedOrderCustomerFirebaseToken = customerFirebaseToken;
        selectedCustomerId = customerId;
        showInvoiceItems = true;
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= orderResponse?.TotalPages)
        {
            filter.PageNumber = page;
            await LoadOrders();
        }
    }

    private void HandleSearch(KeyboardEventArgs e)
    {
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                filter.SearchTerm = searchTerm;
                filter.PageNumber = 1;
                await LoadOrders();
            });
        }, null, 500, Timeout.Infinite);
    }

    private async Task ClearSearch()
    {
        searchTerm = "";
        filter.SearchTerm = null;
        filter.PageNumber = 1;
        await LoadOrders();
    }

    private void HandleProcessingComplete(Dictionary<string, List<OrderViewerViewModel>> results)
    {
        processingResults = results;
        isOrderDetailsOpen = false;
        showFilteredOrder = true;
        StateHasChanged();
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }

    private async Task ShowInvoiceItems(BuyFatoraViewModel invoice, int orderId, string customerFirebaseToken, string customerId)
    {
        var parameters = new DialogParameters
        {
            { "Invoice", invoice },
            { "OrderId", orderId.ToString() },
            { "CustomerId" , customerId},
            { "CustomerFirebaseNotificaionKey" , customerFirebaseToken},
            { "OnSuccessfulPdfGeneration", EventCallback.Factory.Create(this, LoadOrders) }
        };

        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
            //DisableBackdropClick = true
            };

        var dialog = await DialogService.ShowAsync<InvoiceItemDialogg>("Invoice Items", parameters, options);

        await dialog.Result;
    }

    private InvoicePdfDialog _invoicePdfDialog;

    private List<BuyFatoraViewModel> selectedInvoices;

    private async Task GenerateOrderPdf(int orderId)
    {
        try
        {
            var order = orderResponse?.Items.FirstOrDefault(o => o.OrderId == orderId);
            if (order?.Invoices == null || !order.Invoices.Any())
            {
                // Could add a notification here that no invoices were found
                return;
            }


            var mainInvoice = order.Invoices.FirstOrDefault(i => i.IsItTheMainOne);

            if (mainInvoice == null)
            {
                // Could add a notification here that no main invoice was found
                return;
            }

            // Set the parameters
            selectedOrderId = orderId;
            selectedInvoices = order.Invoices;

            // Trigger a re-render
            StateHasChanged();
            // Open the modal
            await JSRuntime.InvokeVoidAsync("openModal", "invoicePdfModal");
        }

        catch (Exception ex)
        {
            Console.WriteLine($"Error showing PDF dialog: {ex.Message}");

        }

    }

    private async Task MarkAsDelivered(int orderId)

    {

        // Set loading state for this specific order

        loadingStates[orderId] = true;

        StateHasChanged();



        try

        {

            var order = orderResponse?.Items.FirstOrDefault(o => o.OrderId == orderId);

            if (order?.Invoices == null || !order.Invoices.Any())

            {

                await ShowNotification("No invoices found for this order.", "error");

                return;

            }



            var mainInvoice = order.Invoices.FirstOrDefault(i => i.IsItTheMainOne);

            if (mainInvoice == null)

            {

                await ShowNotification("Main invoice not found for this order.", "error");

                return;

            }



            var result = await OrderService.UpdateOrderStageAsync(

                orderId,
                Guid.Parse("2AF6BED3-386E-45F9-A158-833C0428ACCC"),

                mainInvoice.Id,

                true

            );



            // Show success message

            await ShowNotification("Order marked as delivered successfully.", "success");



            // Refresh the data

            await LoadOrders();

        }

        catch (Exception ex)

        {

            // Show error message

            await ShowNotification($"Failed to mark order as delivered: {ex.Message}", "error");

        }

        finally

        {

            // Clear loading state

            loadingStates.Remove(orderId);

            StateHasChanged();

        }

    }

    private void ShowAddNoteDialog(int orderId)
    {
        selectedOrderId = orderId;
        showAddDialog = true;
    }

    private void CloseAddDialog()
    {
        showAddDialog = false;
        newNoteText = "";
    }

    private async Task AddNote()
    {
        if (string.IsNullOrWhiteSpace(newNoteText) || selectedOrderId == 0)
            return;

        try
        {
            var model = new AddStickyNoteViewModel
                {
                    TableName = "Orders",
                    RecordId = selectedOrderId.ToString(),
                    Note = newNoteText,
                    EmployeeId = UserGlobal.User.Id
                };

            var response = await stickyNoteService.CreateStickyNoteAsync(model);

            if (response.Success)
            {
                await LoadOrders(); // Refreshes the data
                CloseAddDialog();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            // Error handling if needed
            Console.WriteLine($"Error adding note: {ex.Message}");
        }
    }

    private void ShowAllNotes(int orderId, List<GetStickyNoteViewModel> notes)
    {
        selectedOrderId = orderId;
        currentOrderNotes = notes;
        showAllNotesDialog = true;
    }

    private void CloseAllNotesDialog()
    {
        showAllNotesDialog = false;
        currentOrderNotes = null;
        newNoteText = "";
    }

    private async Task AddNoteFromTimeline()
    {
        if (string.IsNullOrWhiteSpace(newNoteText))
        {
            return;
        }

        try
        {
            isAddingNote = true;

            var model = new AddStickyNoteViewModel
                {
                    TableName = "Orders",
                    RecordId = selectedOrderId.ToString(),
                    Note = newNoteText,
                    EmployeeId = UserGlobal.User.Id
                };

            var response = await stickyNoteService.CreateStickyNoteAsync(model);

            if (response.Success)
            {
                // Refresh the order data
                await LoadOrders();

                // Get the updated order data
                var order = orderResponse?.Items.FirstOrDefault(o => o.OrderId == selectedOrderId);
                if (order != null)
                {
                    currentOrderNotes = order.StickyNotes;
                    StateHasChanged();
                }

                newNoteText = ""; // Clear the input
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding note: {ex.Message}");
        }
        finally
        {
            isAddingNote = false;
            StateHasChanged();
        }
    }
}



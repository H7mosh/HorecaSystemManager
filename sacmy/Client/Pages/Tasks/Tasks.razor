@page "/Tasks"
@using Blazored.LocalStorage
@using Microsoft.Extensions.Localization
@using System.Globalization
@using sacmy.Client.Services
@using sacmy.Shared.Core
@using sacmy.Shared.ViewModels.EmployeeViewModel
@using sacmy.Shared.ViewModels.Notification
@using sacmy.Shared.ViewModels.TasksViewModel
@inject TaskService TaskService
@inject EmployeeService EmployeeService
@inject NotificationClientService NotificationClientService
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime
@inject UserGlobalClass UserGlobal
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage
@inject IStringLocalizer<SharedResource> Localizer


<script>
    window.openFileDialog = function () {
        document.getElementById('fileInput').click();
    };

    window.openModal = function (modalId) {
        $('#' + modalId).modal('show');
    };

    window.closeModal = function (modalId) {
        $('#' + modalId).modal('hide');
    };
</script>

<div class="tasks-container">
    <div class="tasks-list-container">
        <div class="tasks-list-header">
            <span>@Localizer["Tasks"] (@tasks?.Count)</span>
            <div>
                <button class="add-task-button" @onclick="ShowAddTaskModal">@Localizer["AddTask"]</button>
                <button class="reminder-button" @onclick="ShowRemindModal">@Localizer["Remind"]</button>
            </div>
        </div>
        @if (tasks != null && tasks.Any())
        {
            <div class="tasks-list">
                @foreach (var task in tasks)
                {
                    <div class="task-item @(selectedTask?.Id == task.Id ? "selected" : "")" @onclick="(() => OnTaskSelected(task))">
                        <div class="task-title">
                            @task.Title
                        </div>
                        <div class="task-meta">
                            <span>@Localizer["InitDate"] @task.CreatedDate.ToString("MM-dd-yyyy hh:mm tt")</span>
                            <span class="task-deadline">@Localizer["ExpireDate"] @task.DeadlineDate?.ToString("MM-dd-yyyy hh:mm tt")</span>
                        </div>
                        <div class="task-status @(task.Status == "Closed" || task.Status == "Done" ? "closed" : task.Status == "Pending" ? "pending" : "inProgress")">
                            @task.Status
                        </div>
                        <div class="task-assigned">
                            <span>@task.AssignedToEmployee</span>
                            <img src="@task.EmployeeImage" alt="Employee Avatar" />
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p>@Localizer["NoTasksAvailable"]</p>
        }
    </div>

    @if (selectedTask != null)
    {
        <div class="task-detail">
            <div class="task-detail-content">
                <h3>@selectedTask.Title</h3>
                <div class="view-more-container">
                    <p class="description">
                        <strong>@Localizer["Description"]</strong> @selectedTask.Description
                    </p>
                    <button class="view-more-button" @onclick="ShowFullDescription">@Localizer["ViewMore"]</button>
                </div>
                <div class="created-by">
                    <span><strong>@Localizer["CreatedBy"]</strong></span>
                    <div class="creator-info">
                        <span>@selectedTask.CreatedbyName</span>
                        <img src="@selectedTask.CreatedbyImage" alt="Creator Avatar" />
                    </div>
                    <div class="form-group-status-container">
                        <label for="taskStatus">@Localizer["Status"]:</label>
                        <select id="taskStatus" class="form-control" @onchange="async (e) => await OnTaskStatusChanged(e)">
                            @foreach (var status in taskStatuses)
                            {
                                var restrictedStatuses = new List<Guid>
                                    {
                                    Guid.Parse("71B3DEAF-4C39-4F49-BF57-43F2E9CE6CBA"), // Re-Scheduled
                                    Guid.Parse("A5F6C587-BF08-4C4A-8AB2-548065DB9C71"), // Replace with actual GUID for Re-Assigned
                                    Guid.Parse("B582E253-5B36-4AF5-A758-9004CA5E54E0") // Replace with actual GUID for Closed
                                    };

                                <option value="@status.Id"
                                        disabled="@((selectedTask.CreatedBy != UserGlobal.User.Id && restrictedStatuses.Contains(status.Id)) ? "disabled" : null)"
                                        selected="@(status.Id == selectedTask.StatusId ? "selected" : null)">
                                    @status.StatusEn
                                </option>
                            }
                        </select>
                    </div>

                    <div class="comments-header">
                        <i class="bi bi-chat-left-text"></i> @Localizer["Comments"]
                    </div>
                    <div class="comments-line"></div>
                </div>
            </div>
            <div class="task-comments">
                @if (comments.Count == 0)
                {
                    <div class="no-comments">@Localizer["ThereAreNoMessagesYet"]</div>
                }
                else
                {
                    @foreach (var comment in comments)
                    {
                        <div class="comment-container" style="background-color: @(comment.EmpolyeeRole == "manager" ? "rgba(56, 122, 223, 0.2)" : "inherit")">
                            <img class="comment-avatar" src="@comment.EmployeeImage" alt="Commenter Avatar" />
                            <div class="comment-content">
                                <div class="comment-header">
                                    <span class="comment-author">@comment.EmployeeName</span>
                                    <span class="comment-date">@Helper.GetRelativeTime(comment.CreatedDate)</span>
                                </div>
                                <div class="comment-text">@comment.Note</div>
                                @if (!string.IsNullOrEmpty(comment.FileLink))
                                {
                                    <div class="download-button">
                                        <a href="@comment.FileLink" class="download-attachment" download="filename.ext" target="_blank">
                                            @Localizer["GetAttachment"]
                                        </a>
                                    </div>
                                }
                            </div>
                        </div>

                    }
                }
            </div>
            <div class="message-box-container">
                @if (!string.IsNullOrEmpty(selectedFileName))
                {
                    <div class="file-display">
                        <div class="file-name">@Localizer["SelectedFile"] @selectedFileName</div>
                        <button type="button" class="btn btn-secondary" @onclick="RemoveFile">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3-fill" viewBox="0 0 16 16">
                                <path d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5m-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5M4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06m6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528M8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5"></path>
                            </svg>
                        </button>
                    </div>
                }
                <div class="message-box">
                    <textarea @bind="noteText" placeholder="@Localizer["WriteYourMessageHere"]"></textarea>
                    <div class="button-container">
                        <button class="attach-button" @onclick="OpenFileDialog">@Localizer["Attach"]</button>
                        <InputFile id="fileInput" style="display: none;" OnChange="OnFileSelected" />
                        <button class="send-button" @onclick="SendNote">@Localizer["Send"]</button>
                    </div>
                </div>
                @if (!string.IsNullOrWhiteSpace(noteErrorMessage))
                {
                    <div class="text-danger">@noteErrorMessage</div>
                }
            </div>
            <div class="modal fade @(showModal ? "show d-block" : "")" id="descriptionModal" tabindex="-1" role="dialog" aria-labelledby="descriptionModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="descriptionModalLabel">@Localizer["TaskDescription"]</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModal">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            @selectedTask.Description
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseModal">@Localizer["Close"]</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Add Task Modal -->
    <AddTaskModal IsVisible="@showAddTaskModal"
                    IsVisibleChanged="@(EventCallback.Factory.Create<bool>(this, value => showAddTaskModal = value))"
                    CustomerId=null
                    InvoiceId=null />
    
    <!-- Remind Modal -->
    <div class="modal fade @(showRemindModal ? "show d-block" : "")" id="remindModal" tabindex="-1" role="dialog" aria-labelledby="remindModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="remindModalLabel">@Localizer["RemindTask"]</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseRemindModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="remindMessage">@Localizer["RemindMessage"]</label>
                        <textarea class="form-control" id="remindMessage" @bind="remindMessage" placeholder="@Localizer["EnterRemindMessage"]"></textarea>
                        @if (string.IsNullOrWhiteSpace(remindMessage))
                        {
                            <div class="text-danger">@Localizer["MessageIsRequired"]</div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseRemindModal">@Localizer["Close"]</button>
                    <button type="button" class="btn btn-primary" @onclick="() => SendRemind(selectedTask.EmployeeFirebaseToken)" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            <span>@Localizer["SendRemind"]</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Re-Scheduled Modal -->
    <div class="modal fade @(showRescheduleModal ? "show d-block" : "")" id="rescheduleModal" tabindex="-1" role="dialog" aria-labelledby="rescheduleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="rescheduleModalLabel">@Localizer["RescheduleTask"]</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseRescheduleModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="newDeadline">@Localizer["NewDeadline"]</label>
                        <input type="datetime-local" class="form-control" id="newDeadline" @bind="newTaskDeadline">
                        @if (newTaskDeadline == default(DateTime))
                        {
                            <div class="text-danger">@Localizer["NewDeadlineIsRequired"]</div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseRescheduleModal">@Localizer["Close"]</button>
                    <button type="button" class="btn btn-primary" @onclick="RescheduleTask" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            <span>@Localizer["Save"]</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Re-Assigned Modal -->
    <div class="modal fade @(showReassignModal ? "show d-block" : "")" id="reassignModal" tabindex="-1" role="dialog" aria-labelledby="reassignModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="reassignModalLabel">@Localizer["ReassignTask"]</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseReassignModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="reassignEmployee">@Localizer["NewEmployee"]</label>
                        <select class="form-control" id="reassignEmployee" @onchange="(e) => newTaskAssignedToEmployeeId = Guid.Parse(e.Value.ToString())">
                            <option value="">@Localizer["SelectEmployee"]</option>
                            @if (employees != null)
                            {
                                @foreach (var employee in employees)
                                {
                                    <option value="@employee.Id">@employee.FirstName @employee.LastName</option>
                                }
                            }
                            else
                            {
                                <option value="">@Localizer["ThereIsNoEmployeeYet"]</option>
                            }
                        </select>
                        @if (newTaskAssignedToEmployeeId == Guid.Empty)
                        {
                            <div class="text-danger">@Localizer["NewEmployeeIsRequired"]</div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseReassignModal">@Localizer["Close"]</button>
                    <button type="button" class="btn btn-primary" @onclick="ReassignTask" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            <span>@Localizer["Save"]</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<MudSnackbarProvider />

@code {
    private List<GetTaskViewModel> tasks = new List<GetTaskViewModel>();
    private List<GetTaskNotes> comments = new List<GetTaskNotes>();
    private List<GetTaskStatus> taskStatuses;
    private List<GetTaskType> taskTypes;
    private List<GetEmployeeViewModel> employees;
    private GetTaskViewModel selectedTask;
    private string selectedFileName;
    private string noteText;
    private byte[] fileBytes;
    private string fileContentType;
    private bool showModal = false;
    private bool isLoading = false;
    private bool showSuccessMessage = false;
    private bool showAddTaskModal = false;
    private bool showRemindModal = false;
    private bool showRescheduleModal = false;
    private bool showReassignModal = false;
    private string noteErrorMessage;
    private string newTaskTitle;
    private string newTaskDescription;
    private Guid newTaskAssignedToEmployeeId = Guid.Empty;
    private Guid newTaskStatusId = Guid.Empty;
    private Guid newTaskTypeId = Guid.Empty;
    private DateTime newTaskDeadline = DateTime.Now;

    private string remindTitle;
    private string remindMessage;

    protected override async Task OnInitializedAsync()
    {
        tasks = await TaskService.GetTasksAsync(UserGlobal.User.Id) ?? new List<GetTaskViewModel>();
        taskStatuses = await TaskService.GetTaskStatusAsync() ?? new List<GetTaskStatus>();
        employees = await EmployeeService.GetEmployeesAsync() ?? new List<GetEmployeeViewModel>();
        taskTypes = await TaskService.GetTaskTypesAsync() ?? new List<GetTaskType>();

        if (taskTypes != null && taskTypes.Any())
        {
            newTaskTypeId = taskTypes.Last().Id; // Set the last TaskType as the default value
        }
    }

    private void ShowAddTaskModal()
    {
        JSRuntime.InvokeVoidAsync("openModal", "addTaskModal");
        showAddTaskModal = true;
    }

    private async void OnTaskSelected(GetTaskViewModel task)
    {
        selectedTask = task;
        comments = await TaskService.GetTaskNotesAsync(task.Id.ToString()); // Fetch comments for selected task
        StateHasChanged();
    }

    private async Task OnTaskStatusChanged(ChangeEventArgs e)
    {
        Guid newStatusId = Guid.Parse(e.Value.ToString());

        if (selectedTask != null && newStatusId != selectedTask.StatusId)
        {
            // Check if the status change is allowed
            if (IsStatusChangeAllowed(newStatusId))
            {
                if (newStatusId == Guid.Parse("71B3DEAF-4C39-4F49-BF57-43F2E9CE6CBA")) // Re-Scheduled
                {
                    showRescheduleModal = true;
                    JSRuntime.InvokeVoidAsync("openModal", "rescheduleModal");
                }
                else if (newStatusId == Guid.Parse("A5F6C587-BF08-4C4A-8AB2-548065DB9C71")) // Replace with actual GUID for Re-Assigned
                {
                    showReassignModal = true;
                    JSRuntime.InvokeVoidAsync("openModal", "reassignModal");
                }
                else
                {
                    isLoading = true;
                    StateHasChanged();

                    selectedTask.StatusId = newStatusId;
                    var updateTaskModel = new UpdateTaskViewModel
                        {
                            Id = selectedTask.Id,
                            StatusId = newStatusId,
                            AssignedToEmployeeId = selectedTask.AssignedToEmployeeId,
                            Title = selectedTask.Title,
                            Description = selectedTask.Description,
                            DeadlineDate = selectedTask.DeadlineDate,
                            CreatedDate = selectedTask.CreatedDate
                        };

                    await TaskService.UpdateTaskAsync(updateTaskModel);

                    isLoading = false;
                    Snackbar.Add("Task status updated successfully!", Severity.Success);
                    StateHasChanged();
                }
            }
            else
            {
                Snackbar.Add("You are not authorized to change the status to this value.", Severity.Warning);
            }
        }
    }

    private async Task RescheduleTask()
    {
        if (newTaskDeadline != default(DateTime))
        {
            isLoading = true;
            StateHasChanged();

            selectedTask.StatusId = Guid.Parse("71B3DEAF-4C39-4F49-BF57-43F2E9CE6CBA"); // Re-Scheduled
            selectedTask.DeadlineDate = newTaskDeadline;
            var updateTaskModel = new UpdateTaskViewModel
                {
                    Id = selectedTask.Id,
                    StatusId = selectedTask.StatusId,
                    AssignedToEmployeeId = selectedTask.AssignedToEmployeeId,
                    Title = selectedTask.Title,
                    Description = selectedTask.Description,
                    DeadlineDate = selectedTask.DeadlineDate,
                    CreatedDate = selectedTask.CreatedDate
                };

            await TaskService.UpdateTaskAsync(updateTaskModel);
            tasks = await TaskService.GetTasksAsync(UserGlobal.User.Id);

            isLoading = false;
            Snackbar.Add("Task rescheduled successfully!", Severity.Success);
            CloseRescheduleModal();
            StateHasChanged();
        }
    }

    private void CloseRescheduleModal()
    {
        showRescheduleModal = false;
        JSRuntime.InvokeVoidAsync("closeModal", "rescheduleModal");
    }

    private async Task ReassignTask()
    {
        if (newTaskAssignedToEmployeeId != Guid.Empty)
        {
            isLoading = true;
            StateHasChanged();

            selectedTask.StatusId = Guid.Parse("A5F6C587-BF08-4C4A-8AB2-548065DB9C71"); // Re-Assigned
            selectedTask.AssignedToEmployeeId = newTaskAssignedToEmployeeId;
            var updateTaskModel = new UpdateTaskViewModel
                {
                    Id = selectedTask.Id,
                    StatusId = selectedTask.StatusId,
                    AssignedToEmployeeId = selectedTask.AssignedToEmployeeId,
                    Title = selectedTask.Title,
                    Description = selectedTask.Description,
                    DeadlineDate = selectedTask.DeadlineDate,
                    CreatedDate = selectedTask.CreatedDate
                };

            await TaskService.UpdateTaskAsync(updateTaskModel);
            tasks = await TaskService.GetTasksAsync(UserGlobal.User.Id);

            isLoading = false;
            Snackbar.Add("Task reassigned successfully!", Severity.Success);
            CloseReassignModal();
            StateHasChanged();
        }
    }

    private void CloseReassignModal()
    {
        showReassignModal = false;
        JSRuntime.InvokeVoidAsync("closeModal", "reassignModal");
    }

    private async Task UpdateTask(UpdateTaskViewModel updateTaskModel)
    {
        await TaskService.UpdateTaskAsync(updateTaskModel);

        selectedTask.StatusId = updateTaskModel.StatusId;
    }

    private async Task OpenFileDialog()
    {
        await JSRuntime.InvokeVoidAsync("openFileDialog");
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        selectedFileName = file.Name;
        fileContentType = file.ContentType;

        using (var stream = file.OpenReadStream())
        using (var memoryStream = new MemoryStream())
        {
            await stream.CopyToAsync(memoryStream);
            fileBytes = memoryStream.ToArray();
        }

        StateHasChanged();
    }

    private void RemoveFile()
    {
        selectedFileName = null;
        fileBytes = null;
        StateHasChanged();
    }

    private async Task SendNote()
    {
        if (string.IsNullOrWhiteSpace(noteText))
        {
            noteErrorMessage = "Note cannot be empty.";
            StateHasChanged();
            return;
        }

        var model = new PostTaskNoteViewModel
            {
                Note = noteText,
                FileBase64 = fileBytes != null ? Convert.ToBase64String(fileBytes) : null,
                FileName = selectedFileName,
                ContentType = fileContentType,
                EmployeeId = UserGlobal.User.Id,
                TaskId = selectedTask.Id
            };

        await TaskService.PostTaskNoteAsync(model, selectedTask.Title);
        noteText = string.Empty;
        noteErrorMessage = null; // Clear the error message
        selectedFileName = null;
        fileBytes = null;
        comments = await TaskService.GetTaskNotesAsync(selectedTask.Id.ToString()); // Refresh comments
        StateHasChanged();
    }

    private void ShowFullDescription()
    {
        showModal = true;
        JSRuntime.InvokeVoidAsync("openModal", "descriptionModal");
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private void ShowRemindModal()
    {
        if (selectedTask != null)
        {
            showRemindModal = true;
            JSRuntime.InvokeVoidAsync("openModal", "remindModal");
        }
        else
        {
            Snackbar.Add("Please select a task first.", Severity.Warning);
        }
    }

    private void CloseRemindModal()
    {
        showRemindModal = false;
        JSRuntime.InvokeVoidAsync("closeModal", "remindModal");
    }

    private async Task SendRemind(string employeeFirebaseToken)
    {
        if (!string.IsNullOrWhiteSpace(remindMessage))
        {
            isLoading = true;
            StateHasChanged();

            var notificationRequestViewModel = new NotificationRequestViewModel
                {
                    Title = "Reminder",
                    Body = remindMessage,
                    employeeNotification = true,
                    ImageBase64 = null,
                    FirebaseTokens = new List<string> { employeeFirebaseToken },
                };

            await NotificationClientService.SendNotificationAsync(notificationRequestViewModel);

            isLoading = false;
            Snackbar.Add("Reminder sent successfully!", Severity.Success);
            CloseRemindModal();
            StateHasChanged();
        }
    }

    private bool IsStatusChangeAllowed(Guid newStatusId)
    {
        var restrictedStatuses = new List<Guid>
        {
            Guid.Parse("71B3DEAF-4C39-4F49-BF57-43F2E9CE6CBA"), // Re-Scheduled
            Guid.Parse("A5F6C587-BF08-4C4A-8AB2-548065DB9C71"), // Replace with actual GUID for Re-Assigned
            Guid.Parse("B582E253-5B36-4AF5-A758-9004CA5E54E0") // Replace with actual GUID for Closed
        };

        return selectedTask.CreatedBy == UserGlobal.User.Id || !restrictedStatuses.Contains(newStatusId);
    }
}
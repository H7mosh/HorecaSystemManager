@page "/Tasks"
@using Blazored.LocalStorage
@using Microsoft.Extensions.Localization
@using System.Globalization
@using MudBlazor
@using sacmy.Client.Components.DialogHeader
@using sacmy.Client.Services
@using sacmy.Shared.Core
@using sacmy.Shared.ViewModels.EmployeeViewModel
@using sacmy.Shared.ViewModels.Notification
@using sacmy.Shared.ViewModels.TasksViewModel
@using Microsoft.AspNetCore.Components.Forms
@inject TaskService TaskService
@inject EmployeeService EmployeeService
@inject NotificationClientService NotificationClientService
@inject IJSRuntime JSRuntime
@inject UserGlobalClass UserGlobal
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage
@inject IStringLocalizer<SharedResource> Localizer

<script>
    window.openFileDialog = function () {
        document.getElementById('fileInput').click();
    };

    // Update your JavaScript modal functions
    window.openModal = function (modalId) {
        console.log("Opening modal with ID:", modalId);
        // Try both Bootstrap 4 and 5 syntax
        try {
            $('#' + modalId).modal('show');
        } catch (e) {
            var myModal = new bootstrap.Modal(document.getElementById(modalId));
            myModal.show();
        }
    };

    window.closeModal = function (modalId) {
        console.log("Closing modal with ID:", modalId);
        // Try both Bootstrap 4 and 5 syntax
        try {
            $('#' + modalId).modal('hide');
        } catch (e) {
            var myModal = bootstrap.Modal.getInstance(document.getElementById(modalId));
            if (myModal) myModal.hide();
        }
    };
</script>

<style>
    /* Base Layout & Grid Styles */
    .custom-data-grid {
        height: auto;
        background: #FFFFFF;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.06);
    }

    .custom-data-grid .mud-table-container {
        border-radius: 12px;
        overflow: hidden;
        box-shadow: none;
        margin-bottom: 0;
    }

    .custom-data-grid table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
    }

    .custom-data-grid tr {
        height: 64px;
        transition: background-color 0.2s ease;
    }

    .custom-data-grid tr:hover {
        background-color: #F8FAFC;
    }

    .custom-data-grid th {
        background-color: #F8FAFC;
        color: #1A2B3C;
        font-weight: 600;
        text-align: left;
        padding: 16px;
        border-bottom: 1px solid #E5E7EB;
    }

    .custom-data-grid td {
        padding: 16px;
        vertical-align: middle;
        border-bottom: 1px solid #E5E7EB;
        color: #4B5563;
    }

    /* Search Field */
    .search-field {
        max-width: 300px;
        position: relative;
    }

    .search-field input {
        width: 100%;
        padding: 10px 16px 10px 40px;
        border: 1px solid #E5E7EB;
        border-radius: 8px;
        font-size: 0.95rem;
        transition: all 0.2s ease;
    }

    .search-field input:focus {
        border-color: #3B82F6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        outline: none;
    }

        .task-title {
        font-size: 20px;
        font-weight: 600;
        color: #111827;
        margin-bottom: 16px;
    }

    /* Description Section */
    .task-description-container {
        margin-bottom: 12px;
        background: #F9FAFB;
        border-radius: 8px;
        padding: 8px;
    }

    .description-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .description-label {
        font-size: 14px;
        color: #374151;
        font-weight: 500;
    }

    .view-more-link {
        color: #2563EB;
        font-size: 14px;
        text-decoration: none;
        cursor: pointer;
        background: none;
        border: none;
        padding: 0;
    }

    .view-more-link:hover {
        text-decoration: underline;
    }

    .description-text {
        font-size: 14px;
        color: #4B5563;
        line-height: 1.5;
    }

    /* Created By Section */
    .created-by-section {
        margin-bottom: 12px;
    }

    .created-by-label {
        font-size: 14px;
        color: #374151;
        margin-bottom: 8px;
    }

    .created-by-info {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 8px;
        background: #F9FAFB;
        border-radius: 8px;
    }

    .created-by-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
    }

    .created-by-name {
        font-size: 14px;
        font-weight: 500;
        color: #111827;
    }

    /* Status Section */
    .status-section {
        margin-bottom: 4px;
    }

    .status-label {
        font-size: 14px;
        color: #374151;
        margin-bottom: 8px;
    }

    .status-select {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #E5E7EB;
        border-radius: 6px;
        font-size: 14px;
        color: #111827;
        background-color: #FFFFFF;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .status-select:focus {
        outline: none;
        border-color: #2563EB;
        box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);
    }

    .status-select option {
        padding: 8px;
    }

    /* Comments Header */
    .comments-title {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 16px;
        font-weight: 500;
        color: #111827;
        margin-bottom: 16px;
    }

    .comments-title i {
        font-size: 20px;
        color: #6B7280;
    }

    /* Status colors for select options */
    .status-option-closed {
        color: #059669;
    }

    .status-option-in-progress {
        color: #D97706;
    }

    .status-option-pending {
        color: #DC2626;
    }

    .status-option-re-assigned {
        color: #2563EB;
    }

    .status-option-re-scheduled {
        color: #7C3AED;
    }

    /* Add any missing responsive styles */
    @@media (max-width: 768px) {
        .created-by-info {
            flex-direction: column;
            align-items: flex-start;
            padding: 12px;
        }
    }


    /* Task Status Cards */
    .task-status-card {
        background-color: #FFFFFF;
        border-radius: 12px;
        text-align: center;
        padding: 16px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
        margin: 8px;
        width: 200px;
        transition: all 0.2s ease;
        border: 1px solid #E5E7EB;
        cursor: pointer;
    }

    .task-status-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .selected-status-card {
        border: 2px solid #3B82F6;
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15);
    }

    .task-status-icon {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 48px;
        height: 48px;
        border-radius: 12px;
        margin: 0 auto 12px;
        transition: all 0.2s ease;
    }

    .task-status-icon.all {
        background-color: rgba(30, 41, 59, 0.08);
    }

    .task-status-icon.closed {
        background-color: rgba(34, 197, 94, 0.08);
    }

    .task-status-icon.in-progress {
        background-color: rgba(249, 115, 22, 0.08);
    }

    .task-status-icon.pending {
        background-color: rgba(71, 85, 105, 0.08);
    }

    .task-status-icon.re-assigned {
        background-color: rgba(59, 130, 246, 0.08);
    }

    .task-status-icon.re-scheduled {
        background-color: rgba(147, 51, 234, 0.08);
    }

    .task-status-text {
        font-weight: 600;
        font-size: 0.875rem;
        color: #1A2B3C;
        margin-bottom: 4px;
    }

    .task-status-count {
        font-weight: 700;
        font-size: 1.25rem;
        color: #1A2B3C;
    }

    /* Main Container Layout */
    .tasks-container {
        display: flex;
        height: calc(100vh - 80px);
        gap: 24px;
        padding: 5px 5px;
        background-color: #F8FAFC;
    }

    .tasks-list-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        max-width: 65%;
        background: #FFFFFF;
        border-radius: 12px;
        padding: 20px;
    }

    .tasks-list-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding: 0 16px;
    }

    .scroll-container {
        flex: 1;
        overflow-y: auto;
        border-radius: 8px;
        padding: 0 16px;
    }

    /* Task Detail & Comments Styles */
    .task-detail {
        flex: 1;
        display: flex;
        flex-direction: column;
        max-width: 35%;
        background: #FFFFFF;
        border-radius: 12px;
        padding: 10px 10px;
        height: calc(100vh - 128px); /* Account for container padding */
    }

    /* Comments Section */
    .comments-section {
        display: flex;
        flex-direction: column;
        height: 600px; /* Fixed height for comments section */
        margin-top: 16px;
    }

    .comments-header {
        flex-shrink: 0;
        padding: 4px 4px 4px 4px;
        background: #FFFFFF;
        border-bottom: 1px solid #E5E7EB;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .comments-list {
        flex: 1;
        overflow-y: auto;
        padding: 16px;
        min-height: 200px;
        max-height: calc(100% - 150px);
        background: #FFFFFF;
    }

    .comment-item {
        padding: 16px;
        border-radius: 8px;
        margin-bottom: 12px;
    }

    .comment-item:last-child {
        margin-bottom: 0;
    }

    .comment-item-current-user {
        background-color: rgba(56, 122, 223, 0.2);
    }

    .comment-item-other-user {
        background-color: #F3F4F6;
    }

    .comment-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .comment-author-info {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .comment-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
    }

    .comment-author {
        color: #111827;
        font-size: 14px;
        font-weight: 500;
    }

    .comment-time {
        color: #6B7280;
        font-size: 12px;
    }

    .comment-text {
        color: #374151;
        font-size: 14px;
        line-height: 1.5;
        margin: 0;
    }

    .message-input-container {
        flex-shrink: 0;
        background: #FFFFFF;
        padding: 16px;
        border-top: 1px solid #E5E7EB;
        margin-top: auto;
    }

    .message-input {
        width: 100%;
        height: 80px;
        padding: 12px;
        border: 1px solid #E5E7EB;
        border-radius: 6px;
        margin-bottom: 12px;
        font-size: 14px;
        resize: none;
    }

    .message-input:focus {
        outline: none;
        border-color: #2563EB;
        box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);
    }

    .message-actions {
        display: flex;
        justify-content: flex-end;
        gap: 8px;
    }

    .btn-attach {
        padding: 8px 16px;
        background-color: #FFFFFF;
        border: 1px solid #2563EB;
        color: #2563EB;
        border-radius: 6px;
        font-size: 14px;
        cursor: pointer;
    }

    .btn-send {
        padding: 8px 16px;
        background-color: #2563EB;
        border: none;
        color: #FFFFFF;
        border-radius: 6px;
        font-size: 14px;
        cursor: pointer;
    }

    .btn-send:disabled {
        background-color: #93C5FD;
        cursor: not-allowed;
    }

    /* Custom Scrollbar */
    .comments-list::-webkit-scrollbar {
        width: 4px;
    }

    .comments-list::-webkit-scrollbar-track {
        background: #F1F5F9;
    }

    .comments-list::-webkit-scrollbar-thumb {
        background: #CBD5E1;
        border-radius: 2px;
    }

    /* Status Colors */
    .status-closed {
        color: #059669;
    }

    .status-in-progress {
        color: #D97706;
    }

    .status-pending {
        color: #DC2626;
    }

    .status-re-assigned {
        color: #2563EB;
    }

    .status-re-scheduled {
        color: #7C3AED;
    }

    /* Responsive Styles */
    @@media (max-width: 1200px) {
        .task-status-card {
            width: calc(33.33% - 16px);
        }
    }

    @@media (max-width: 768px) {
        .task-status-card {
            width: calc(50% - 16px);
        }
    }

    @@media (max-width: 480px) {
        .task-status-card {
            width: 100%;
            margin: 8px 0;
        }

        .message-actions {
            flex-direction: column;
        }

        .btn-attach, .btn-send {
            width: 100%;
        }
    }
</style>

<div class="tasks-container">
    <div class="tasks-list-container">
        <div class="tasks-list-header">
            <span>@Localizer["Tasks"] (@tasks?.Count)</span>
            <div>
                <button class="add-task-button" @onclick="ShowAddTaskModal">@Localizer["AddTask"]</button>
                <button class="reminder-button" @onclick="ShowRemindModal">@Localizer["Remind"]</button>
            </div>
        </div>

        <div class="d-flex justify-content-between">
            <div class="task-status-card @(selectedStatus == "" ? "selected-status-card" : "")" @onclick="@(() => FilterTasksByStatus(""))">
                <div class="task-status-icon all">
                    <i class="bi bi-list-task text-light"></i>
                </div>
                <div class="task-status-text">@Localizer["All"]</div>
                <div class="task-status-count">@GetTaskCountByStatus("")</div>
            </div>

            <div class="task-status-card @(selectedStatus == "Closed" ? "selected-status-card" : "")" @onclick="@(() => FilterTasksByStatus("Closed"))">
                <div class="task-status-icon closed">
                    <i class="bi bi-check-circle-fill text-success"></i>
                </div>
                <div class="task-status-text">@Localizer["Closed"]</div>
                <div class="task-status-count">@GetTaskCountByStatus("Closed")</div>
            </div>

            <div class="task-status-card @(selectedStatus == "In Progress" ? "selected-status-card" : "")" @onclick="@(() => FilterTasksByStatus("In Progress"))">
                <div class="task-status-icon in-progress">
                    <i class="bi bi-hourglass-split text-warning"></i>
                </div>
                <div class="task-status-text">@Localizer["InProgress"]</div>
                <div class="task-status-count">@GetTaskCountByStatus("In Progress")</div>
            </div>

            <div class="task-status-card @(selectedStatus == "Pending" ? "selected-status-card" : "")" @onclick="@(() => FilterTasksByStatus("Pending"))">
                <div class="task-status-icon pending">
                    <i class="bi bi-three-dots text-secondary"></i>
                </div>
                <div class="task-status-text">@Localizer["Pending"]</div>
                <div class="task-status-count">@GetTaskCountByStatus("Pending")</div>
            </div>

            <div class="task-status-card @(selectedStatus == "Re-Assigned" ? "selected-status-card" : "")" @onclick="@(() => FilterTasksByStatus("Re-Assigned"))">
                <div class="task-status-icon re-assigned">
                    <i class="bi bi-people-fill text-primary"></i>
                </div>
                <div class="task-status-text">@Localizer["ReAssigned"]</div>
                <div class="task-status-count">@GetTaskCountByStatus("Re-Assigned")</div>
            </div>

            <div class="task-status-card @(selectedStatus == "Re-Scheduled" ? "selected-status-card" : "")" @onclick="@(() => FilterTasksByStatus("Re-Scheduled"))">
                <div class="task-status-icon re-scheduled">
                    <i class="bi bi-calendar-event-fill text-purple"></i>
                </div>
                <div class="task-status-text">@Localizer["ReScheduled"]</div>
                <div class="task-status-count">@GetTaskCountByStatus("Re-Scheduled")</div>
            </div>
        </div>

        @if (tasks != null && tasks.Any())

        {
            <div class="scroll-container">
                <div class="table-responsive">
                    <div class="d-flex justify-content-end mb-3">
                        <div class="input-group" style="max-width: 250px;">
                            <span class="input-group-text">
                                <i class="bi bi-search"></i>
                            </span>
                            <input type="text" class="form-control" @bind="_searchString" @oninput="OnSearch"
                                   placeholder="@Localizer["Search"]" />
                        </div>
                    </div>
                    <table class="table table-hover custom-data-grid">
                        <thead>
                            <tr>
                                <th>@Localizer["Employee"]</th>
                                <th>@Localizer["Type"]</th>
                                <th>@Localizer["Title"]</th>
                                <th>@Localizer["Status"]</th>
                                <th>@Localizer["CreatedDate"]</th>
                                <th>@Localizer["Deadline"]</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var task in filteredTasks)

                            {
                                <tr @onclick="() => OnTaskRowClick(task)" style="cursor: pointer;">
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <img src="@task.EmployeeImage" class="rounded-circle me-2" alt="@Localizer["EmployeeAvatar"]"
                                                 style="width: 32px; height: 32px;" />
                                            <span>@task.AssignedToEmployee</span>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="d-flex flex-column align-items-center">
                                            <span>@task.TypeEn</span>
                                            <hr class="w-100 my-1" />
                                            @if (!string.IsNullOrEmpty(task.CutsomerName))

                                            {
                                                <small class="text-muted">@task.CutsomerName</small>
                                            }

                                            else if (task.InvoiceId.HasValue)

                                            {
                                                <small class="text-muted">@task.InvoiceId.ToString()</small>
                                            }
                                        </div>
                                    </td>
                                    <td>@task.Title</td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="status-dot" style="background: @GetStatusGradient(task.StatusEn);"></div>
                                            <span>@task.StatusEn</span>
                                        </div>
                                    </td>
                                    <td>@task.CreatedDate.ToString("g")</td>
                                    <td>@task.DeadlineDate?.ToString("g")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }

        else

        {
            <p>@Localizer["NoTasksAvailable"]</p>
        }
    </div>

    @if (selectedTask != null)
    {
        <div class="task-detail">
            <h2 class="task-title">@selectedTask.Title</h2>
            <div class="task-description-container">
                <div class="description-header">
                    <p class="description-label">@Localizer["Description"]:</p>
                    <button class="view-more-link" @onclick="ShowFullDescription">@Localizer["ViewMore"]</button>
                </div>
                <p class="description-text">@selectedTask.Description</p>
            </div>

            <div class="created-by-section">
                <p class="created-by-label">@Localizer["CreatedBy"]</p>
                <div class="created-by-info">
                    <img src="@selectedTask.CreatedbyImage" alt="CreatorAvatar" class="created-by-avatar" />
                    <span class="created-by-name">@selectedTask.CreatedbyName</span>
                </div>
            </div>

            <div class="status-section">
                <p class="status-label">@Localizer["Status"]:</p>
                <select class="status-select" @onchange="async (e) => await OnTaskStatusChanged(e)">
                    @foreach (var status in taskStatuses)
                    {
                        <option value="@status.Id" selected="@(status.Id == selectedTask.StatusId ? "selected" : null)">
                            @status.StatusEn
                        </option>
                    }
                </select>
            </div>

            <div class="comments-section">
                <div class="comments-header">
                    <i class="bi bi-chat-left-text"></i>
                    <span>@Localizer["Comments"]</span>
                </div>

                <div class="comments-list">
                    @if (comments.Count == 0)
                    {
                        <div class="no-comments">@Localizer["ThereAreNoMessagesYet"]</div>
                    }
                    else
                    {
                        @foreach (var comment in comments)

                        {
                            <div class="comment-item @(comment.CreatedBy == UserGlobal.User.Id ? "comment-item-current-user" : "comment-item-other-user")"
                                 @onclick="() => OpenScheduledNotificationModal(comment)">
                                <div class="comment-header">
                                    <div class="comment-author-info">
                                        <img class="comment-avatar" src="@comment.EmployeeImage" alt="CommenterAvatar" />
                                        <span class="comment-author">@comment.EmployeeName</span>
                                    </div>
                                    <span class="comment-time">@Helper.GetRelativeTime(comment.CreatedDate)</span>
                                </div>
                                <p class="comment-text">@comment.Note</p>
                            </div>
                        }
                    }
                </div>

                @if (CanAddComments())

                {
                    <div class="message-input-container">
                        @if (!string.IsNullOrEmpty(selectedFileName))

                        {
                            <div class="file-display">
                                <span class="file-name">@Localizer["SelectedFile"] @selectedFileName</span>
                                <button type="button" class="btn btn-secondary" @onclick="RemoveFile">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        }
                        <textarea @bind="noteText"
                                  placeholder="WriteYourMessageHere"
                                  class="message-input">
                                </textarea>
                        <div class="message-actions">
                            <button type="button" class="btn-attach" @onclick="OpenFileDialog">
                                <i class="fas fa-paperclip"></i>
                                @Localizer["Attach"]
                            </button>
                            <button type="button"
                                    class="btn-send"
                                    @onclick="AddComment"
                                    disabled="@string.IsNullOrWhiteSpace(noteText)">
                                @Localizer["Send"]
                            </button>
                        </div>
                        <InputFile id="fileInput" OnChange="OnFileSelected" class="d-none" />
                    </div>
                }
            </div>
        </div>

        <div class="modal fade @(showModal ? "show d-block" : "")" id="descriptionModal" tabindex="-1" role="dialog" aria-labelledby="descriptionModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="descriptionModalLabel">@Localizer["TaskDescription"]</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModal">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @selectedTask.Description
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseModal">@Localizer["Close"]</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Modals -->
<AddTaskModal IsVisible="@showAddTaskModal"
              IsVisibleChanged="@(EventCallback.Factory.Create<bool>(this, value => showAddTaskModal = value))"
              CustomerId=null
              InvoiceId=null />


@* 

<div class="modal fade @(showRemindModal ? "show d-block" : "")" id="remindModal" tabindex="-1" role="dialog" aria-labelledby="remindModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <DialogHeader 
                Title="@Localizer["RemindTask"]"
                Icon="bi bi-list-check" 
                OnClose="@(CloseRemindModal)"/>

            <div class="modal-body">
                <div class="form-group">
                    <label for="remindMessage">@Localizer["RemindMessage"]</label>
                    <textarea class="form-control" id="remindMessage"
                              @bind="remindMessage"
                              @bind:event="oninput"
                              placeholder="@Localizer["EnterRemindMessage"]">
                    </textarea>
                    @if (string.IsNullOrWhiteSpace(remindMessage))

                    {
                        <div class="text-danger">@Localizer["MessageIsRequired"]</div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseRemindModal">@Localizer["Close"]</button>
                <button type="button" class="btn btn-primary" @onclick="() => SendRemind(selectedTask.EmployeeFirebaseToken , selectedTask.EmployeeId)" disabled="@isLoading">
                    @if (isLoading)

                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }

                    else

                    {
                        <span>@Localizer["SendRemind"]</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @(showRescheduleModal ? "show d-block" : "")" id="rescheduleModal" tabindex="-1" role="dialog" aria-labelledby="rescheduleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <DialogHeader Title="@Localizer["ReScheduleTask"]"
                          Icon="bi bi-list-check"
                          OnClose="@(CloseRescheduleModal)" />
            <div class="modal-body">
                <div class="form-group">
                    <label for="newDeadline">@Localizer["NewDeadline"]</label>
                    <input type="datetime-local" class="form-control" id="newDeadline" @bind="newTaskDeadline">
                    @if (newTaskDeadline == default(DateTime))

                    {
                        <div class="text-danger">@Localizer["NewDeadlineIsRequired"]</div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseRescheduleModal">@Localizer["Close"]</button>
                <button type="button" class="btn btn-primary" @onclick="RescheduleTask" disabled="@isLoading">
                    @if (isLoading)



                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }



                    else



                    {
                        <span>@Localizer["Save"]</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @(showReassignModal ? "show d-block" : "")" id="reassignModal" tabindex="-1" role="dialog" aria-labelledby="reassignModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <DialogHeader Title="@Localizer["ReAssignTask"]"
                           Icon="bi bi-list-check"
                           OnClose="@(CloseReassignModal)" />
            <div class="modal-body">
                <div class="form-group">
                    <label for="reassignEmployee">@Localizer["NewEmployee"]</label>
                    <select class="form-control" id="reassignEmployee" @onchange="(e) => newTaskAssignedToEmployeeId = Guid.Parse(e.Value.ToString())">
                        <option value="">@Localizer["SelectEmployee"]</option>
                        @if (employees != null)



                        {
                            @foreach (var employee in employees)



                            {
                                <option value="@employee.Id">@employee.FirstName @employee.LastName</option>
                            }
                        }



                        else



                        {
                            <option value="">@Localizer["ThereIsNoEmployeeYet"]</option>
                        }
                    </select>
                    @if (newTaskAssignedToEmployeeId == Guid.Empty)



                    {
                        <div class="text-danger">@Localizer["NewEmployeeIsRequired"]</div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseReassignModal">@Localizer["Close"]</button>
                <button type="button" class="btn btn-primary" @onclick="ReassignTask" disabled="@isLoading">
                    @if (isLoading)



                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }



                    else



                    {
                        <span>@Localizer["Save"]</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @(showScheduledNotificationModal ? "show d-block" : "")" id="scheduledNotificationModal" tabindex="-1" role="dialog" aria-labelledby="scheduledNotificationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <DialogHeader Title="@Localizer["ScheduledNotification"]"
                          Icon="bi bi-list-check"
                          OnClose="@(CloseScheduledNotificationModal)" />
            <div class="modal-body">
                <div class="form-group">
                    <label for="notificationTitle">@Localizer["Title"]</label>
                    <input type="text" class="form-control" id="notificationTitle" @bind="notificationTitle" />
                </div>
                <div class="form-group">
                    <label for="notificationBody">@Localizer["Body"]</label>
                    <textarea class="form-control" id="notificationBody" @bind="notificationBody"></textarea>
                </div>
                <div class="form-group">
                    <label for="scheduleTime">@Localizer["ScheduleTime"]</label>
                    <input type="datetime-local" class="form-control" id="scheduleTime" @bind="scheduleTime" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseScheduledNotificationModal">@Localizer["Close"]</button>
                <button type="button" class="btn btn-primary" @onclick="() => SendScheduledNotification()">
                    @if (isSendingNotification)



                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }



                    else



                    {
                        <span>@Localizer["Send"]</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

 *@

<!-- Modals -->
<AddTaskModal IsVisible="@showAddTaskModal"
              IsVisibleChanged="@(EventCallback.Factory.Create<bool>(this, value => showAddTaskModal = value))"
              CustomerId=null
              InvoiceId=null />

<div class="modal fade @(showRemindModal ? "show d-block" : "")" id="remindModal" tabindex="-1" role="dialog" aria-labelledby="remindModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <DialogHeader Title="@Localizer["RemindTask"]"
                          Icon="bi bi-list-check"
                          OnClose="@(CloseRemindModal)" />
            <div class="modal-body">
                <textarea class="form-control" id="remindMessage"
          value="@remindMessage"
          @oninput="(e) => remindMessage = e.Value?.ToString()"
          placeholder="@Localizer["EnterRemindMessage"]"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseRemindModal">@Localizer["Close"]</button>
                <button type="button" class="btn btn-primary" @onclick="() => SendRemind(selectedTask.EmployeeFirebaseToken , selectedTask.EmployeeId)" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }
                    else
                    {
                        <span>@Localizer["SendRemind"]</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @(showRescheduleModal ? "show d-block" : "")" id="rescheduleModal" tabindex="-1" role="dialog" aria-labelledby="rescheduleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <DialogHeader Title="@Localizer["ReScheduleTask"]"
                          Icon="bi bi-list-check"
                          OnClose="@(CloseRescheduleModal)" />
            <div class="modal-body">
                <div class="form-group">
                    <label for="newDeadline">@Localizer["NewDeadline"]</label>
                    <input type="datetime-local" class="form-control" id="newDeadline" @bind="newTaskDeadline">
                    @if (newTaskDeadline == default(DateTime))
                    {
                        <div class="text-danger">@Localizer["NewDeadlineIsRequired"]</div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseRescheduleModal">@Localizer["Close"]</button>
                <button type="button" class="btn btn-primary" @onclick="RescheduleTask" disabled="@isLoading">
                    @if (isLoading)

                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }

                    else

                    {
                        <span>@Localizer["Save"]</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @(showReassignModal ? "show d-block" : "")" id="reassignModal" tabindex="-1" role="dialog" aria-labelledby="reassignModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <DialogHeader Title="@Localizer["ReAssignTask"]"
                          Icon="bi bi-list-check"
                          OnClose="@(CloseReassignModal)" />
            <div class="modal-body">
                <div class="form-group">
                    <label for="reassignEmployee">@Localizer["NewEmployee"]</label>
                    <select class="form-control" id="reassignEmployee" @onchange="(e) => newTaskAssignedToEmployeeId = Guid.Parse(e.Value.ToString())">
                        <option value="">@Localizer["SelectEmployee"]</option>
                        @if (employees != null)

                        {
                            @foreach (var employee in employees)

                            {
                                <option value="@employee.Id">@employee.FirstName @employee.LastName</option>
                            }
                        }

                        else

                        {
                            <option value="">@Localizer["ThereIsNoEmployeeYet"]</option>
                        }
                    </select>
                    @if (newTaskAssignedToEmployeeId == Guid.Empty)

                    {
                        <div class="text-danger">@Localizer["NewEmployeeIsRequired"]</div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseReassignModal">@Localizer["Close"]</button>
                <button type="button" class="btn btn-primary" @onclick="ReassignTask" disabled="@isLoading">
                    @if (isLoading)

                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }

                    else

                    {
                        <span>@Localizer["Save"]</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @(showScheduledNotificationModal ? "show d-block" : "")" id="scheduledNotificationModal" tabindex="-1" role="dialog" aria-labelledby="scheduledNotificationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <DialogHeader Title="@Localizer["ScheduledNotification"]"
                          Icon="bi bi-list-check"
                          OnClose="@(CloseScheduledNotificationModal)" />
            <div class="modal-body">
                <div class="form-group">
                    <label for="notificationTitle">@Localizer["Title"]</label>
                    <input type="text" class="form-control" id="notificationTitle" @bind="notificationTitle" />
                </div>
                <div class="form-group">
                    <label for="notificationBody">@Localizer["Body"]</label>
                    <textarea class="form-control" id="notificationBody" @bind="notificationBody"></textarea>
                </div>
                <div class="form-group">
                    <label for="scheduleTime">@Localizer["ScheduleTime"]</label>
                    <input type="datetime-local" class="form-control" id="scheduleTime" @bind="scheduleTime" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseScheduledNotificationModal">@Localizer["Close"]</button>
                <button type="button" class="btn btn-primary" @onclick="() => SendScheduledNotification()">
                    @if (isSendingNotification)

                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }

                    else

                    {
                        <span>@Localizer["Send"]</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<MudSnackbarProvider />

@code {
    private List<GetTaskViewModel> tasks = new List<GetTaskViewModel>();
    private List<GetTaskViewModel> filteredTasks = new List<GetTaskViewModel>(); // List to hold filtered tasks
    private List<GetTaskNotes> comments = new List<GetTaskNotes>();
    private List<GetTaskStatus> taskStatuses;
    private List<GetTaskType> taskTypes;
    private List<GetEmployeeViewModel> employees;
    private GetTaskViewModel selectedTask;
    private string selectedStatus = null; // Hold the currently selected status
    private string selectedFileName;
    private string noteText;
    private byte[] fileBytes;
    private string fileContentType;
    private bool showModal = false;
    private bool isLoading = false;
    private bool showSuccessMessage = false;
    private bool showAddTaskModal = false;
    private bool showRemindModal = false;
    private bool showRescheduleModal = false;
    private bool showReassignModal = false;
    private string noteErrorMessage;
    private string newTaskTitle;
    private string newTaskDescription;
    private Guid newTaskAssignedToEmployeeId = Guid.Empty;
    private Guid newTaskStatusId = Guid.Empty;
    private Guid newTaskTypeId = Guid.Empty;
    private DateTime newTaskDeadline = DateTime.Now;

    private string remindTitle;
    private string remindMessage;
    private string _searchString;
    
    private bool showScheduledNotificationModal = false;
    private string notificationTitle = "Reminder"; 
    private string notificationBody;
    private DateTime scheduleTime = DateTime.Now.AddHours(1); 
    private string firebaseToken;
    private bool isSendingNotification = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            tasks = await TaskService.GetTasksAsync(UserGlobal.User.Id) ?? new List<GetTaskViewModel>();
            filteredTasks = tasks; // Initially show all tasks
            taskStatuses = await TaskService.GetTaskStatusAsync() ?? new List<GetTaskStatus>();
            employees = await EmployeeService.GetEmployeesAsync() ?? new List<GetEmployeeViewModel>();
            taskTypes = await TaskService.GetTaskTypesAsync() ?? new List<GetTaskType>();

            if (taskTypes != null && taskTypes.Any())
            {
                newTaskTypeId = taskTypes.Last().Id; // Set the last TaskType as the default value
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowAddTaskModal()
    {
        JSRuntime.InvokeVoidAsync("openModal", "addTaskModal");
        showAddTaskModal = true;
    }

    private async void OnTaskRowClick(GetTaskViewModel task)
    {
        selectedTask = task;
        comments = await TaskService.GetTaskNotesAsync(selectedTask.Id.ToString()); // Fetch comments for selected task
        StateHasChanged();
    }



    private async Task OnTaskStatusChanged(ChangeEventArgs e)
    {

        Guid newStatusId = Guid.Parse(e.Value.ToString());

        var closedStatusId = Guid.Parse("B582E253-5B36-4AF5-A758-9004CA5E54E0");



        if (selectedTask != null && newStatusId != selectedTask.StatusId)

        {

            // Check if the task was previously closed and if current user is not the creator

            if (selectedTask.StatusId == closedStatusId && selectedTask.CreatedBy != UserGlobal.User.Id)

            {

                // Reset the dropdown to the previous value

                StateHasChanged();

                Snackbar.Add("Only the task creator can change the status after it has been closed.", Severity.Warning);

                return;

            }



            // Continue with the existing status change logic

            if (IsStatusChangeAllowed(newStatusId))

            {

                if (newStatusId == Guid.Parse("71B3DEAF-4C39-4F49-BF57-43F2E9CE6CBA")) // Re-Scheduled

                {

                    showRescheduleModal = true;

                    await JSRuntime.InvokeVoidAsync("openModal", "rescheduleModal");

                }

                else if (newStatusId == Guid.Parse("A5F6C587-BF08-4C4A-8AB2-548065DB9C71")) // Re-Assigned

                {

                    showReassignModal = true;

                    await JSRuntime.InvokeVoidAsync("openModal", "reassignModal");

                }

                else

                {

                    isLoading = true;

                    StateHasChanged();



                    selectedTask.StatusId = newStatusId;

                    var updateTaskModel = new UpdateTaskViewModel

                        {

                            Id = selectedTask.Id,

                            StatusId = newStatusId,

                            AssignedToEmployeeId = selectedTask.AssignedToEmployeeId,

                            Title = selectedTask.Title,

                            Description = selectedTask.Description,

                            DeadlineDate = selectedTask.DeadlineDate,

                            CreatedDate = selectedTask.CreatedDate

                        };



                    await TaskService.UpdateTaskAsync(updateTaskModel);



                    isLoading = false;

                    Snackbar.Add("Task status updated successfully!", Severity.Success);

                    StateHasChanged();

                }

            }

            else

            {

                Snackbar.Add("You are not authorized to change the status to this value.", Severity.Warning);

            }

        }
    }



    private async Task RescheduleTask()
    {
        if (newTaskDeadline != default(DateTime))
        {
            isLoading = true;
            StateHasChanged();

            selectedTask.StatusId = Guid.Parse("71B3DEAF-4C39-4F49-BF57-43F2E9CE6CBA"); // Re-Scheduled
            selectedTask.DeadlineDate = newTaskDeadline;
            var updateTaskModel = new UpdateTaskViewModel
            {
                    Id = selectedTask.Id,
                    StatusId = selectedTask.StatusId,
                    AssignedToEmployeeId = selectedTask.AssignedToEmployeeId,
                    Title = selectedTask.Title,
                    Description = selectedTask.Description,
                    DeadlineDate = selectedTask.DeadlineDate,
                    CreatedDate = selectedTask.CreatedDate
            };

            await TaskService.UpdateTaskAsync(updateTaskModel);
            tasks = await TaskService.GetTasksAsync(UserGlobal.User.Id);

            // **Add This Code to Create an Automatic Comment**
            var noteModel = new PostTaskNoteViewModel
                {
                    Note = $"This task has been re-scheduled to {newTaskDeadline:g}",
                    FileBase64 = null,
                    FileName = null,
                    ContentType = null,
                    EmployeeId = UserGlobal.User.Id,
                    Employeefirebasetoken = UserGlobal.User.FirebaseToken,
                    TaskId = selectedTask.Id
                };

            await TaskService.PostTaskNoteAsync(noteModel, selectedTask.Title);

            isLoading = false;
            Snackbar.Add("Task rescheduled successfully!", Severity.Success);
            CloseRescheduleModal();
            comments = await TaskService.GetTaskNotesAsync(selectedTask.Id.ToString()); // Refresh comments
            StateHasChanged();
        }
    }

    private void CloseRescheduleModal()
    {
        showRescheduleModal = false;
        JSRuntime.InvokeVoidAsync("closeModal", "rescheduleModal");
    }

    private async Task ReassignTask()
    {
        if (newTaskAssignedToEmployeeId != Guid.Empty)
        {
            isLoading = true;
            StateHasChanged();

            selectedTask.StatusId = Guid.Parse("A5F6C587-BF08-4C4A-8AB2-548065DB9C71"); // Re-Assigned
            selectedTask.AssignedToEmployeeId = newTaskAssignedToEmployeeId;
            var updateTaskModel = new UpdateTaskViewModel
            {
                    Id = selectedTask.Id,
                    StatusId = selectedTask.StatusId,
                    AssignedToEmployeeId = selectedTask.AssignedToEmployeeId,
                    Title = selectedTask.Title,
                    Description = selectedTask.Description,
                    DeadlineDate = selectedTask.DeadlineDate,
                    CreatedDate = selectedTask.CreatedDate
            };

            await TaskService.UpdateTaskAsync(updateTaskModel);
            tasks = await TaskService.GetTasksAsync(UserGlobal.User.Id);

            // **Retrieve the New Employee's Name**
            var assignedEmployee = employees.FirstOrDefault(e => e.Id == newTaskAssignedToEmployeeId);
            string employeeName = assignedEmployee != null ? $"{assignedEmployee.FirstName} {assignedEmployee.LastName}" : "Unknown Employee";

            // **Add This Code to Create an Automatic Comment**
            var noteModel = new PostTaskNoteViewModel
            {
                    Note = $"This task has been re-assigned to {employeeName}",
                    FileBase64 = null,
                    FileName = null,
                    ContentType = null,
                    EmployeeId = UserGlobal.User.Id,
                    Employeefirebasetoken = UserGlobal.User.FirebaseToken,
                    TaskId = selectedTask.Id
            };

            await TaskService.PostTaskNoteAsync(noteModel, selectedTask.Title);

            isLoading = false;
            Snackbar.Add("Task reassigned successfully!", Severity.Success);
            CloseReassignModal();
            comments = await TaskService.GetTaskNotesAsync(selectedTask.Id.ToString());
            StateHasChanged();
        }
    }

    private void CloseReassignModal()
    {
        showReassignModal = false;
        JSRuntime.InvokeVoidAsync("closeModal", "reassignModal");
    }

    private async Task UpdateTask(UpdateTaskViewModel updateTaskModel)
    {
        await TaskService.UpdateTaskAsync(updateTaskModel);

        selectedTask.StatusId = updateTaskModel.StatusId;
    }

    private async Task OpenFileDialog()
    {
        await JSRuntime.InvokeVoidAsync("document.querySelector", "#fileInput").AsTask();
        await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('#fileInput').click()");
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        selectedFileName = file.Name;
        fileContentType = file.ContentType;

        using (var stream = file.OpenReadStream())
        using (var memoryStream = new MemoryStream())
        {
            await stream.CopyToAsync(memoryStream);
            fileBytes = memoryStream.ToArray();
        }

        StateHasChanged();
    }

    private void RemoveFile()
    {
        selectedFileName = null;
        fileBytes = null;
        StateHasChanged();
    }

    private async Task SendNote()
    {
        if (string.IsNullOrWhiteSpace(noteText))
        {
            noteErrorMessage = "Note cannot be empty.";
            StateHasChanged();
            return;
        }

        var model = new PostTaskNoteViewModel
        {
            Note = noteText,
            FileBase64 = fileBytes != null ? Convert.ToBase64String(fileBytes) : null,
            FileName = selectedFileName,
            ContentType = fileContentType,
            Employeefirebasetoken = UserGlobal.User.FirebaseToken,
            EmployeeId = UserGlobal.User.Id,
            TaskId = selectedTask.Id
        };

        await TaskService.PostTaskNoteAsync(model, selectedTask.Title);
        noteText = string.Empty;
        noteErrorMessage = null; // Clear the error message
        selectedFileName = null;
        fileBytes = null;
        comments = await TaskService.GetTaskNotesAsync(selectedTask.Id.ToString()); // Refresh comments
        StateHasChanged();
    }

    private void ShowFullDescription()
    {
        showModal = true;
        JSRuntime.InvokeVoidAsync("openModal", "descriptionModal");
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private void ShowRemindModal()
    {
        if (selectedTask != null)
        {
            showRemindModal = true;
            remindMessage = ""; // Clear any previous message
            StateHasChanged(); // Force UI update
            JSRuntime.InvokeVoidAsync("openModal", "remindModal");
        }
        else
        {
            Snackbar.Add("Please select a task first.", Severity.Warning);
        }
    }

    private void CloseRemindModal()
    {
        showRemindModal = false;
        JSRuntime.InvokeVoidAsync("closeModal", "remindModal");
    }

    private async Task SendRemind(string employeeFirebaseToken , string employeeId)
    {
        if (!string.IsNullOrWhiteSpace(remindMessage))
        {
            isLoading = true;
            StateHasChanged();

            List<UserIdAndToken> userIdAndTokenList =new List<UserIdAndToken>();

            UserIdAndToken userIdAndToken =new UserIdAndToken { Id = employeeId , FirebaseToken = employeeFirebaseToken};

            userIdAndTokenList.Add(userIdAndToken);

            var request = new NotificationRequest
            {
                Title = "Reminder",
                Description = remindMessage,
                UserIdAndTokenList = userIdAndTokenList,
                Type = "employee",
                Message="",
                ScheduleTime = DateTime.Now
            };

            await NotificationClientService.SendNotificationAsync(request);

            isLoading = false;
            Snackbar.Add("Reminder sent successfully!", Severity.Success);
            CloseRemindModal();
            StateHasChanged();
        }
    }



    private bool IsStatusChangeAllowed(Guid newStatusId)
    {

        var closedStatusId = Guid.Parse("B582E253-5B36-4AF5-A758-9004CA5E54E0"); // Closed status
        // If the task is already closed and user is not the creator, prevent any status change
        if (selectedTask.StatusId == closedStatusId && selectedTask.CreatedBy != UserGlobal.User.Id)
        {
            return false;
        }
        // For other cases, maintain the original restricted statuses logic

        var restrictedStatuses = new List<Guid>
        {
            Guid.Parse("71B3DEAF-4C39-4F49-BF57-43F2E9CE6CBA"),  // Re-Scheduled
            Guid.Parse("A5F6C587-BF08-4C4A-8AB2-548065DB9C71"),  // Re-Assigned
            Guid.Parse("B582E253-5B36-4AF5-A758-9004CA5E54E0")   // Closed
        };

        return selectedTask.CreatedBy == UserGlobal.User.Id || !restrictedStatuses.Contains(newStatusId);
    }



    private string GetStatusGradient(string status)
    {
        return status switch
        {
            "In Progress" => "radial-gradient(circle, rgba(255,165,0,1) 0%, rgba(255,165,0,0.3) 40%, rgba(255,255,255,0) 70%)",
            "Closed" => "radial-gradient(circle, rgba(0,128,0,1) 0%, rgba(0,128,0,0.3) 40%, rgba(255,255,255,0) 70%)",
            "Re-Scheduled" => "radial-gradient(circle, rgba(0,0,0,1) 0%, rgba(0,0,0,0.3) 40%, rgba(255,255,255,0) 70%)",
            "Re-Assigned" => "radial-gradient(circle, rgba(128,0,128,1) 0%, rgba(128,0,128,0.3) 40%, rgba(255,255,255,0) 70%)",
            "Open" => "radial-gradient(circle, rgba(0,0,255,1) 0%, rgba(0,0,255,0.3) 40%, rgba(255,255,255,0) 70%)",
            _ => "radial-gradient(circle, rgba(255,0,0,1) 0%, rgba(255,0,0,0.3) 40%, rgba(255,255,255,0) 70%)"
        };
    }

    private string GetRelativeTime(DateTime? date)
    {
        if (!date.HasValue) return string.Empty;

        var timeSpan = DateTime.Now - date.Value;

        if (timeSpan.TotalMinutes < 1)
            return Localizer["JustNow"];

        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} {Localizer["MinutesAgo"]}";

        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} {Localizer["HoursAgo"]}";

        if (timeSpan.TotalDays < 1)
            return $"{Localizer["TodayAt"]} {date.Value:hh:mm tt}";

        if (timeSpan.TotalDays < 2)
            return $"{Localizer["YesterdayAt"]} {date.Value:hh:mm tt}";

        return date.Value.ToString(Localizer["DateTimeFormat"]);
    }

    private int GetTaskCountByStatus(string status)
    {
        if (string.IsNullOrWhiteSpace(status))
        {
            return tasks.Count;
        }
        return tasks?.Count(task => task.StatusEn.Equals(status, StringComparison.OrdinalIgnoreCase)) ?? 0;
    }

    private void FilterTasksByStatus(string status)
    {

        if (string.IsNullOrWhiteSpace(status))
        {
            selectedStatus = "";
            // If no status is selected, show all tasks
            filteredTasks = tasks;
        }
        else
        {
            selectedStatus = status;
            // Filter tasks based on the selected status
            filteredTasks = tasks.Where(task => task.StatusEn.Equals(status, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        StateHasChanged(); // Update the UI
    }

    private void OpenScheduledNotificationModal(GetTaskNotes comment)
    {
        notificationTitle = "Reminder"; // Set default title
        notificationBody = comment.Note; // Set default body from comment
        firebaseToken = comment.EmpolyeeFirebaseToken; // Get the token from the comment
        scheduleTime = DateTime.Now.AddHours(1); // Default schedule time to 1 hour from now
        showScheduledNotificationModal = true; // Show the modal
        JSRuntime.InvokeVoidAsync("openModal", "scheduledNotificationModal"); // Open the modal
    }

    private void CloseScheduledNotificationModal()
    {
        showScheduledNotificationModal = false;
        JSRuntime.InvokeVoidAsync("closeModal", "scheduledNotificationModal"); // Close the modal
    }

    private async Task SendScheduledNotification()
    {
        List<UserIdAndToken> userIdAndTokenList = new List<UserIdAndToken>();

        UserIdAndToken userIdAndToken = new UserIdAndToken { Id = UserGlobal.User.Id.ToString(), FirebaseToken = UserGlobal.User.FirebaseToken };

        userIdAndTokenList.Add(userIdAndToken);

        var request = new NotificationRequest
            {
                Title = notificationTitle,
                Description = notificationBody,
                UserIdAndTokenList = userIdAndTokenList,
                Type = "employee",
                Message = "",
                ScheduleTime = scheduleTime
            };

        await NotificationClientService.SendNotificationAsync(request);

        CloseScheduledNotificationModal();
    }

    private bool CanAddComments()
    {
        if (selectedTask == null || UserGlobal?.User == null)
            return false;

        // Allow comments if the user is either the task creator or the assigned employee
        return selectedTask.CreatedBy == UserGlobal.User.Id || 
               selectedTask.AssignedToEmployeeId == UserGlobal.User.Id;
    }

    private async Task AddComment()
    {
        if (string.IsNullOrWhiteSpace(noteText))
            return;

        try
        {
            isLoading = true;
            StateHasChanged();
            var model = new PostTaskNoteViewModel
            {
                    Note = noteText,

                    FileBase64 = fileBytes != null ? Convert.ToBase64String(fileBytes) : null,

                    FileName = selectedFileName,

                    ContentType = fileContentType,

                    Employeefirebasetoken = selectedTask.CreatedBy == UserGlobal.User.Id ? selectedTask.EmployeeFirebaseToken : selectedTask.CreatedbyFirebaseToken,

                    EmployeeId = UserGlobal.User.Id,

                    TaskId = selectedTask.Id
            };
            await TaskService.PostTaskNoteAsync(model, selectedTask.Title);
            // Clear the form
            noteText = string.Empty;
            selectedFileName = string.Empty;
            fileBytes = null;
            fileContentType = string.Empty;

            // Refresh comments
            comments = await TaskService.GetTaskNotesAsync(selectedTask.Id.ToString());
        }
        catch (Exception ex)
        {
            noteErrorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OnSearch(ChangeEventArgs e)
    {
        _searchString = e.Value?.ToString();
        if (string.IsNullOrWhiteSpace(_searchString))
        {
            filteredTasks = tasks;
        }
        else
        {
            filteredTasks = tasks.Where(x =>
                (x.AssignedToEmployee?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (x.TypeEn?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (x.TypeAr?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (x.TypeTr?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (x.Title?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (x.CreatedbyName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (x.StatusEn?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (x.CreatedDate.ToString()?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            ).ToList();
        }
        StateHasChanged();
    }
}

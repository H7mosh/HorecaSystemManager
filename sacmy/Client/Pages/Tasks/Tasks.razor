@page "/Tasks"
@using sacmy.Client.Services
@using sacmy.Shared.Core
@using sacmy.Shared.ViewModels.EmployeeViewModel
@using sacmy.Shared.ViewModels.TasksViewModel
@inject TaskService TaskService
@inject EmployeeService EmployeeService
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime
@inject UserGlobalClass UserGlobal
@inject ISnackbar Snackbar

<style>
    body, html {
        height: 100%;
        margin: 0;
    }

    .tasks-container {
        display: flex;
        gap: 20px;
        height: 100vh;
        margin: 0;
    }

    .tasks-list-container {
        display: flex;
        flex-direction: column;
        width: 70%;
        border-right: 2px solid #ccc;
    }

    .tasks-list-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        font-size: 24px;
        font-weight: bold;
        color: #212529;
    }

    .tasks-list {
        display: flex;
        flex-direction: column;
        gap: 10px;
        padding: 10px;
        flex: 1;
    }

    .task-item {
        display: flex;
        align-items: center;
        padding: 10px;
        background-color: #ffffff;
        border: 1px solid #ddd;
        border-radius: 5px;
    }

    .task-item input[type="checkbox"] {
        margin-right: 20px;
    }

    .task-title {
        font-size: 16px;
        font-weight: bold;
        margin-right: 20px;
        min-width: 150px;
    }

    .task-meta {
        display: flex;
        align-items: center;
        font-size: 12px;
        color: #888;
        margin-right: 20px;
    }

    .task-meta span {
        background-color: #f5f5f5;
        padding: 2px 5px;
        border-radius: 3px;
        margin-right: 10px;
    }

    .task-status {
        font-size: 14px;
        font-weight: bold;
        margin-right: 20px;
        min-width: 100px;
    }

    .task-status.closed, .task-status.done {
        color: #198754;
    }

    .task-status.pending {
        color: #ff9800;
    }

    .task-status.inProgress {
        color: #555555;
    }

    .task-deadline {
        color: red;
    }

    .task-assigned {
        display: flex;
        align-items: center;
    }

    .task-assigned span {
        font-size: 14px;
        color: #333;
        margin-right: 10px;
        white-space: nowrap;
        width: 120px;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .task-assigned img {
        width: 32px;
        height: 32px;
        border-radius: 50%;
    }

    .task-detail {
        flex: 0 0 30%;
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .task-detail-content {
        padding: 20px;
        background-color: #ffffff;
        border-radius: 10px;
    }

    .task-detail-content .description {
        padding: 5px;
        margin: 5px;
        background-color: #ffffff;
        border-radius: 10px;
        font-size: 14px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        position: relative;
        max-width: 80%;
    }

    .view-more-container {
        display: flex;
        align-items: center;
    }

    .view-more-button {
        margin-left: 10px;
        background-color: transparent;
        border: none;
        color: #007bff;
        cursor: pointer;
        font-size: 12px;
    }

    .add-task-button {
        background-color: #007bff;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
    }

    .modal-content {
        padding: 20px;
    }

    .modal-backdrop {
        opacity: 0.5 !important;
    }

    .task-comments {
        flex: 1;
        overflow-y: auto;
        height: 40vh;
        padding: 5px 10px;
        border-radius: 10px;
    }

    .comment-container {
        display: flex;
        align-items: flex-start;
        padding: 15px;
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 10px;
        margin-bottom: 15px;
    }

    .comment-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        margin-right: 15px;
    }

    .comment-content {
        flex: 1;
        margin-left: 15px;
    }

    .comment-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .comment-author {
        font-weight: bold;
    }

    .comment-date {
        color: #888;
        font-size: 14px;
    }

    .comment-text {
        margin: 10px 0;
        font-size: 14px;
    }

    .comment-attachment {
        display: flex;
        align-items: center;
        margin-top: 10px;
    }

    .comment-attachment button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 5px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
    }

    .message-box-container {
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .message-box {
        display: flex;
        align-items: flex-start;
        gap: 10px;
    }

    .message-box textarea {
        flex: 1;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        resize: none;
        height: 100px;
    }

    .button-container {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .message-box button {
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        width: 100px;
    }

    .attach-button {
        background-color: #ff9800;
    }

    .send-button {
        background-color: #007bff;
    }

    .no-comments {
        text-align: center;
        color: #888;
        font-size: 14px;
        margin-top: 20px;
    }

    .file-display {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
        margin-bottom: 10px;
    }

    .file-name {
        font-size: 14px;
        color: #555;
    }

    .remove-file {
        cursor: pointer;
        font-size: 18px;
        color: red;
    }

    .download-button .download-attachment {
        display: inline-block;
        padding: 6px 20px;
        background-color: #007bff;
        color: #fff;
        text-decoration: none;
        border-radius: 5px;
    }

    .download-button .download-attachment:hover {
        background-color: #0056b3;
    }

    .status-container {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .status-container label {
        margin-bottom: 0;
        white-space: nowrap;
    }

    .status-container select {
        flex-grow: 1;
    }

    .comments-header {
        margin: 10px;
    }

    .form-group-status-container {
        margin: 10px;
    }
</style>

<script>
    window.openFileDialog = function () {
        document.getElementById('fileInput').click();
    };

    window.openModal = function (modalId) {
        $('#' + modalId).modal('show');
    };

    window.closeModal = function (modalId) {
        $('#' + modalId).modal('hide');
    };
</script>

<div class="tasks-container">
    <div class="tasks-list-container">
        <div class="tasks-list-header">
            <span>Tasks (@tasks?.Count)</span>
            <button class="add-task-button" @onclick="ShowAddTaskModal">Add Task</button>
        </div>
        <div class="tasks-list">
            @foreach (var task in tasks)
            {
                <div class="task-item">
                    <input type="checkbox" @onchange="(() => OnTaskSelected(task))" />
                    <div class="task-title">
                        @task.Title
                    </div>
                    <div class="task-meta">
                        <span>init date: @task.CreatedDate.ToString("MM-dd-yyyy hh:mm tt")</span>
                        <span class="task-deadline">expire date: @task.DeadlineDate?.ToString("MM-dd-yyyy hh:mm tt")</span>
                    </div>
                    <div class="task-status @(task.Status == "Closed" || task.Status == "Done" ? "closed" : task.Status == "Pending" ? "pending" : "inProgress")">
                        @task.Status
                    </div>
                    <div class="task-assigned">
                        <span>@task.AssignedToEmployee</span>
                        <img src="@task.EmployeeImage" alt="Employee Avatar" />
                    </div>
                </div>
            }
        </div>
    </div>

    @if (selectedTask != null)
    {
        <div class="task-detail">
            <div class="task-detail-content">
                <h3>@selectedTask.Title</h3>
                <div class="view-more-container">
                    <p class="description">
                        <strong>Description:</strong> @selectedTask.Description
                    </p>
                    <button class="view-more-button" @onclick="ShowFullDescription">View More</button>
                </div>
                <div class="form-group-status-container">
                    <label for="taskStatus">Status:</label>
                    <select id="taskStatus" class="form-control" @onchange="async (e) => await OnTaskStatusChanged(e)">
                        @foreach (var status in taskStatuses)
                        {
                            <option value="@status.Id" selected="@(status.Id == selectedTask.StatusId ? "selected" : null)">@status.StatusEn</option>
                        }
                    </select>
                </div>


                <div class="comments-header">
                    <i class="bi bi-chat-left-text"></i> COMMENTS
                </div>
                <div class="comments-line"></div>
            </div>
            <div class="task-comments">
                @if (comments.Count == 0)
                {
                    <div class="no-comments">There are no messages yet.</div>
                }
                else
                {
                    @foreach (var comment in comments)
                    {
                        <div class="comment-container" style="background-color: @(comment.EmpolyeeRole == "manager" ? "rgba(56, 122, 223, 0.2)" : "inherit")">
                            <img class="comment-avatar" src="@comment.EmployeeImage" alt="Commenter Avatar" />
                            <div class="comment-content">
                                <div class="comment-header">
                                    <span class="comment-author">@comment.EmployeeName</span>
                                    <span class="comment-date">@Helper.GetRelativeTime(comment.CreatedDate)</span>
                                </div>
                                <div class="comment-text">@comment.Note</div>
                                @if (!string.IsNullOrEmpty(comment.FileLink))
                                {
                                    <div class="download-button">
                                        <a href="@comment.FileLink" class="download-attachment" download="filename.ext" target="_blank">
                                            Get Attachment
                                        </a>
                                    </div>
                                }
                            </div>
                        </div>

                    }
                }
            </div>
            <div class="message-box-container">
                @if (!string.IsNullOrEmpty(selectedFileName))
                {
                    <div class="file-display">
                        <div class="file-name">Selected file: @selectedFileName</div>
                        <button type="button" class="btn btn-secondary" @onclick="RemoveFile">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3-fill" viewBox="0 0 16 16">
                                <path d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5m-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5M4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06m6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528M8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5"></path>
                            </svg>
                        </button>
                    </div>
                }
                <div class="message-box">
                    <textarea @bind="noteText" placeholder="Write your message here..."></textarea>
                    <div class="button-container">
                        <button class="attach-button" @onclick="OpenFileDialog">ATTACH</button>
                        <InputFile id="fileInput" style="display: none;" OnChange="OnFileSelected" />
                        <button class="send-button" @onclick="SendNote">SEND</button>
                    </div>
                </div>
            </div>
            <div class="modal fade @(showModal ? "show d-block" : "")" id="descriptionModal" tabindex="-1" role="dialog" aria-labelledby="descriptionModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="descriptionModalLabel">Task Description</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModal">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            @selectedTask.Description
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseModal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal fade @(showAddTaskModal ? "show d-block" : "")" id="addTaskModal" tabindex="-1" role="dialog" aria-labelledby="addTaskModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="addTaskModalLabel">Add Task</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseAddTaskModal">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <label for="taskTitle">Title</label>
                                <input type="text" class="form-control" id="taskTitle" @bind="newTaskTitle" placeholder="Enter task title">
                                @if (string.IsNullOrWhiteSpace(newTaskTitle))
                                {
                                    <div class="text-danger">Title is required</div>
                                }
                            </div>
                            <div class="form-group">
                                <label for="taskDescription">Description</label>
                                <textarea class="form-control" id="taskDescription" @bind="newTaskDescription" placeholder="Enter task description"></textarea>
                                @if (string.IsNullOrWhiteSpace(newTaskDescription))
                                {
                                    <div class="text-danger">Description is required</div>
                                }
                            </div>
                            <div class="form-group">
                                <label for="taskAssignedTo">Assigned To</label>
                                <select class="form-control" id="taskAssignedTo" @onchange="(e) => newTaskAssignedToEmployeeId = Guid.Parse(e.Value.ToString())">
                                    <option value="">Select Employee</option>
                                    @foreach (var employee in employees)
                                    {
                                        <option value="@employee.Id">@employee.FirstName @employee.LastName</option>
                                    }
                                </select>
                                @if (newTaskAssignedToEmployeeId == Guid.Empty)
                                {
                                    <div class="text-danger">Assigned Employee is required</div>
                                }
                            </div>
                            <div class="form-group">
                                <label for="taskStatus">Status</label>
                                <select class="form-control" id="taskStatus" @onchange="(e) => newTaskStatusId = Guid.Parse(e.Value.ToString())">
                                    <option value="">Select initial status</option>
                                    @foreach (var status in taskStatuses)
                                    {
                                        <option value="@status.Id">@status.StatusEn</option>
                                    }
                                </select>
                                @if (newTaskStatusId == Guid.Empty)
                                {
                                    <div class="text-danger">Status is required</div>
                                }
                            </div>
                            <div class="form-group">
                                <label for="taskDeadline">Deadline</label>
                                <input type="datetime-local" class="form-control" id="taskDeadline" @bind="newTaskDeadline">
                                @if (newTaskDeadline == default(DateTime))
                                {
                                    <div class="text-danger">Deadline is required</div>
                                }
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseAddTaskModal">Close</button>
                            <button type="button" class="btn btn-primary" @onclick="AddTask" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                }
                                else
                                {
                                    <span>Save Task</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

</div>


<MudSnackbarProvider />

@code {
    private List<GetTaskViewModel> tasks;
    private List<GetTaskNotes> comments = new List<GetTaskNotes>();
    private List<GetTaskStatus> taskStatuses;
    private List<GetEmployeeViewModel> employees;
    private GetTaskViewModel selectedTask;
    private string selectedFileName;
    private string noteText;
    private byte[] fileBytes;
    private string fileContentType;
    private bool showModal = false;
    private bool isLoading = false;
    private bool showSuccessMessage = false;
    private bool showAddTaskModal = false;

    private string newTaskTitle;
    private string newTaskDescription;
    private Guid newTaskAssignedToEmployeeId = Guid.Empty;
    private Guid newTaskStatusId = Guid.Empty;
    private DateTime newTaskDeadline = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        tasks = await TaskService.GetTasksAsync(UserGlobal.User.Id);
        taskStatuses = await TaskService.GetTaskStatusAsync();
        employees = await EmployeeService.GetEmployeesAsync();
    }

    private async void OnTaskSelected(GetTaskViewModel task)
    {
        selectedTask = task;
        comments = await TaskService.GetTaskNotesAsync(task.Id.ToString()); // Fetch comments for selected task
        StateHasChanged();
    }

    private async Task OnTaskStatusChanged(ChangeEventArgs e)
    {
        Guid newStatusId = Guid.Parse(e.Value.ToString());

        if (selectedTask != null && newStatusId != selectedTask.StatusId)
        {
            isLoading = true;
            StateHasChanged();

            selectedTask.StatusId = newStatusId;
            var updateTaskModel = new UpdateTaskViewModel
                {
                    Id = selectedTask.Id,
                    StatusId = newStatusId,
                    AssignedToEmployeeId = selectedTask.AssignedToEmployeeId,
                    Title = selectedTask.Title,
                    Description = selectedTask.Description,
                    DeadlineDate = selectedTask.DeadlineDate,
                    CreatedDate = selectedTask.CreatedDate
                };

            await TaskService.UpdateTaskAsync(updateTaskModel);

            isLoading = false;
            Snackbar.Add("Task status updated successfully!", Severity.Success);
            StateHasChanged();
        }
    }

    private async Task UpdateTask(UpdateTaskViewModel updateTaskModel)
    {
        await TaskService.UpdateTaskAsync(updateTaskModel);

        selectedTask.StatusId = updateTaskModel.StatusId;
    }

    private async Task OpenFileDialog()
    {
        await JSRuntime.InvokeVoidAsync("openFileDialog");
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        selectedFileName = file.Name;
        fileContentType = file.ContentType;

        using (var stream = file.OpenReadStream())
        using (var memoryStream = new MemoryStream())
        {
            await stream.CopyToAsync(memoryStream);
            fileBytes = memoryStream.ToArray();
        }

        StateHasChanged();
    }

    private void RemoveFile()
    {
        selectedFileName = null;
        fileBytes = null;
        StateHasChanged();
    }

    private async Task SendNote()
    {
        var model = new PostTaskNoteViewModel
            {
                Note = noteText,
                FileBase64 = fileBytes != null ? Convert.ToBase64String(fileBytes) : null,
                FileName = selectedFileName,
                ContentType = fileContentType,
                EmployeeId = UserGlobal.User.Id,
                TaskId = selectedTask.Id
            };

        await TaskService.PostTaskNoteAsync(model, selectedTask.Title);
        noteText = string.Empty;
        selectedFileName = null;
        fileBytes = null;
        comments = await TaskService.GetTaskNotesAsync(selectedTask.Id.ToString()); // Refresh comments
        StateHasChanged();
    }

    private void ShowFullDescription()
    {
        showModal = true;
        JSRuntime.InvokeVoidAsync("openModal", "descriptionModal");
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private void ShowAddTaskModal()
    {
        showAddTaskModal = true;
        JSRuntime.InvokeVoidAsync("openModal", "addTaskModal");
    }

    private void CloseAddTaskModal()
    {
        showAddTaskModal = false;
        JSRuntime.InvokeVoidAsync("closeModal", "addTaskModal");
    }

    private async Task AddTask()
    {
        if (IsValid())
        {
            isLoading = true;
            StateHasChanged();

            var newTask = new PostTaskViewModel
                {
                    Id = Guid.NewGuid(),
                    Title = newTaskTitle,
                    Description = newTaskDescription,
                    AssignedToEmployee = newTaskAssignedToEmployeeId,
                    StatusId = newTaskStatusId,
                    Deadline = newTaskDeadline
                };

            await TaskService.PostTaskAsync(newTask);
            tasks = await TaskService.GetTasksAsync(UserGlobal.User.Id);

            isLoading = false;
            Snackbar.Add("Task added successfully!", Severity.Success);
            CloseAddTaskModal();
            StateHasChanged();
        }
    }

    private bool IsValid()
    {
        return !string.IsNullOrWhiteSpace(newTaskTitle) &&
               !string.IsNullOrWhiteSpace(newTaskDescription) &&
               newTaskAssignedToEmployeeId != Guid.Empty &&
               newTaskStatusId != Guid.Empty &&
               newTaskDeadline != default(DateTime);
    }
}




























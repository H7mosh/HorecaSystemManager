@page "/Tasks"
@using sacmy.Client.Services
@using sacmy.Shared.ViewModels.TasksViewModel
@inject TaskService TaskService

<h3>Tasks (@tasks?.Count)</h3>

<style>
    .tasks-container {
        display: flex;
        gap: 20px;
        height: 80vh;
    }

    .tasks-list {
        display: flex;
        flex-direction: column;
        gap: 10px;
        padding: 10px;
        flex: 1;
    }

    .task-item {
        display: flex;
        align-items: center;
        padding: 10px;
        background-color: #ffffff;
    }

        .task-item input[type="checkbox"] {
            margin-right: 20px;
        }

    .task-title {
        font-size: 16px;
        font-weight: bold;
        margin-right: 20px;
        min-width: 150px;
    }

    .task-meta {
        display: flex;
        align-items: center;
        font-size: 12px;
        color: #888;
        margin-right: 20px;
    }

        .task-meta span {
            background-color: #f5f5f5;
            padding: 2px 5px;
            border-radius: 3px;
            margin-right: 10px;
        }

    .task-status {
        font-size: 14px;
        font-weight: bold;
        margin-right: 20px;
        min-width: 100px;
    }

        .task-status.closed, .task-status.done {
            color: #198754; /* Green */
        }

        .task-status.pending {
            color: #ff9800; /* Orange */
        }

        .task-status.inProgress {
            color: #555555; /* Dark grey */
        }

    .task-deadline {
        color: red; /* Red for deadline date */
    }

    .task-assigned {
        display: flex;
        align-items: center;
    }

        .task-assigned span {
            font-size: 14px;
            color: #333;
            margin-right: 10px;
            white-space: nowrap;
            width: 120px;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .task-assigned img {
            width: 32px;
            height: 32px;
            border-radius: 50%;
        }

    .task-detail {
        flex: 0 0 30%; /* Adjust width to be smaller */
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        overflow-y: auto; /* Add scroll if content overflows */
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

        .task-detail h3 {
            margin-top: 0;
        }

        .task-detail p {
            margin: 5px 0;
        }

        .task-detail .comment {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

            .task-detail .comment img {
                width: 32px;
                height: 32px;
                border-radius: 50%;
                margin-right: 10px;
            }

            .task-detail .comment .comment-text {
                font-size: 14px;
                color: #333;
            }

            .task-detail .comment .comment-date {
                font-size: 12px;
                color: #888;
                margin-left: 10px;
            }

    .message-box {
        display: flex;
        align-items: flex-start;
        gap: 10px;
        margin-top: 10px;
        padding: 10px;
        background-color: #ffffff;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .message-box textarea {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            resize: none;
            height: 100px; /* Adjust height as needed */
        }

        .message-box .button-container {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .message-box button {
            padding: 10px 20px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            width: 100px;
        }

    .attach-button {
        background-color: #ff9800;
    }

    .send-button {
        background-color: #007bff;
    }

    .no-comments {
        text-align: center;
        color: #888;
        font-size: 14px;
        margin-top: 20px;
    }
</style>

<div class="tasks-container">
    <div class="tasks-list">
        @foreach (var task in tasks)
        {
            <div class="task-item">
                <input type="checkbox" @onchange="(() => OnTaskSelected(task))" />
                <div class="task-title">
                    @task.Title
                </div>
                <div class="task-meta">
                    <span>init date: @task.CreatedDate.ToString("MM-dd-yyyy hh:mm tt")</span>
                    <span class="task-deadline">expire date: @task.DeadlineDate?.ToString("MM-dd-yyyy hh:mm tt")</span>
                </div>
                <div class="task-status @(task.Status == "Closed" || task.Status == "Done" ? "closed" : task.Status == "Pending" ? "pending" : "inProgress")">
                    @task.Status
                </div>
                <div class="task-assigned">
                    <span>@task.AssignedToEmployee</span>
                    <img src="@task.EmployeeImage" alt="Employee Avatar" />
                </div>
            </div>
        }
    </div>

    @if (selectedTask != null)
    {
        <div class="task-detail">
            <div>
                <h3>@selectedTask.Title</h3>
                <p><strong>Description:</strong> @selectedTask.Description</p>
                <p>
                    <strong>Status:</strong>
                    <select>
                        <option>In Progress</option>
                        <option>Completed</option>
                    </select>
                </p>
                @if (comments.Count == 0)
                {
                    <div class="no-comments">There No Message Yet</div>
                }
                else
                {
                    <div class="task-comments">
                        <strong>Comments:</strong>
                        @foreach (var comment in comments)
                        {
                            <div class="comment">
                                <img src="@comment.EmployeeImage" alt="Commenter Avatar" />
                                <div class="comment-text">@comment.EmployeeName commented: @comment.Note</div>
                                <div class="comment-date">@string.Format("{0:MM-dd-yyyy hh:mm tt}", comment.CreatedDate)</div>
                            </div>
                        }
                    </div>
                }
            </div>
            <div class="message-box">
                <textarea placeholder="Write Text Here Please To Send"></textarea>
                <div class="button-container">
                    <button class="attach-button">ATTACH</button>
                    <button class="send-button">SEND</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<GetTaskViewModel> tasks;
    private GetTaskViewModel selectedTask;
    private List<GetTaskNotes> comments = new List<GetTaskNotes>();

    protected override async Task OnInitializedAsync()
    {
        tasks = await TaskService.GetTasksAsync();
    }

    private async void OnTaskSelected(GetTaskViewModel task)
    {
        selectedTask = task;
        comments = await TaskService.GetTaskNotesAsync(task.Id.ToString()); // Fetch comments for selected task
        StateHasChanged();
    }

}




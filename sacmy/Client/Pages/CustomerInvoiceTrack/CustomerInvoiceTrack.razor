@page "/CustomerInvoiceTrack"
@using sacmy.Client.Pages.Tasks
@using sacmy.Shared.ViewModels.CustomerTracker
@using sacmy.Shared.ViewModels.CustomerTracker
@using System.Net.Http
@using System.Net.Http.Json
@using sacmy.Shared.ViewModels.InvoiceViewModel
@inject HttpClient Http
<!--<h3>CustomerInvoiceTrack</h3>-->

<style>
    .custom-active-link.active {
        background-color: transparent !important;
        color: blue !important;
        border-bottom: 2px solid blue !important;
    }

    .custom-inactive-link {
        color: darkgrey;
    }

        .custom-inactive-link:hover {
            color: blue;
            border-bottom: 2px solid blue;
        }


    /* Custom DataGrid Styles */
    .custom-data-grid .mud-table-container {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 0;
    }

    .custom-data-grid table {
        background-color: #fff;
        width: 100%;
    }

    /* Adjust grid height to remove extra space */
    .custom-data-grid {
        height: auto;
    }

        .custom-data-grid tr {
            height: 60px;
        }

            .custom-data-grid tr:hover {
                background-color: #C9DEFE; /* Light blue background on hover */
            }

        .custom-data-grid tbody tr:nth-child(even) {
            background-color: #F4F9FF; /* Light grey background for even rows */
        }

        /* Header styling to match the example */
        .custom-data-grid th {
            background-color: #5D9EFD; /* Example header color */
            font-weight: 600;
            text-align: left;
            padding: 12px;
            border-bottom: 1px solid #64b5f6;
        }

        .custom-data-grid td {
            padding: 12px;
            vertical-align: middle;
        }

        .custom-data-grid .mud-switch {
            color: #007bff;
        }

    .search-field {
        max-width: 250px;
    }

</style>

<div style="padding: 10px;">
    <h3 style="margin-bottom: 40px;">CustomerInvoiceTasks</h3>

    <ul class="nav nav-underline">
        <li class="nav-item">
            <a class="nav-link @(activeTab == 1 ? "active custom-active-link" : "custom-inactive-link")"
               @onclick="() => SetActiveTab(1)">Hidden Customer</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(activeTab == 2 ? "active custom-active-link" : "custom-inactive-link")"
               @onclick="() => SetActiveTab(2)">Debtor</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(activeTab == 3 ? "active custom-active-link" : "custom-inactive-link")"
               @onclick="() => SetActiveTab(3)">UnCompleted Invoice</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(activeTab == 4 ? "active custom-active-link" : "custom-inactive-link")"
               @onclick="() => SetActiveTab(4)">Customer</a>
        </li>
    </ul>

    @if (isLoading)
    {
        <div>Loading...</div>
    }
    else if (activeTab == 1 && customerData != null)
    {
        <MudDataGrid T="CustomerHiddenViewModel" MultiSelection="true" Items="@customerData" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                     Hideable="true" RowClick="@CustomerRowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged"
                     Class="custom-data-grid" Style="height: 100%;">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="search-field" />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Id" Title="Id" />
                <PropertyColumn Property="x => x.Name" Title="Full Name" />
                <PropertyColumn Property="x => x.Type" Title="Position" />
                <PropertyColumn Property="x => x.LastDate" Title="Date of Birth" />
                <PropertyColumn Property="x => x.TrackType" Title="Skills" />
                <PropertyColumn Property="x => x.State" Title="Exp" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="CustomerHiddenViewModel" />
            </PagerContent>
        </MudDataGrid>
    }
    else if (activeTab == 2 && debtorData != null)
    {
        <MudDataGrid T="DeptCustomerViewModel" MultiSelection="true" Items="@debtorData" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilterDebtor"
                     Hideable="true" RowClick="@DebtorRowClicked" RowContextMenuClick="DebtorRowRightClicked" SelectedItemsChanged="@SelectedDebtorItemsChanged"
                     Class="custom-data-grid" Style="height: 100%;">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="_searchDebtorString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="search-field" />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Id" Title="Id" />
                <PropertyColumn Property="x => x.CustomerName" Title="Customer Name" />
                <PropertyColumn Property="x => x.TotalTransTotalN" Title="Amount" />
                <PropertyColumn Property="x => x.HasRecentReceipt" Title="Due Date" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="DeptCustomerViewModel" />
            </PagerContent>
        </MudDataGrid>
    }
    else if (activeTab == 3 && invoiceData != null)
    {
        <MudDataGrid T="InvoiceViewModel" MultiSelection="true" Items="@invoiceData" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilterInvoice"
                     Hideable="true" RowClick="@InvoiceRowClicked" RowContextMenuClick="InvoiceRowRightClicked" SelectedItemsChanged="@SelectedInvoiceItemsChanged"
                     Class="custom-data-grid" Style="height: 100%;">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="_searchInvoiceString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="search-field" />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Id" Title="Id" />
                <PropertyColumn Property="x => x.CustomerName" Title="Customer Name" />
                <PropertyColumn Property="x => x.CustomerType" Title="Customer Type" />
                <PropertyColumn Property="x => x.Address" Title="Address" />
                <PropertyColumn Property="x => x.InvoiceBranch" Title="Branch" />
                <PropertyColumn Property="x => x.Total" Title="Total" />
                <PropertyColumn Property="x => x.DateTime" Title="Date" />
                <PropertyColumn Property="x => x.TrackType" Title="Track Type" />
                <PropertyColumn Property="x => x.State" Title="State" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="InvoiceViewModel" />
            </PagerContent>
        </MudDataGrid>
    }
    else
    {
        <div>No data available.</div>
    }

    <AddTaskModal IsVisible="@showAddTaskModal"
                  IsVisibleChanged="@(value => showAddTaskModal = value)"
                  CustomerId="selectedCustomerId"
                  InvoiceId="selectedInvoiceId"
                  TaskType="@taskType" />

</div>

@code {
    private int activeTab = 1;
    private bool isLoading = false;
    private IEnumerable<CustomerHiddenViewModel> customerData = new List<CustomerHiddenViewModel>();
    private IEnumerable<DeptCustomerViewModel> debtorData = new List<DeptCustomerViewModel>();
    private IEnumerable<InvoiceViewModel> invoiceData = new List<InvoiceViewModel>();
    private string _searchString;
    private string _searchDebtorString;
    private string _searchInvoiceString;
    private bool _sortNameByLength;
    private List<string> _events = new();

    private int? selectedCustomerId = null;
    private int? selectedInvoiceId = null;
    private bool showAddTaskModal = false;
    private string taskType = "other";

    protected override async Task OnInitializedAsync()
    {
        await SetActiveTab(activeTab);
    }

    private async Task FetchCustomerData()
    {
        isLoading = true;
        customerData = null;

        try
        {
            customerData = await Http.GetFromJsonAsync<List<CustomerHiddenViewModel>>("api/CustomerTracker/GetHiddenCustomer");
        }
        catch (Exception ex)
        {
            // Handle exceptions
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task FetchUncompletedInvoices()
    {
        isLoading = true;
        invoiceData = null;

        try
        {
            invoiceData = await Http.GetFromJsonAsync<List<InvoiceViewModel>>("api/Invoice/GetUncompleteInvoices");
        }
        catch (Exception ex)
        {
            // Handle exceptions
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task FetchCustomerRemainTotal()
    {
        isLoading = true;
        debtorData = null;

        try
        {
            debtorData = await Http.GetFromJsonAsync<List<DeptCustomerViewModel>>("api/CustomerTracker/GetCostumerRemainTotal");
        }
        catch (Exception ex)
        {
            // Handle exceptions
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SetActiveTab(int tabIndex)
    {
        activeTab = tabIndex;

        if (activeTab == 1)
        {
            await FetchCustomerData();
        }
        else if (activeTab == 2)
        {
            await FetchCustomerRemainTotal();
        }
        else if (activeTab == 3)
        {
            await FetchUncompletedInvoices();

        }
    }

    private void CustomerRowClicked(DataGridRowClickEventArgs<CustomerHiddenViewModel> args)
    {
        selectedCustomerId = args.Item.Id;
        selectedInvoiceId = null;
        taskType = "hidden";
        showAddTaskModal = true;
    }

    private void DebtorRowClicked(DataGridRowClickEventArgs<DeptCustomerViewModel> args)
    {
        selectedCustomerId = args.Item.Id;
        selectedInvoiceId = null;
        taskType = "dept";
        showAddTaskModal = true;
    }

    private void InvoiceRowClicked(DataGridRowClickEventArgs<InvoiceViewModel> args)
    {
        selectedInvoiceId = args.Item.Id;
        selectedCustomerId = null;
        taskType = "uncompleted";
        showAddTaskModal = true;
    }

    private void OtherRowClicked()
    {
        selectedCustomerId = null;
        selectedInvoiceId = null;
        taskType = "other";
        showAddTaskModal = true;
    }

    private void RowRightClicked(DataGridRowClickEventArgs<CustomerHiddenViewModel> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    private void DebtorRowRightClicked(DataGridRowClickEventArgs<DeptCustomerViewModel> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    private void SelectedItemsChanged(HashSet<CustomerHiddenViewModel> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    private void SelectedDebtorItemsChanged(HashSet<DeptCustomerViewModel> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    private void InvoiceRowRightClicked(DataGridRowClickEventArgs<InvoiceViewModel> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    private void SelectedInvoiceItemsChanged(HashSet<InvoiceViewModel> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    private Func<CustomerHiddenViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (!string.IsNullOrEmpty(x.Name) && x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrEmpty(x.Type) && x.Type.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.TrackType) && x.TrackType.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.State) && x.State.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private Func<DeptCustomerViewModel, bool> _quickFilterDebtor => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchDebtorString))
            return true;

        if (!string.IsNullOrEmpty(x.CustomerName) && x.CustomerName.Contains(_searchDebtorString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrEmpty(x.TotalTransTotalN.ToString()) && x.TotalTransTotalN.ToString().Contains(_searchDebtorString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.HasRecentReceipt) && x.HasRecentReceipt.Contains(_searchDebtorString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private Func<InvoiceViewModel, bool> _quickFilterInvoice => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchInvoiceString))
            return true;

        if (!string.IsNullOrEmpty(x.CustomerName) && x.CustomerName.Contains(_searchInvoiceString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrEmpty(x.CustomerType) && x.CustomerType.Contains(_searchInvoiceString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.Id.ToString()) && x.Id.ToString().Contains(_searchInvoiceString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.InvoiceBranch) && x.InvoiceBranch.Contains(_searchInvoiceString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.TrackType) && x.TrackType.Contains(_searchInvoiceString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.State) && x.State.Contains(_searchInvoiceString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}









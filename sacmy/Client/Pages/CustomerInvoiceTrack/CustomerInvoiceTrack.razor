@page "/CustomerInvoiceTrack"
@using sacmy.Client.Pages.Components.Dialogs
@using sacmy.Client.Pages.Invoice
@using sacmy.Client.Pages.Tasks
@using sacmy.Client.Services
@using sacmy.Shared.Core
@using sacmy.Shared.ViewModels.CustomerTracker
@using System.Linq.Expressions
@using System.Net.Http
@using System.Net.Http.Json
@using sacmy.Shared.ViewModels.InvoiceViewModel
@using sacmy.Client.Pages.Components.CustomDataGrid
@using sacmy.Shared.ViewModels.TasksViewModel
@inject HttpClient Http
@inject TaskService taskService
@inject UserGlobalClass UserGlobal
<!--<h3>CustomerInvoiceTrack</h3>-->

<style>
    .custom-active-link.active {
        background-color: transparent !important;
        color: blue !important;
        border-bottom: 2px solid blue !important;
    }

    .custom-inactive-link {
        color: darkgrey;
    }

        .custom-inactive-link:hover {
            color: blue;
            border-bottom: 2px solid blue;
        }


    /* Custom DataGrid Styles */
    .custom-data-grid .mud-table-container {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 0;
    }

    .custom-data-grid table {
        background-color: #fff;
        width: 100%;
    }

    /* Adjust grid height to remove extra space */
    .custom-data-grid {
        height: auto;
    }

    .custom-data-grid tr {
        height: 60px;
    }

    .custom-data-grid tr:hover {
        background-color: #C9DEFE; /* Light blue background on hover */
    }

    .custom-data-grid tbody tr:nth-child(even) {
        background-color: #F4F9FF; /* Light grey background for even rows */}

        /* Header styling to match the example */
    .custom-data-grid th {
            background-color: #5D9EFD; /* Example header color */
            font-weight: 600;
            text-align: left;
            padding: 12px;
            border-bottom: 1px solid #64b5f6;}

    .custom-data-grid td {
        padding: 12px;
        vertical-align: middle;
    }

    .custom-data-grid .mud-switch {
        color: #007bff;
    }

    .search-field {
        max-width: 250px;
    }

    .modal-custom {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }

    .modal-lg {
        max-width: 80%; /* Increase modal width */
    }

    .modal-dialog-centered {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: calc(100vh - 1rem); /* Vertically center the modal */
    }

    .employee-image {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        margin-right: 5px;
        vertical-align: middle;
    }


</style>

<div style="padding: 10px;">
    <h3 style="margin-bottom: 40px;">@Localizer["CustomerInvoiceTasks"]</h3>

    <ul class="nav nav-underline">
        <li class="nav-item">
            <a class="nav-link @(activeTab == 1 ? "active custom-active-link" : "custom-inactive-link")"
               @onclick="() => SetActiveTab(1)">@Localizer["HiddenCustomer"]</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(activeTab == 2 ? "active custom-active-link" : "custom-inactive-link")"
               @onclick="() => SetActiveTab(2)">@Localizer["Debtor"]</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(activeTab == 3 ? "active custom-active-link" : "custom-inactive-link")"
               @onclick="() => SetActiveTab(3)">@Localizer["UnCompletedInvoice"]</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(activeTab == 4 ? "active custom-active-link" : "custom-inactive-link")"
               @onclick="() => SetActiveTab(4)">@Localizer["Customer"]</a>
        </li>
    </ul>

    @if (isLoading)
    {
        <div class="loading-overlay">
            <div class="loading-spinner"></div>
            <p class="loading-text">@Localizer["LoadingPleaseWait"]</p>
        </div>
    }
    else if (activeTab == 1 && customerData != null)
    {
        <sacmy.Client.Pages.Components.CustomDataGrid.CustomDataGrid TItem="CustomerHiddenViewModel"
                                                                     Items="@customerData"
                                                                     SearchString="@_searchString"
                                                                     OnRowClick="CustomerRowClicked"
                                                                     OnSelectedItemsChanged="SelectedItemsChanged"
                                                                     Columns="@customerColumns"
                                                                     ShowRowButton="false"
                                                                     RowButtonText="View Details"
                                                                     RowButtonTitle="Actions"
                                                                     OnRowButtonClick="@(() => Console.Write(""))" />
    }
    else if (activeTab == 2 && debtorData != null)
    {
        <sacmy.Client.Pages.Components.CustomDataGrid.CustomDataGrid TItem="DeptCustomerViewModel"
                                                                     Items="@debtorData"
                                                                     SearchString="@_searchDebtorString"
                                                                     OnRowClick="DebtorRowClicked"
                                                                     OnSelectedItemsChanged="SelectedDebtorItemsChanged"
                                                                     Columns="@debtorColumns"
                                                                     ShowRowButton="false"
                                                                     RowButtonText="View Details"
                                                                     RowButtonTitle="Actions"
                                                                     OnRowButtonClick="@(() => Console.Write(""))" />
    }
    else if (activeTab == 3 && invoiceData != null)
    {
        <sacmy.Client.Pages.Components.CustomDataGrid.CustomDataGrid TItem="InvoiceViewModel"
                                                                     Items="@invoiceData"
                                                                     SearchString="@_searchInvoiceString"
                                                                     OnRowClick="InvoiceRowClicked"
                                                                     OnSelectedItemsChanged="SelectedInvoiceItemsChanged"
                                                                     Columns="@invoiceColumns"
                                                                     ShowRowButton="false"
                                                                     RowButtonText="View Details"
                                                                     RowButtonIcon="@Icons.Material.Outlined.Details"
                                                                     RowButtonTitle="Actions"
                                                                     OnRowButtonClick="@ShowInvoiceItems" />
    }

    else
    {
        <div>@Localizer["NoDataAvailable"]</div>
    }

    <div class="modal @(showTaskModal ? "show d-block modal-custom" : "d-none")" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Localizer["TasksForCustomerOrInvoice"]</h5>
                    <button type="button" class="close" @onclick="() => showTaskModal = false" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @if (isTaskLoading)
                    {
                        <div class="loading-spinner">
                            <p>@Localizer["LoadingTasksPleaseWait"]</p>
                        </div>
                    }
                    else if (taskData != null && taskData.Any())
                    {
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>@Localizer["Title"]</th>
                                    <th>@Localizer["Type"]</th>
                                    <th>@Localizer["CreatedBy"]</th>
                                    <th>@Localizer["AssignedTo"]</th>
                                    <th>@Localizer["CreatedDate"]</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var task in taskData)
                                {
                                    <tr>
                                        <td>@task.Title</td>
                                        <td>@task.TypeEn</td>
                                        <td>
                                            <img src="@task.CreatedbyImage" alt="@Localizer["EmployeeImage"]" class="employee-image" />
                                            @task.CreatedbyName
                                        </td>
                                        <td>
                                            <img src="@task.EmployeeImage" alt="@Localizer["EmployeeImage"]" class="employee-image" />
                                            @task.AssignedToEmployee
                                        </td>
                                        <td>@task.CreatedDate.ToString("yyyy-MM-dd")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>@Localizer["NoTasksAvailable"]</p>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="ShowAddTaskModal">@Localizer["AddNewTask"]</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => showTaskModal = false">@Localizer["Close"]</button>
                </div>
            </div>
        </div>
    </div>

    <AddTaskModal IsVisible="@showAddTaskModal" IsVisibleChanged="@(value => showAddTaskModal = value)" CustomerId="selectedCustomerId" InvoiceId="selectedInvoiceId" TaskType="@taskType" />
</div>

@code {
    private int activeTab = 1;
    private bool isLoading = false;
    private List<GetTaskViewModel> taskData = new List<GetTaskViewModel>();
    private IEnumerable<CustomerHiddenViewModel> customerData = new List<CustomerHiddenViewModel>();
    private IEnumerable<DeptCustomerViewModel> debtorData = new List<DeptCustomerViewModel>();
    private IEnumerable<InvoiceViewModel> invoiceData = new List<InvoiceViewModel>();
    private string _searchString;
    private string _searchDebtorString;
    private string _searchInvoiceString;
    private bool isTaskLoading = false;
    private int? selectedCustomerId = null;
    private int? selectedInvoiceId = null;
    private bool showAddTaskModal = false;
    private bool showTaskModal = false;
    private string taskType = "other";

    [Inject] private IDialogService DialogService { get; set; }

    private async Task ShowInvoiceItems(InvoiceViewModel invoice)
    {
        var parameters = new DialogParameters
        {
            { "Invoice", invoice }
        };

        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                DisableBackdropClick = true
            };

        var dialog = await DialogService.ShowAsync<InvoiceItemDialogg>("Invoice Items", parameters, options);
        await dialog.Result;
    }

    private List<ColumnDefinition<CustomerHiddenViewModel>> customerColumns = new List<ColumnDefinition<CustomerHiddenViewModel>>
    {
        new ColumnDefinition<CustomerHiddenViewModel> { Property = x => x.Id, Title = "Id" },
        new ColumnDefinition<CustomerHiddenViewModel> { Property = x => x.Name, Title = "Full Name" },
        new ColumnDefinition<CustomerHiddenViewModel> { Property = x => x.Type, Title = "Type" },
        new ColumnDefinition<CustomerHiddenViewModel> { Property = x => x.LastDate, Title = "Last Invoice Date" },
        new ColumnDefinition<CustomerHiddenViewModel> { Property = x => x.TaskStatus, Title = "Associated Task Status" },
        new ColumnDefinition<CustomerHiddenViewModel> { Property = x => x.LastComment, Title = "Last Comment" },
    };

    private List<ColumnDefinition<DeptCustomerViewModel>> debtorColumns = new List<ColumnDefinition<DeptCustomerViewModel>>
    {
        new ColumnDefinition<DeptCustomerViewModel> { Property = x => x.Id, Title = "Id" },
        new ColumnDefinition<DeptCustomerViewModel> { Property = x => x.CustomerName, Title = "Customer Name" },
        new ColumnDefinition<DeptCustomerViewModel> { Property = x => x.TotalTransTotalN, Title = "Amount", Formatter = x => x.TotalTransTotalN.ToString("C", new System.Globalization.CultureInfo("en-US")) },
        new ColumnDefinition<DeptCustomerViewModel> { Property = x => x.HasRecentReceipt, Title = "Has Recent Receipt" },
        new ColumnDefinition<DeptCustomerViewModel> { Property = x => x.TaskStatus, Title = "Associated Task Status" },
        new ColumnDefinition<DeptCustomerViewModel> { Property = x => x.LastComment, Title = "Last Comment" },
    };

    private List<ColumnDefinition<InvoiceViewModel>> invoiceColumns = new List<ColumnDefinition<InvoiceViewModel>>
    {
        new ColumnDefinition<InvoiceViewModel> { Property = x => x.Id, Title = "Id" },
        new ColumnDefinition<InvoiceViewModel> { Property = x => x.CustomerName, Title = "Customer Name" },
        new ColumnDefinition<InvoiceViewModel> { Property = x => x.CustomerType, Title = "Customer Type" },
        new ColumnDefinition<InvoiceViewModel> { Property = x => x.Address, Title = "Address" },
        new ColumnDefinition<InvoiceViewModel> { Property = x => x.InvoiceBranch, Title = "Branch" },
        new ColumnDefinition<InvoiceViewModel> { Property = x => x.Total, Title = "Total", Formatter = x => x.Total.ToString("C", new System.Globalization.CultureInfo("en-US")) },
        new ColumnDefinition<InvoiceViewModel> { Property = x => x.DateTime, Title = "Date" },
        new ColumnDefinition<InvoiceViewModel> { Property = x => x.TaskStatus, Title = "Associated Task Status" },
        new ColumnDefinition<InvoiceViewModel> { Property = x => x.LastComment, Title = "Last Comment" },
    };

    protected override async Task OnInitializedAsync()
    {
        await SetActiveTab(activeTab);
    }

    private async Task SetActiveTab(int tabIndex)
    {
        activeTab = tabIndex;

        if (activeTab == 1)
        {
            await FetchCustomerData();
        }
        else if (activeTab == 2)
        {
            await FetchCustomerRemainTotal();
        }
        else if (activeTab == 3)
        {
            await FetchUncompletedInvoices();
        }
        else if (activeTab == 4)
        {
            await FetchCustomerData();
        }
    }

    private async Task FetchCustomerData()
    {
        isLoading = true;
        customerData = null;

        try
        {
            customerData = await Http.GetFromJsonAsync<List<CustomerHiddenViewModel>>("api/CustomerTracker/GetHiddenCustomer");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task FetchUncompletedInvoices()
    {
        isLoading = true;
        invoiceData = null;

        try
        {
            invoiceData = await Http.GetFromJsonAsync<List<InvoiceViewModel>>("api/Invoice/GetUncompleteInvoices");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task FetchCustomerRemainTotal()
    {
        isLoading = true;
        debtorData = null;

        try
        {
            debtorData = await Http.GetFromJsonAsync<List<DeptCustomerViewModel>>("api/CustomerTracker/GetCostumerRemainTotal");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowAddTaskModal()
    {
        showTaskModal = false;
        showAddTaskModal = true;
    }

    private async void CustomerRowClicked(DataGridRowClickEventArgs<CustomerHiddenViewModel> args)
    {
        selectedCustomerId = args.Item.Id;
        selectedInvoiceId = null;
        taskType = "hidden";

        // Show modal and set loading state
        showTaskModal = true;
        isTaskLoading = true;

        // Fetch tasks
        await FetchTasksByCustomerOrInvoice();

        // Stop loading
        isTaskLoading = false;
        StateHasChanged();
    }

    private async void DebtorRowClicked(DataGridRowClickEventArgs<DeptCustomerViewModel> args)
    {
        selectedCustomerId = args.Item.Id;
        selectedInvoiceId = null;
        taskType = "dept";

        showTaskModal = true;
        isTaskLoading = true;

        await FetchTasksByCustomerOrInvoice();
        isTaskLoading = false;
        StateHasChanged();
    }

    private async void InvoiceRowClicked(DataGridRowClickEventArgs<InvoiceViewModel> args)
    {
        selectedInvoiceId = args.Item.Id;
        selectedCustomerId = null;
        taskType = "uncompleted";

        showTaskModal = true;
        isTaskLoading = true;

        await FetchTasksByCustomerOrInvoice();
        isTaskLoading = false;
        StateHasChanged();
    }

    private async Task FetchTasksByCustomerOrInvoice()
    {
        taskData = await taskService.GetTasksByOrderOrCustomerAsync(UserGlobal.User.Id, selectedCustomerId, selectedInvoiceId);
    }

    private void SelectedItemsChanged(HashSet<CustomerHiddenViewModel> items) { }

    private void SelectedDebtorItemsChanged(HashSet<DeptCustomerViewModel> items) { }

    private void SelectedInvoiceItemsChanged(HashSet<InvoiceViewModel> items) { }

   


} 
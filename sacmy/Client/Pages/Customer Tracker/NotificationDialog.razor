@using Microsoft.AspNetCore.Components.Forms
@using sacmy.Shared.ViewModels.Notification
@inject NotificationClientService notificationClientService
@inject HttpClient Http

<MudDialog>
    <DialogContent>
        <MudTextField @bind-Value="Title" Label="Title" Variant="Variant.Outlined" Class="my-2" />
        <MudTextField @bind-Value="Description" Label="Description" Variant="Variant.Outlined" Lines="5" Class="my-2" />

        <MudFileUpload T="IBrowserFile" OnFilesChanged="HandleFileUpload" Accept=".png, .jpg">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload"
                           for="@context.Id">
                    Select Image
                </MudButton>
            </ButtonTemplate>
            <SelectedTemplate>
                @if (!string.IsNullOrEmpty(FileName))
                {
                    <MudText>@FileName</MudText>
                }
                else
                {
                    <MudText>No File</MudText>
                }
            </SelectedTemplate>
        </MudFileUpload>

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SendNotification" Class="mt-4">SEND</MudButton>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <MudAlert Severity="Severity.Error" Dense="true" Class="my-2">@ErrorMessage</MudAlert>
        }
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public List<string> SelectedCustomers { get; set; }

    private string Title { get; set; }
    private string Description { get; set; }
    private string FileName { get; set; }
    private byte[] FileContent { get; set; }
    private string ErrorMessage { get; set; }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            FileName = file.Name;
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            FileContent = buffer;
        }
    }

    private async Task SendNotification()
    {
        if (string.IsNullOrEmpty(Title) || string.IsNullOrEmpty(Description))
        {
            ErrorMessage = "يجب كتابة العنوان والوصف قبل الحفظ";
            return;
        }

        ErrorMessage = string.Empty;

        try
        {
            var request = new NotificationRequestViewModel
                {
                    Title = Title,
                    Body = Description,
                    FirebaseTokens = SelectedCustomers,
                    ImageBase64 = FileContent != null ? Convert.ToBase64String(FileContent) : null,
                    employeeNotification = false
                };

            await notificationClientService.SendNotificationAsync(request);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            ErrorMessage = "An error occurred while sending the notification: " + ex.Message;
        }
    }
}
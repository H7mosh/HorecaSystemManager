@page "/CustomerTracker"
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using sacmy.Shared.Core
@using sacmy.Shared.ViewModels.CustomerTracker
@using MudBlazor
@using sacmy.Shared.ViewModels.CustomerViewModel
@using sacmy.Shared.ViewModels.InvoiceViewModel
@using sacmy.Shared.ViewModels.TrackViewModel
@using sacmy.Shared.ViewModels.UserViewModel
@inject HttpClient Http
@inject UserGlobalClass UserGlobal
@inject IDialogService DialogService

<style>
 .search-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
        margin-top: 20px;
        padding: 10px;
        width: 100%;
    }

    .search-box {
        display: flex;
        align-items: center;
        background-color: #fff;
        border-radius: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        padding: 5px 10px;
        width: 100%;
        max-width: 400px;
    }

    .search-input {
        width: 100%;
        padding: 10px;
        border: none;
        outline: none;
        border-radius: 20px;
        font-size: 1em;
        background-color: transparent;
    }

    .search-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 10px;
        font-size: 1.2em;
        color: #777;
    }

    .search-icon svg {
        width: 24px;
        height: 24px;
    }

    .btn-send {
        padding: 10px 20px;
        background-color: #6200ea;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1em;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        transition: background-color 0.3s ease;
    }

    .btn-send:hover {
        background-color: #3700b3;
    }
</style>

<div class="search-container">
    <button class="btn-send" @onclick="OpenNotificationDialog">Send Notification</button>

    <div class="search-box">
        <input type="text" class="search-input" placeholder="اكتب للبحث" @bind="searchTerm" @oninput="Search" />
        <div class="search-icon">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                <path d="M10 2C5.58 2 2 5.58 2 10s3.58 8 8 8c1.54 0 2.98-.46 4.19-1.24l5.39 5.39 1.42-1.42-5.39-5.39C17.54 12.98 18 11.54 18 10c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6z" />
            </svg>
        </div>
    </div>
</div>

<div class="customer-tracker">
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="All Tracks" OnClick="LoadTrack">
            @if (isLoading)
            {
                <div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
                    <MudProgressCircular Color="MudBlazor.Color.Primary" Indeterminate="true" />
                </div>
            }
            else
            {
                <MudTable Hover="true" Breakpoint="Breakpoint.Sm" Height="500px" FixedHeader="true"
                          Items="@filteredTrackList"
                          GroupBy="@_groupDefinition"
                          GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
                          GroupFooterClass="mb-4"
                          Dense="true"
                          @ref="_tableRef">
                    <ColGroup>
                        <col style="width: 60px;" />
                        <col />
                        <col />
                        <col />
                        <col />
                        <col />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>Customer</MudTh>
                        <MudTh>TrackType</MudTh>
                        <MudTh>Created By</MudTh>
                        <MudTh>Assigned To</MudTh>
                        <MudTh>Rescheduled To</MudTh>
                        <MudTh>State</MudTh>
                    </HeaderContent>
                    <GroupHeaderTemplate>
                        <MudTh Class="mud-table-cell-custom-group" colspan="6">@($"{context.GroupName}: {context.Key}") </MudTh>
                    </GroupHeaderTemplate>
                    <RowTemplate>
                        <MudTd DataLabel="Customer" onclick="@(() => OnRowClick(context.Id))">@context.CustomerName</MudTd>
                        <MudTd DataLabel="TrackType" onclick="@(() => OnRowClick(context.Id))">@context.Type</MudTd>
                        <MudTd DataLabel="Created By" onclick="@(() => OnRowClick(context.Id))">@context.EmployeeName</MudTd>
                        <MudTd DataLabel="Assigned To" onclick="@(() => OnRowClick(context.Id))">@context.AssignedToName</MudTd>
                        <MudTd DataLabel="Rescheduled To" onclick="@(() => OnRowClick(context.Id))">@context.ReschedueldAt</MudTd>
                        <MudTd DataLabel="State" onclick="@(() => OnRowClick(context.Id))">@context.State</MudTd>
                        <MudTd><MudButton Variant="Variant.Outlined" Size="MudBlazor.Size.Small" OnClick="@(() => OnRowClick(context.Id))">Details</MudButton></MudTd>
                    </RowTemplate>
                    <GroupFooterTemplate>
                        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="6">Total: @context.Items.Count()</MudTh>
                    </GroupFooterTemplate>
                </MudTable>
            }
        </MudTabPanel>
        <MudTabPanel Text="Hidden Customer" OnClick="LoadHiddenCustomer">
            @if (isLoading)
            {
                <div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
                    <MudProgressCircular Color="MudBlazor.Color.Primary" Indeterminate="true" />
                </div>
            }
            else
            {
                <MudDataGrid T="CustomerHiddenViewModel" Items="@filteredRetailHiddenCustomer" RowClick="HiddenCustomerRowClicked" Filterable="true" Virtualize="true" Striped="true" FixedHeader="true" Height="60VH"
                             ColumnResizeMode="ResizeMode.None" Bordered="false" Outlined="true" SortMode="SortMode.Single" FilterMode="DataGridFilterMode.Simple"
                             Hover="true">
                    <Columns>
                        <MudBlazor.PropertyColumn Property="x => x.Id" Title="Id" />
                        <MudBlazor.PropertyColumn Property="x => x.Name" Title="Name" />
                        <MudBlazor.PropertyColumn Property="x => x.Type" Title="Type" />
                        <MudBlazor.PropertyColumn Property="x => x.LastDate" Title="LastInvoiceDate" />
                    </Columns>
                </MudDataGrid>
            }
        </MudTabPanel>
        <MudTabPanel Text="Debtor" OnClick="LoadDepatorCustomer">
            @if (isLoading)
            {
                <div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
                    <MudProgressCircular Color="MudBlazor.Color.Primary" Indeterminate="true" />
                </div>
            }
            else
            {
                <MudDataGrid T="DeptCustomerViewModel" Items="@filteredCustomerTransTotalList" RowClick="DeptCustomerRowClicked" Filterable="true" Virtualize="true" Striped="true" FixedHeader="true" Height="60VH"
                             ColumnResizeMode="ResizeMode.None" Bordered="false" Outlined="true" SortMode="SortMode.Single" FilterMode="DataGridFilterMode.Simple"
                             Hover="true">
                    <Columns>
                        <MudBlazor.PropertyColumn Property="x => x.CustomerName" Title="Name" />
                        <MudBlazor.PropertyColumn Property="x => x.TotalTransTotalN" Title="TotalTransTotalN" />
                        <MudBlazor.PropertyColumn Property="x => x.HasRecentReceipt" Title="HasRecentReceipt" />
                    </Columns>
                </MudDataGrid>
            }
        </MudTabPanel>
        <MudTabPanel Text="UnCompleted Invoice" OnClick="LoadUnCompleteInvoices">
            @if (isLoading)
            {
                <div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
                    <MudProgressCircular Color="MudBlazor.Color.Primary" Indeterminate="true" />
                </div>
            }
            else
            {
                <MudDataGrid T="InvoiceViewModel" Items="@UnCompeleteInvoiceList" RowClick="UnCompletedRowClicked" Filterable="true" Virtualize="true" Striped="true" FixedHeader="true" Height="60VH"
                             ColumnResizeMode="ResizeMode.None" Bordered="false" Outlined="true" SortMode="SortMode.Single" FilterMode="DataGridFilterMode.Simple"
                             Hover="true">
                    <Columns>
                        <MudBlazor.PropertyColumn Property="x => x.Id" Title="Invoice Id" />
                        <MudBlazor.PropertyColumn Property="x => x.CustomerName" Title="Customer" />
                        <MudBlazor.PropertyColumn Property="x => x.Total" Title="Total" />
                        <MudBlazor.PropertyColumn Property="x => x.DateTime" Title="Created Date" />
                       
                    </Columns>
                </MudDataGrid>
            }
        </MudTabPanel>
        <MudTabPanel Text="Customer" OnClick="LoadCustomers">
            @if (isLoading)
            {
                <div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
                    <MudProgressCircular Color="MudBlazor.Color.Primary" Indeterminate="true" />
                </div>
            }
            else
            {
                <MudDataGrid T="CustomerViewModel" Items="@filteredCustomers" RowClick="CustomerRowClicked" Filterable="true" Virtualize="true" Striped="true" FixedHeader="true" Height="60VH"
                             ColumnResizeMode="ResizeMode.None" Bordered="false" Outlined="true" SortMode="SortMode.Single" FilterMode="DataGridFilterMode.Simple"
                             Hover="true" SelectedItemsChanged="@SelectedItemsChanged">
                    <Columns>
                        <SelectColumn T="CustomerViewModel"/>
                        <MudBlazor.PropertyColumn Property="x => x.Id" Title="Id" />
                        <MudBlazor.PropertyColumn Property="x => x.Name" Title="Name" />
                        <MudBlazor.PropertyColumn Property="x => x.PhoneNumber" Title="PhoneNumber" />
                        <MudBlazor.PropertyColumn Property="x => x.Address" Title="Address" />
                        <MudBlazor.PropertyColumn Property="x => x.DeviceId" Title="Device Id" />
                        <MudBlazor.PropertyColumn Property="x => x.UserName" Title="UserName" />
                        <MudBlazor.PropertyColumn Property="x => x.Password" Title="Password" />
                        <MudBlazor.PropertyColumn Property="x => x.ConstProfit" Title="Profit" />
                        <MudBlazor.PropertyColumn Property="x => x.ProfitPercentage" Title="Percentage" />
                        <MudBlazor.PropertyColumn Property="x => x.ExtraProfitPercentage" Title="Extra Percentage" />
                        <MudBlazor.PropertyColumn Property="x => x.Active" Title="IsActive" />
                    </Columns>
                </MudDataGrid>
            }
        </MudTabPanel>
    </MudTabs>
</div>

@code {
    private bool isLoading = false;

    private List<string> selected_customer_tokens = new();

    private UserViewModel CurrentUser => UserGlobal.User;
    private List<CustomerHiddenViewModel> allHiddenCustomer = new List<CustomerHiddenViewModel>();
    private List<CustomerHiddenViewModel> retailHiddenCustomer = new List<CustomerHiddenViewModel>();
    private List<CustomerHiddenViewModel> horecaHiddenCustomer = new List<CustomerHiddenViewModel>();
    private List<DeptCustomerViewModel> customerTransTotalList = new List<DeptCustomerViewModel>();
    private List<CustomerViewModel> Customers = new List<CustomerViewModel>();
    private List<GetTrackViewModel> trackList = new List<GetTrackViewModel>();
    private List<GetTrackViewModel> filteredTrackList => string.IsNullOrWhiteSpace(searchTerm) ? trackList : trackList.Where(t => t.CustomerName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    private List<CustomerHiddenViewModel> filteredRetailHiddenCustomer => string.IsNullOrWhiteSpace(searchTerm) ? retailHiddenCustomer : retailHiddenCustomer.Where(c => c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    private List<DeptCustomerViewModel> filteredCustomerTransTotalList => string.IsNullOrWhiteSpace(searchTerm) ? customerTransTotalList : customerTransTotalList.Where(d => d.CustomerName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    private List<CustomerViewModel> filteredCustomers => string.IsNullOrWhiteSpace(searchTerm) ? Customers : Customers.Where(c => c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    private List<InvoiceViewModel> UnCompeleteInvoiceList = new List<InvoiceViewModel>();
    private string searchTerm = "";

    CustomerViewModel SelectedCustomer = new CustomerViewModel();
    CustomerHiddenViewModel SelectedHiddenCustomer = new CustomerHiddenViewModel();
    DeptCustomerViewModel SelectedDeptCustomer = new DeptCustomerViewModel();
    InvoiceViewModel SelectedUnCompletedInvoice = new InvoiceViewModel();
    TrackViewModel trackViewModel = new TrackViewModel();

    private MudTable<GetTrackViewModel> _tableRef;

    private TableGroupDefinition<GetTrackViewModel> _groupDefinition = new()
        {
            GroupName = "Category",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (e) => e.Category
        };

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await LoadTrack();
        isLoading = false;
    }

    private async Task LoadTrack()
    {
        isLoading = true;
        var userId = CurrentUser.Id;
        trackList = await Http.GetFromJsonAsync<List<GetTrackViewModel>>($"api/CustomerTracker?userId={userId}");
        isLoading = false;
    }

    private void CustomerRowClicked(DataGridRowClickEventArgs<CustomerViewModel> args)
    {
        SelectedCustomer = args.Item;
        trackViewModel.CustomerId = SelectedCustomer.Id;
        AddNewTrackDialog();
    }

    private void HiddenCustomerRowClicked(DataGridRowClickEventArgs<CustomerHiddenViewModel> args)
    {
        SelectedHiddenCustomer = args.Item;
        trackViewModel.CustomerId = SelectedHiddenCustomer.Id;
        var parameters = new DialogParameters
        {
            ["CustomerId"] = SelectedHiddenCustomer.Id,
            ["InvoiceId"]  =  0,
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, CloseButton = true, FullWidth = true };

        var dialogResult = DialogService.Show<AllCustomerTrack>("All Customer Tracks", parameters, options);
    }

    private void DeptCustomerRowClicked(DataGridRowClickEventArgs<DeptCustomerViewModel> args)
    {
        SelectedDeptCustomer = args.Item;
        CustomerViewModel customer = Customers.FirstOrDefault(e => e.Name == SelectedDeptCustomer.CustomerName);
        trackViewModel.CustomerId = customer.Id;
        AddNewTrackDialog();
    }

    private void UnCompletedRowClicked(DataGridRowClickEventArgs<InvoiceViewModel> args)
    {
        SelectedUnCompletedInvoice = args.Item;
        
        var parameters = new DialogParameters
        {
            ["CustomerId"] = 0,
            ["InvoiceId"] = SelectedUnCompletedInvoice.Id,
            
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, CloseButton = true, FullWidth = true };

        var dialogResult = DialogService.Show<AllCustomerTrack>("All Customer Tracks", parameters, options);
    }

    private void AddNewTrackDialog()
    {
        var parameters = new DialogParameters
        {
            ["trackViewModel"] = trackViewModel
        };

        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialogResult = DialogService.Show<AddTrackDialog>(
            "Add Track",
            parameters,
            options
        );
    }

    private async Task LoadHiddenCustomer()
    {
        if (retailHiddenCustomer.Count == 0)
        {
            isLoading = true;
            allHiddenCustomer = await Http.GetFromJsonAsync<List<CustomerHiddenViewModel>>("api/CustomerTracker/GetHiddenCustomer");
            horecaHiddenCustomer = allHiddenCustomer.Where(e => e.Type == "horeka").ToList();
            retailHiddenCustomer = allHiddenCustomer.Where(e => e.Type == "Retail" || e.Type == "Normal").ToList();
            isLoading = false;
        }
    }

    private async Task LoadDepatorCustomer()
    {
        if (customerTransTotalList.Count == 0)
        {
            isLoading = true;
            customerTransTotalList = await Http.GetFromJsonAsync<List<DeptCustomerViewModel>>("api/CustomerTracker/GetCostumerRemainTotal");
            isLoading = false;
        }
    }

    private async Task LoadCustomers()
    {
        if (Customers.Count == 0)
        {
            isLoading = true;
            Customers = await Http.GetFromJsonAsync<List<CustomerViewModel>>("api/Customer");
            isLoading = false;
        }
    }

    private async Task LoadUnCompleteInvoices()
    {
        if (UnCompeleteInvoiceList.Count == 0)
        {
            isLoading = true;
            UnCompeleteInvoiceList = await Http.GetFromJsonAsync<List<InvoiceViewModel>>("api/Invoice/GetUncompleteInvoices");
            isLoading = false;
        }
    }

    private void Search(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
    }

    void SelectedItemsChanged(HashSet<CustomerViewModel> customers)
    {
        foreach (CustomerViewModel customer in customers)
        {
            selected_customer_tokens.Add(customer.FirebaseToken);
        }
    }

    private void OpenNotificationDialog()
    {
        var parameters = new DialogParameters
        {
            ["SelectedCustomers"] = selected_customer_tokens,
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, CloseButton = true, FullWidth = true };

        var dialogResult = DialogService.Show<NotificationDialog>("Send Notification", parameters, options);
    }

    private void OpenTrackCommentsDialog(Guid trackId)
    {
        var parameters = new DialogParameters { ["TrackId"] = trackId };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium };

        var dialog = DialogService.Show<CheckTrackDialog>("Check Track Dialog", parameters, options);
    }

    private void OnRowClick(Guid trackId)
    {
        OpenTrackCommentsDialog(trackId);
    }

}



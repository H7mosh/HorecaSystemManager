@page "/trackdialog/{TrackId:guid}"
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using sacmy.Shared.Core
@using sacmy.Shared.ViewModels.CustomerTracker
@using sacmy.Shared.ViewModels.EmployeeViewModel
@using sacmy.Shared.ViewModels.Notification
@using sacmy.Shared.ViewModels.TrackViewModel
@using sacmy.Shared.ViewModels.UserViewModel
@inject HttpClient Http
@inject UserGlobalClass UserGlobal
@inject NotificationClientService notificationClientService

<style>
    .track-dialog {
        max-width: 1200px;
        min-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .card {
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        padding: 20px;
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

        .card-header span {
            font-weight: bold;
            font-size: 0.9em;
        }

        .card-header .avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            object-fit: cover;
        }

    .card-body {
        background-color: #f5f5f5;
        border-radius: 10px;
        padding: 15px;
    }

        .card-body span {
            display: block;
            font-weight: bold;
            margin-bottom: 10px;
        }

    .custom-select,
    .custom-textarea {
        width: 100%;
        padding: 10px;
        margin-top: 10px;
        border-radius: 5px;
        border: 1px solid #ccc;
    }

    .btn-save {
        display: block;
        width: 100%;
        padding: 10px;
        background-color: #6200ea;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1.2em;
    }

        .btn-save:hover {
            background-color: #3700b3;
        }

    .form-group {
        margin-top: 10px;
    }

    .scrollable-comments {
        max-height: 300px;
        overflow-y: auto;
    }

    .card-green {
        background-color: #d4edda;
    }

    .card-red {
        background-color: #f8d7da;
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }
</style>

<div class="track-dialog">
    @if (isLoading)
    {
        <div class="loading-overlay">
            <div>Loading...</div>
        </div>
    }

    <div class="scrollable-comments">
        @if (trackComments != null && trackComments.Any())
        {
            @foreach (var comment in trackComments)
            {
                <div class="card @(comment.State == "مفتوحه" ? "card-green" : "card-red")">
                    <div class="card-header">
                        <span>@comment.EmployeeName</span>
                        <img src="@comment.EmployeeImage" alt="Employee Image" class="avatar" />
                    </div>
                    <div class="card-body">
                        <span>@comment.State</span>
                        <p>@comment.Comment</p>
                    </div>
                </div>
            }
        }
        else
        {
            <p>Loading comments...</p>
        }
    </div>

    <select class="custom-select mt-4" @bind="selectedTrackTypeId">
        <option value="">Select a track type...</option>
        @if (trackCommentsType != null)
        {
            @foreach (var trackCommentType in trackCommentsType)
            {
                <option value="@trackCommentType.Id">@trackCommentType.StateAr</option>
            }
        }
    </select>

    @if (showTrackTypeError)
    {
        <MudAlert Severity="Severity.Error" Dense="true" Class="my-2">Please select a track type</MudAlert>
    }

    <textarea class="custom-textarea mt-4" placeholder="تعليقك" @bind="comment"></textarea>

    @if (showCommentError)
    {
        <MudAlert Severity="Severity.Error" Dense="true" Class="my-2">Please enter a comment</MudAlert>
    }

    <div class="form-group">
        <input type="checkbox" id="assignToNextEmployee" @bind="assignToNextEmployee" />
        <label for="assignToNextEmployee">أسناد إلى موظف ثاني</label>
    </div>

    @if (assignToNextEmployee)
    {
        <select class="custom-select mt-4" @bind="selectedEmployeeId">
            @if (employees != null)
            {
                @foreach (var employee in employees)
                {
                    <option value="@employee.Id">@employee.FirstName @employee.LastName</option>
                }
            }
        </select>
    }

    @if (!assignToNextEmployee)
    {
        <div class="form-group">
            <input type="checkbox" id="isDelayed" @bind="isDelayed" />
            <label for="isDelayed">تأجيل</label>
        </div>

        @if (isDelayed)
        {
            <input type="datetime-local" class="custom-select mt-4" @bind="delayDate" />
        }
    }

    <button class="btn-save mt-4" @onclick="Save">SAVE</button>
</div>

@code {
    private UserViewModel CurrentUser => UserGlobal.User;
    [Parameter]
    public Guid TrackId { get; set; }
    private List<GetCustomerTrackComment> trackComments;
    private List<CommentTrackStateViewModel> trackCommentsType;
    private List<GetEmployeeViewModel> employees;
    private Guid selectedTrackTypeId;
    private Guid? selectedEmployeeId;
    private string comment;
    private bool assignToNextEmployee = false;
    private bool isDelayed = false;
    private DateTime? delayDate;
    private bool isLoading = false;
    private bool showTrackTypeError = false;
    private bool showCommentError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTrackComments();
        await LoadTrackState();
        await LoadEmployees();
    }

    private async Task LoadTrackComments()
    {
        try
        {
            trackComments = await Http.GetFromJsonAsync<List<GetCustomerTrackComment>>($"api/CustomerTracker/GetTrackComments?TrackId={TrackId}");
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error fetching track comments: {ex.Message}");
        }
    }

    private async Task LoadTrackState()
    {
        var response = await Http.GetAsync("api/CustomerTracker/GetTrackState");
        if (response.IsSuccessStatusCode)
        {
            trackCommentsType = await response.Content.ReadFromJsonAsync<List<CommentTrackStateViewModel>>();
        }
        else
        {
            // Handle error response
        }
    }

    private async Task LoadEmployees()
    {
        var response = await Http.GetAsync("api/Employee");
        if (response.IsSuccessStatusCode)
        {
            employees = await response.Content.ReadFromJsonAsync<List<GetEmployeeViewModel>>();
        }
        else
        {
            // Handle error response
        }
    }

    private async Task Save()
    {
        // Reset error states
        showTrackTypeError = false;
        showCommentError = false;

        // Validate inputs
        if (selectedTrackTypeId == Guid.Empty)
        {
            showTrackTypeError = true;
        }
        if (string.IsNullOrWhiteSpace(comment))
        {
            showCommentError = true;
        }
        if (showTrackTypeError || showCommentError)
        {
            return;
        }

        isLoading = true;

        var addCommentToExisingTrack = new AddCommentToExisingTrack
            {
                TrackId = TrackId,
                Comment = comment,
                AssignTo = assignToNextEmployee ? selectedEmployeeId : null,
                RescheduledAt = isDelayed ? delayDate : null,
                EmpId = CurrentUser.Id,
                StateId = selectedTrackTypeId
            };

        var response = await Http.PostAsJsonAsync("api/CustomerTracker/AddTrackStateToExistTrack", addCommentToExisingTrack);
        if (response.IsSuccessStatusCode)
        {
            if (assignToNextEmployee)
            {


                var request = new NotificationRequestViewModel
                    {
                        Title = "مهمه جديده",
                        Body = CurrentUser.FirstName + " " + CurrentUser.LastName + "  أضافة مهمه على أسمك يرجى متابعتها  ",
                        FirebaseTokens = employees.Where(e => e.Id == selectedEmployeeId).Select(e => e.FirebaseToken.ToString()).ToList(),
                        ImageBase64 = null,
                        employeeNotification = true,
                    };

                await notificationClientService.SendNotificationAsync(request);
            }
            await LoadTrackComments();
        }
        else
        {
            // Handle error response
            Console.WriteLine($"Error saving track state: {response.ReasonPhrase}");
        }
        isLoading = false;
    }
}






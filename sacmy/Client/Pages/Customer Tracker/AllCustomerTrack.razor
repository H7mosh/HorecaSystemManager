@using sacmy.Shared.ViewModels.CustomerTracker
@using sacmy.Shared.ViewModels.TrackViewModel
@inject HttpClient Http
@inject IDialogService DialogService

<style>
    .customer-tracks-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        padding: 20px;
        width: 100%;
    }

    .customer-tracks {
        flex: 1;
        overflow-y: auto;
    }

    .track {
        display: flex;
        align-items: center;
        border: 1px solid #ddd;
        margin-bottom: 10px;
        padding: 20px;
        border-radius: 5px;
        position: relative;
        background-color: #f9f9f9;
        width: calc(100% - 40px); /* Adjust this as necessary */
    }

        .track .track-icon {
            width: 50px;
            height: 50px;
            display: flex;
            justify-content: center;
            align-items: center;
            margin-right: 20px;
        }

        .track .track-info {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

            .track .track-info .track-comment {
                font-size: 1.5em;
                font-weight: bold;
                color: #333;
                cursor: pointer; /* Add pointer cursor */
            }

            .track .track-info .track-date {
                font-size: 1em;
                color: #777;
                margin-top: 5px;
            }

            .track .track-info .track-employee {
                font-size: 1em;
                color: #555;
                margin-top: 5px;
            }

        .track .track-state {
            font-weight: bold;
            position: absolute;
            right: 0;
            top: 0;
            padding: 10px 15px;
            border-radius: 0 5px 5px 0;
            color: white;
            font-size: 1.2em;
        }

        .track.Open .track-state {
            background-color: #4caf50;
        }

        .track.Closed .track-state {
            background-color: #f44336;
        }

    .add-track-button {
        margin-top: 10px;
        align-self: center;
        background-color: #4caf50;
        color: white;
        padding: 15px 30px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1.2em;
        width: 90%;
    }

        .add-track-button:hover {
            background-color: #45a049;
        }

    .dialog-content {
        padding: 0;
    }
</style>

<MudDialog MaxWidth="MaxWidth.Large">
    <DialogContent>
        @if (isLoading)
        {
            <div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
                <MudProgressCircular Color="MudBlazor.Color.Primary" Indeterminate="true" />
            </div>
        }
        else
        {
            <div class="customer-tracks-container">
                @if (CustomerTracks == null || CustomerTracks.Count == 0)
                {
                    @if (InvoiceTracks != null)
                    {
                        <div class="customer-tracks">
                            @foreach (var track in InvoiceTracks)
                            {
                                <div class="track @track.Type">
                                    <div class="track-icon">
                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="50" height="50">
                                            <path d="M12 4.5C7.305 4.5 3.402 7.795 2 12c1.402 4.205 5.305 7.5 10 7.5s8.598-3.295 10-7.5c-1.402-4.205-5.305-7.5-10-7.5zm0 13c-2.755 0-5-2.245-5-5s2.245-5 5-5 5 2.245 5 5-2.245 5-5 5zM12 8.5c-1.93 0-3.5 1.57-3.5 3.5s1.57 3.5 3.5 3.5 3.5-1.57 3.5-3.5-1.57-3.5-3.5-3.5z" />
                                        </svg>
                                    </div>
                                    <div class="track-info" @onclick="() => OpenTrackCommentsDialog(track.TrackId)">
                                        <div class="track-comment">@track.Type</div>
                                        <div class="track-date">@track.CreatedDate?.ToString("yyyy-MM-dd hh:mm tt")</div>
                                        <div class="track-employee">@track.EmployeeName</div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Warning" Dense="true" Class="my-2">
                            هل يوجد اي تتبع على هذا لزبون . من فضلك اضغط على جديد لاضافة تتبع
                    </MudAlert>
                    }
                }
                else
                {
                    <div class="customer-tracks">
                        @foreach (var track in CustomerTracks)
                        {
                            <div class="track @track.Type">
                                <div class="track-icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="50" height="50">
                                        <path d="M12 4.5C7.305 4.5 3.402 7.795 2 12c1.402 4.205 5.305 7.5 10 7.5s8.598-3.295 10-7.5c-1.402-4.205-5.305-7.5-10-7.5zm0 13c-2.755 0-5-2.245-5-5s2.245-5 5-5 5 2.245 5 5-2.245 5-5 5zM12 8.5c-1.93 0-3.5 1.57-3.5 3.5s1.57 3.5 3.5 3.5 3.5-1.57 3.5-3.5-1.57-3.5-3.5-3.5z" />
                                    </svg>
                                </div>
                                <div class="track-info" @onclick="() => OpenTrackCommentsDialog(track.TrackId)">
                                    <div class="track-comment">@track.Type</div>
                                    <div class="track-date">@track.CreatedDate?.ToString("yyyy-MM-dd hh:mm tt")</div>
                                    <div class="track-employee">@track.EmployeeName</div>
                                </div>
                            </div>
                        }
                    </div>
                }
                <button class="add-track-button" @onclick="HandleAddTrackButtonClick">جديد</button>
            </div>
        }
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance _dialog { get; set; }
    [Parameter] public int CustomerId { get; set; }
    [Parameter] public int InvoiceId { get; set; }
    private bool isLoading = true;
    private List<GetCustomerTrackViewModel> CustomerTracks = new List<GetCustomerTrackViewModel>();
    private List<GetInvoiceTrackViewModel> InvoiceTracks = new List<GetInvoiceTrackViewModel>();
    private TrackViewModel trackViewModel = new TrackViewModel();

    protected override async Task OnInitializedAsync()
    {
        if (CustomerId != 0)
        {
            await LoadCustomerTracks();
        }
        else
        {
            await LoadInvoiceTrack();
        }
    }

    private async Task LoadCustomerTracks()
    {
        try
        {
            isLoading = true;
            CustomerTracks = await Http.GetFromJsonAsync<List<GetCustomerTrackViewModel>>($"api/CustomerTracker/GetCustomerTrack?customerId={CustomerId}");
            isLoading = false;
        }
        catch (Exception ex)
        {
            // Handle error
            isLoading = false;
        }
    }

    private async Task LoadInvoiceTrack()
    {
        try
        {
            isLoading = true;
            InvoiceTracks = await Http.GetFromJsonAsync<List<GetInvoiceTrackViewModel>>($"api/Invoice/GetInvoiceTrack?invoiceId={InvoiceId}");
            isLoading = false;
        }
        catch (Exception ex)
        {
            // Handle error
            isLoading = false;
        }
    }

    private async Task HandleAddTrackButtonClick()
    {
        // Close the current dialog
        _dialog.Close();

        // Open the new dialog
        await Task.Delay(500); // Optional: add a slight delay to ensure the current dialog is fully closed

        OpenDialog();
    }

    private void OpenDialog()
    {
        if (CustomerId != 0)
        {
            trackViewModel.CustomerId = CustomerId;
        }
        else
        {
            trackViewModel.InvoiceId = InvoiceId;
        }
        var parameters = new DialogParameters
            {
                ["trackViewModel"] = trackViewModel,
            };

        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialogResult = DialogService.Show<AddTrackDialog>(
            "Add New Track",
            parameters,
            options
        );
    }

    private void OpenTrackCommentsDialog(Guid trackId)
    {
        var parameters = new DialogParameters { 
            ["TrackId"] = trackId ,
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium };

        var dialog = DialogService.Show<CheckTrackDialog>("Check Track Dialog", parameters, options);
    }

    private void Cancel() => _dialog.Cancel();
}




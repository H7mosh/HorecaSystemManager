@using System.Linq.Expressions
@typeparam TItem
@using sacmy.Client.Pages.Components.CustomDataGrid
@using sacmy.Client.Services
@using sacmy.Shared.Core
@using sacmy.Shared.ViewModels.CustomerTracker
@using sacmy.Shared.ViewModels.InvoiceViewModel
@using sacmy.Shared.ViewModels.TasksViewModel
@inject UserGlobalClass UserGlobal
@inject IJSRuntime JSRuntime
@inject TaskService TaskService


<style>
:root {
    --page-bg: #f8fafc;
    --card-bg: #ffffff;
    --primary: #3b82f6;
    --primary-light: #60a5fa;
    --primary-dark: #2563eb;
    --gray-50: #f9fafb;
    --gray-100: #f3f4f6;
    --gray-200: #e5e7eb;
    --gray-300: #d1d5db;
    --gray-600: #4b5563;
    --gray-700: #374151;
    --text-primary: #1f2937;
    --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);
    --radius-lg: 0.75rem;
    --radius-md: 0.5rem;
}

/* Page Container */
.page-container {
    background-color: var(--page-bg);
    min-height: 100vh;
    padding: 1.5rem;
}

/* Grid Card Container */
.grid-card {
    background-color: var(--card-bg);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-md);
    padding: 1.5rem;
    margin-bottom: 2rem;
}

/* DataGrid Styling */
.custom-data-grid {
    border: none !important;
    background-color: var(--card-bg);
}

/* Toolbar Styling */
.mud-toolbar {
    padding: 1rem 1.5rem !important;
    background-color: var(--card-bg) !important;
    border-bottom: 1px solid var(--gray-200);
    min-height: 70px !important;
}

/* Search Field Styling */
.search-field {
    min-width: 300px !important;
    margin-left: 1rem;
}

.search-field .mud-input {
    border-radius: var(--radius-md) !important;
    background-color: var(--gray-50) !important;
    transition: all 0.2s ease;
}

.search-field .mud-input:hover {
    background-color: var(--gray-100) !important;
}

.search-field .mud-input-outlined-border {
    border-color: var(--gray-200) !important;
}

.search-field .mud-input.mud-input-focused {
    background-color: var(--card-bg) !important;
}

.search-field .mud-input-adornment {
    color: var(--gray-600) !important;
}

/* Table Header Styling */
.mud-table-head {
    background-color: var(--gray-50) !important;
}

.mud-table-head th {
    color: var(--gray-700) !important;
    font-weight: 600 !important;
    font-size: 0.875rem !important;
    text-transform: none !important;
    padding: 1rem !important;
    border-bottom: 2px solid var(--gray-200) !important;
}

/* Table Body Styling */
.mud-table-body td {
    padding: 1rem !important;
    color: var(--text-primary) !important;
    font-size: 0.875rem !important;
    border-bottom: 1px solid var(--gray-200) !important;
}

.mud-table-row {
    transition: background-color 0.2s ease !important;
}

.mud-table-row:hover {
    background-color: var(--gray-50) !important;
}

/* Pagination Styling */
.mud-table-pagination {
    background-color: var(--gray-50) !important;
    border-top: 1px solid var(--gray-200) !important;
    padding: 0.75rem 1.5rem !important;
}

.mud-table-pagination-caption {
    color: var(--gray-600) !important;
    font-size: 0.875rem !important;
}

.mud-table-pagination .mud-button {
    border-radius: var(--radius-md) !important;
}

/* Selection Checkbox Styling */
.mud-checkbox {
    color: var(--primary) !important;
}

.mud-checkbox-checked {
    color: var(--primary) !important;
}

/* Column Header Icons */
.mud-table-sort-label {
    font-weight: 600 !important;
}

.mud-table-sort-label .mud-icon-root {
    color: var(--gray-600) !important;
}

/* Loading Overlay */
.mud-overlay-dark {
    background-color: rgba(0, 0, 0, 0.1) !important;
}

.mud-progress-circular {
    color: var(--primary) !important;
}

/* Empty State */
.mud-table-empty {
    padding: 3rem !important;
    text-align: center !important;
    color: var(--gray-600) !important;
}

/* Responsive Adjustments */
@@media (max-width: 768px) {
    .page-container {
        padding: 1rem;
    }
    
    .grid-card {
        padding: 1rem;
    }
    
    .mud-toolbar {
        padding: 1rem !important;
        flex-direction: column;
        gap: 1rem;
        align-items: stretch !important;
    }
    
    .search-field {
        min-width: 100% !important;
        margin-left: 0;
    }
    
    .mud-table-head th {
        padding: 0.75rem !important;
    }
    
    .mud-table-body td {
        padding: 0.75rem !important;
    }
}

/* Animation for Row Selection */
.mud-selected {
    animation: selectPulse 0.4s ease-out;
}

@@keyframes selectPulse {
    0% {
        background-color: var(--primary-light);
        opacity: 0.1;
    }
    100% {
        background-color: var(--gray-100);
    }
}

/* Enhanced Scrollbar */
.mud-table-container {
    scrollbar-width: thin;
    scrollbar-color: var(--gray-300) transparent;
}

.mud-table-container::-webkit-scrollbar {
    width: 6px;
    height: 6px;
}

.mud-table-container::-webkit-scrollbar-track {
    background: transparent;
}

.mud-table-container::-webkit-scrollbar-thumb {
    background-color: var(--gray-300);
    border-radius: 3px;
}

.mud-table-container::-webkit-scrollbar-thumb:hover {
    background-color: var(--gray-400);
}

/* Print Styles */
@@media print {
    .page-container {
        padding: 0;
        background-color: white;
    }
    
    .grid-card {
        box-shadow: none;
        padding: 0;
    }
    
    .mud-toolbar,
    .mud-table-pagination {
        display: none !important;
    }
    
    .mud-table-container {
        border: none !important;
    }
}
</style>

<MudDataGrid T="TItem" MultiSelection="true" Items="@Items" SortMode="SortMode.Multiple"
             Filterable="true" QuickFilter="@QuickFilter" Hideable="true"
             RowClick="@OnRowClick" SelectedItemsChanged="@OnSelectedItemsChanged"
             Class="custom-data-grid">

    <ToolBarContent>
        <MudSpacer />

        @if (ShowSwitch)
        {
            <div class="d-flex align-center mr-4">
                <div class="custom-control custom-switch">
                    <input type="checkbox" class="custom-control-input" id="customSwitch"
                           checked="@SwitchValue" disabled="@SwitchDisabled"
                           @onchange="@OnBootstrapSwitchChanged" />
                    <label class="custom-control-label" for="customSwitch">@SwitchLabel</label>
                </div>
            </div>
        }

        <MudTextField @bind-Value="SearchString" Placeholder="Search" Adornment="Adornment.Start"
                      Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="MudBlazor.Size.Medium" Class="search-field" />
    </ToolBarContent>

    <Columns>
        @foreach (var column in Columns)
        {
            <TemplateColumn Title="@column.Title">
                <CellTemplate Context="item">
                    @{
                        var value = column.Property.Compile().Invoke(item.Item);
                        var displayValue = column.Formatter != null
                        ? column.Formatter(item.Item)
                        : value?.ToString();
                    }
                    <div>@displayValue</div>
                </CellTemplate>
            </TemplateColumn>
        }

        @if (ShowRowButton)
        {
            <TemplateColumn Title="@RowButtonTitle" Sortable="false">
                <CellTemplate Context="item">
                    <MudButton Variant="Variant.Filled" Size="MudBlazor.Size.Small"
                               OnClick="@( () => OnRowButtonClick.InvokeAsync(item.Item))"
                               StartIcon="@RowButtonIcon"
                               Class="grid-row-button px-2 py-1">
                        @RowButtonText
                    </MudButton>
                </CellTemplate>
            </TemplateColumn>
        }
    </Columns>

    <PagerContent>
        <MudDataGridPager T="TItem" />
    </PagerContent>
</MudDataGrid>

@code
{
    private string searchString;

    [Parameter]
    public string SearchString
    {
        get => searchString;
        set
        {
            if (searchString != value)
            {
                searchString = value;
                UpdateQuickFilter();
            }
        }
    }

    // Switch Parameters
    [Parameter] public bool ShowSwitch { get; set; }
    [Parameter] public bool SwitchValue { get; set; }
    [Parameter] public EventCallback<bool> SwitchValueChanged { get; set; }
    [Parameter] public string SwitchLabel { get; set; } = "Toggle";
    [Parameter] public string SwitchClassName { get; set; }
    [Parameter] public bool SwitchDisabled { get; set; }

    // Grid Parameters
    [Parameter] public IEnumerable<TItem> Items { get; set; }
    [Parameter] public Func<TItem, bool> QuickFilter { get; set; }
    [Parameter] public List<ColumnDefinition<TItem>> Columns { get; set; }
    [Parameter] public EventCallback<DataGridRowClickEventArgs<TItem>> OnRowClick { get; set; }
    [Parameter] public EventCallback<HashSet<TItem>> OnSelectedItemsChanged { get; set; }

    // Row Button Parameters
    [Parameter] public bool ShowRowButton { get; set; }
    [Parameter] public string RowButtonText { get; set; } = "Action";
    [Parameter] public string RowButtonTitle { get; set; } = "Actions";
    [Parameter] public string RowButtonIcon { get; set; } = Icons.Material.Filled.Edit;
    [Parameter] public EventCallback<TItem> OnRowButtonClick { get; set; }

    private async Task OnBootstrapSwitchChanged(ChangeEventArgs e)
    {
        if (e.Value is bool value)
        {
            SwitchValue = value;
            if (SwitchValueChanged.HasDelegate)
            {
                await SwitchValueChanged.InvokeAsync(value);
            }
        }
    }

    private void UpdateQuickFilter()
    {
        QuickFilter = item =>
        {
            if (item == null) return false;

            if (item is CustomerHiddenViewModel customer)
            {
                return string.IsNullOrWhiteSpace(SearchString) ||
                       (!string.IsNullOrEmpty(customer.Id.ToString()) && customer.Id.ToString().Contains(SearchString, StringComparison.OrdinalIgnoreCase)) ||
                       (!string.IsNullOrEmpty(customer.Name) && customer.Name.Contains(SearchString, StringComparison.OrdinalIgnoreCase)) ||
                       (!string.IsNullOrEmpty(customer.Type) && customer.Type.Contains(SearchString, StringComparison.OrdinalIgnoreCase)) ||
                       (customer.LastDate.HasValue && customer.LastDate.Value.ToString("yyyy-MM-dd").Contains(SearchString, StringComparison.OrdinalIgnoreCase));
            }

            if (item is DeptCustomerViewModel debtor)
            {
                return string.IsNullOrWhiteSpace(SearchString) ||
                       (!string.IsNullOrEmpty(debtor.Id.ToString()) && debtor.Id.ToString().Contains(SearchString, StringComparison.OrdinalIgnoreCase)) ||
                       (!string.IsNullOrEmpty(debtor.CustomerName) && debtor.CustomerName.Contains(SearchString, StringComparison.OrdinalIgnoreCase)) ||
                       debtor.TotalTransTotalN.ToString().Contains(SearchString, StringComparison.OrdinalIgnoreCase) ||
                       (!string.IsNullOrWhiteSpace(debtor.HasRecentReceipt) && debtor.HasRecentReceipt.Contains(SearchString, StringComparison.OrdinalIgnoreCase));
            }

            if (item is InvoiceViewModel invoice)
            {
                return string.IsNullOrWhiteSpace(SearchString) ||
                       (!string.IsNullOrEmpty(invoice.CustomerName) && invoice.CustomerName.Contains(SearchString, StringComparison.OrdinalIgnoreCase)) ||
                       (!string.IsNullOrEmpty(invoice.CustomerType) && invoice.CustomerType.Contains(SearchString, StringComparison.OrdinalIgnoreCase)) ||
                       invoice.Id.ToString().Contains(SearchString, StringComparison.OrdinalIgnoreCase) ||
                       (!string.IsNullOrWhiteSpace(invoice.InvoiceBranch) && invoice.InvoiceBranch.Contains(SearchString, StringComparison.OrdinalIgnoreCase)) ||
                       (!string.IsNullOrWhiteSpace(invoice.TaskStatus) && invoice.TaskStatus.Contains(SearchString, StringComparison.OrdinalIgnoreCase));
            }

            return false;
        };

        StateHasChanged();
    }
}


<script>
    window.openModal = function (modalId) {
        $('#' + modalId).modal('show');
    };

    window.closeModal = function (modalId) {
        $('#' + modalId).modal('hide');
    };

</script>





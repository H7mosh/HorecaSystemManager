@page "/Stories"
@using Microsoft.AspNetCore.Components.Forms
@using sacmy.Client.Services
@using sacmy.Shared.Core
@using sacmy.Shared.ViewModels
@using System.Net.Http.Json
@using sacmy.Client.Components.CustomDataGrid
@using sacmy.Client.Components.DialogHeader
@using sacmy.Shared.ViewModels.BrandViewModel
@using sacmy.Shared.ViewModels.Products
@using sacmy.Shared.ViewModels.StoryViewModel
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject UserGlobalClass UserGlobal
@inject StoryService StoryService
@inject ProductsService ProductService
@inject ToastService ToastService
@inject BrandService BrandService
@implements IDisposable

<style>
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--spacing-lg, 1.5rem);
        padding-bottom: 0.75rem;
        border-bottom: 1px solid var(--border-color, #dee2e6);
    }

    .story-card {
        border-radius: var(--border-radius, 0.5rem);
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s, box-shadow 0.2s;
        height: 100%;
        position: relative;
    }

        .story-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

    .story-media-container {
        position: relative;
        height: 200px;
        overflow: hidden;
        background-color: #000;
    }

    .story-media {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .story-media-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(to bottom, rgba(0, 0, 0, 0.3) 0%, rgba(0, 0, 0, 0.6) 100%);
        display: flex;
        align-items: flex-end;
        padding: 15px;
    }

    .story-body {
        padding: 15px;
    }

    .story-brand {
        position: absolute;
        top: 15px;
        left: 15px;
        display: flex;
        align-items: center;
        color: white;
        z-index: 10;
    }

    .brand-image {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        margin-right: 8px;
        border: 2px solid white;
        object-fit: cover;
    }

    .story-type-badge {
        position: absolute;
        top: 15px;
        right: 15px;
        background-color: rgba(0, 0, 0, 0.6);
        color: white;
        font-size: 12px;
        font-weight: bold;
        padding: 4px 8px;
        border-radius: 20px;
        z-index: 10;
    }

    .story-time {
        font-size: 12px;
        color: #6c757d;
        display: flex;
        align-items: center;
    }

    .expiration-badge {
        position: absolute;
        bottom: 15px;
        right: 15px;
        background-color: rgba(0, 0, 0, 0.6);
        color: white;
        font-size: 12px;
        font-weight: bold;
        padding: 4px 8px;
        border-radius: 20px;
        display: flex;
        align-items: center;
        z-index: 10;
    }

    .view-count {
        position: absolute;
        bottom: 15px;
        left: 15px;
        background-color: rgba(0, 0, 0, 0.6);
        color: white;
        font-size: 12px;
        font-weight: bold;
        padding: 4px 8px;
        border-radius: 20px;
        display: flex;
        align-items: center;
        z-index: 10;
    }

    .story-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 0.5rem;
    }

    .story-message {
        max-height: 60px;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
    }

    .play-button {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(0, 0, 0, 0.6);
        color: white;
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
        cursor: pointer;
        transition: background-color 0.2s;
        z-index: 10;
    }

        .play-button:hover {
            background-color: rgba(0, 0, 0, 0.8);
        }

    .expired {
        opacity: 0.7;
    }

    .filter-bar {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 20px;
        align-items: center;
    }

    .filter-group {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .filter-label {
        font-weight: 500;
        margin-bottom: 0;
    }
    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .filter-bar

    {
        flex-direction: column;
        align-items: flex-start;
    }

    .filter-group {
        width: 100%;
    }

    }
</style>

<div class="container-fluid px-4 py-3">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center mb-3">
        <div class="d-flex align-items-center mb-2 mb-md-0">
            <i class="bi bi-instagram fs-4 me-2"></i>
            <h4 class="mb-0">Story Management</h4>
        </div>
        <button class="btn btn-primary" @onclick="OpenCreateModal">
            <i class="bi bi-plus-circle me-1"></i> Create New Story
        </button>
    </div>

    <div class="card mb-4 shadow-sm">
        <div class="card-body p-3">
            <!-- Filter Options -->
            <div class="filter-bar">
                <div class="filter-group">
                    <span class="filter-label">Filter:</span>
                    <select class="form-select form-select-sm" @bind="FilterType">
                        <option value="all">All Stories</option>
                        <option value="active">Active Stories</option>
                        <option value="expired">Expired Stories</option>
                    </select>
                </div>

                <div class="filter-group">
                    <span class="filter-label">Media Type:</span>
                    <select class="form-select form-select-sm" @bind="MediaTypeFilter">
                        <option value="all">All Types</option>
                        <option value="image">Images Only</option>
                        <option value="video">Videos Only</option>
                    </select>
                </div>

                <div class="filter-group ms-auto">
                    <div class="input-group">
                        <input type="text" class="form-control form-control-sm"
                               placeholder="Search stories..."
                               @bind="SearchQuery"
                               @bind:event="oninput"
                               @onkeyup="@(e => { if (e.Key == "Enter") ApplyFilters(); })" />
                        <button class="btn btn-primary btn-sm" @onclick="ApplyFilters">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                </div>
            </div>

            @if (IsLoading)
            {
                <div class="d-flex justify-content-center p-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (FilteredStories == null || !FilteredStories.Any())
            {
                <div class="alert alert-info" role="alert">
                    <i class="bi bi-info-circle me-2"></i> No stories found.
                </div>
            }
            else
            {
                <div class="row g-3">
                    @foreach (var story in FilteredStories)
                    {
                        <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                            <div class="story-card @(story.IsExpired ? "expired" : "")">
                                <div class="story-media-container">
                                    <div class="story-brand">
                                        <img src=@story.BrandImage alt="Brand" class="brand-image" />
                                        <span>@story.BrandName</span>
                                    </div>

                                    <div class="story-type-badge">
                                        <i class="bi @(story.MediaType == "video" ? "bi-film" : "bi-image") me-1"></i>
                                        @story.MediaType
                                    </div>

                                    @if (story.MediaType == "image")
                                    {
                                        <img src="@story.MediaUrl" class="story-media" alt="Story"
                                             onerror="this.onerror=null; this.src='/images/placeholder-image.png';" />
                                    }
                                    else
                                    {
                                        <div class="story-media" style="background-color: #000;">
                                            <img src="/images/video-placeholder.png" style="opacity: 0.7; object-fit: cover; width: 100%; height: 100%;" alt="Video Thumbnail" />
                                        </div>
                                    }

                                    <button class="play-button" @onclick="() => PlayStory(story)">
                                        <i class="bi bi-play-fill"></i>
                                    </button>

                                    <div class="view-count">
                                        <i class="bi bi-eye me-1"></i> @story.ViewCount
                                    </div>

                                    <div class="expiration-badge">
                                        <i class="bi @(story.IsExpired ? "bi-clock-history" : "bi-clock") me-1"></i>
                                        @(story.IsExpired ? "Expired" : story.TimeRemaining)
                                    </div>
                                </div>

                                <div class="story-body">
                                    <div class="story-time">
                                        <i class="bi bi-calendar-event me-1"></i> Created @story.CreatedAt.ToString("MMM dd, yyyy HH:mm")
                                    </div>

                                    @if (!string.IsNullOrEmpty(story.Message))
                                    {
                                        <p class="story-message mt-2">@story.Message</p>
                                    }

                                    <div class="story-actions">
                                        <button class="btn btn-sm btn-primary" @onclick="() => PlayStory(story)">
                                            <i class="bi bi-play-fill me-1"></i> Play
                                        </button>

                                        <div>
                                            <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => EditStory(story)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => OpenDeleteModal(story)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<StoryPlayer IsVisible="@IsStoryPlayerVisible"
             CurrentStory="@CurrentStoryToPlay"
             ProductDetails="@CurrentProductDetails"
             StoryList="@FilteredStories"
             CurrentIndex="@CurrentStoryIndex"
             OnClose="@CloseStoryPlayer"
             OnStoryChange="@ChangeCurrentStory"
             OnViewProduct="@ViewProduct" />

@if (IsEditModalVisible)
{
    <StoryEditModal IsVisible="@IsEditModalVisible"
                    IsNewStory="@IsNewStory"
                    CurrentStory="@StoryToEdit"
                    StoryDetails="@StoryDetailsForEdit"
                    SelectedProduct="@SelectedProduct"
                    ProductSkuSearchText="@ProductSkuSearchText"
                    ProductSkuSearchTextChanged="@HandleProductSkuSearchTextChanged"
                    Brands="@Brands"
                    IsSaving="@IsSaving"
                    IsProductSearching="@IsProductSearching"
                    IsUploading="@IsUploading"
                    ProductSearchError="@ProductSearchError"
                    OnClose="@CloseEditModal"
                    OnSearchProduct="@SearchProductBySku"
                    OnClearProduct="@ClearSelectedProduct"
                    OnFileSelected="@HandleFileSelected"
                    OnClearMedia="@ClearMedia"
                    OnSave="@SaveStory" />
}


@if (IsDeleteModalVisible)
{
    <StoryDeleteModal IsVisible="@IsDeleteModalVisible"
                      StoryToDelete="@StoryToDelete"
                      OnClose="@CloseDeleteModal"
                      OnDelete="@DeleteStory" />
}


@code {
    private List<GetStoryViewModel> Stories = new List<GetStoryViewModel>();
    private List<GetStoryViewModel> FilteredStories = new List<GetStoryViewModel>();
    private List<BrandViewModel> Brands = new List<BrandViewModel>();
    private string SearchQuery = "";
    private string FilterType = "all"; 
    private string MediaTypeFilter = "all"; 
    private bool IsLoading = true;

    // Story player properties
    private bool IsStoryPlayerVisible = false;
    private GetStoryViewModel CurrentStoryToPlay;
    private ProductDetailViewModel CurrentProductDetails;
    private int CurrentStoryIndex = 0;

    // Edit modal properties
    private bool IsEditModalVisible = false;
    private bool IsNewStory = false;
    private bool IsSaving = false;
    private CreateStoryViewModel StoryToEdit = new CreateStoryViewModel();
    private GetStoryViewModel StoryDetailsForEdit;

    // Delete modal properties
    private bool IsDeleteModalVisible = false;
    private GetStoryViewModel StoryToDelete;

    // Product search properties
    private string ProductSkuSearchText = "";
    private ProductDetailViewModel SelectedProduct;
    private bool IsProductSearching = false;
    private string ProductSearchError;

    // File upload properties
    private IBrowserFile SelectedFile;
    private bool IsUploading = false;
    private long MaxFileSize = 15 * 1024 * 1024; // 15MB max

    // Timer for auto-refresh
    private System.Threading.Timer _refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadBrands();
        await LoadStories();

        _refreshTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadStories();
                StateHasChanged();
            });
        }, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
    }

    private async Task LoadBrands()
    {
        try
        {
            Brands = await BrandService.GetBrandsAsync();

        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error loading brands: {ex.Message}", "danger");
        }
    }

    private async Task LoadStories()
    {
        IsLoading = true;
        try
        {
            Stories = await StoryService.GetAllStoriesAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error loading stories: {ex.Message}", "danger");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void ApplyFilters()
    {
        FilteredStories = Stories;

        if (!string.IsNullOrWhiteSpace(SearchQuery))
        {
            FilteredStories = FilteredStories
                .Where(s =>
                    (s.BrandName?.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (s.Message?.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ?? false))
                .ToList();
        }

        // Apply expiration filter
        if (FilterType == "active")
        {
            FilteredStories = FilteredStories.Where(s => !s.IsExpired).ToList();
        }
        else if (FilterType == "expired")
        {
            FilteredStories = FilteredStories.Where(s => s.IsExpired).ToList();
        }

        // Apply media type filter
        if (MediaTypeFilter == "image")
        {
            FilteredStories = FilteredStories.Where(s => s.MediaType == "image").ToList();
        }
        else if (MediaTypeFilter == "video")
        {
            FilteredStories = FilteredStories.Where(s => s.MediaType == "video").ToList();
        }
    }

    private void PlayStory(GetStoryViewModel story)
    {
        CurrentStoryToPlay = story;
        CurrentStoryIndex = FilteredStories.IndexOf(story);
        IsStoryPlayerVisible = true;

        LoadProductForStory(story);
    }

    private async Task ChangeCurrentStory(int index)
    {
        if (index >= 0 && index < FilteredStories.Count)
        {
            CurrentStoryIndex = index;
            CurrentStoryToPlay = FilteredStories[index];

            await LoadProductForStory(CurrentStoryToPlay);
        }
    }

    private async Task LoadProductForStory(GetStoryViewModel story)
    {
        try
        {
            if (!string.IsNullOrEmpty(story.Message) && story.Message.Contains("SKU:"))
            {
                var sku = story.Message.Split("SKU:")[1].Trim().Split(' ')[0];
                var response = await ProductService.SearchProductsBySkuAsync(sku);

                if (response.Success && response.Data != null && response.Data.Any())
                {
                    CurrentProductDetails = response.Data.First();
                    StoryToEdit.Message = CurrentProductDetails.Id;
                }
                else
                {
                    CurrentProductDetails = null;
                }
            }
            else
            {
                CurrentProductDetails = null;
            }
        }
        catch
        {
            CurrentProductDetails = null;
        }
    }

    private void CloseStoryPlayer()
    {
        IsStoryPlayerVisible = false;
        CurrentStoryToPlay = null;
    }

    private async Task ViewProduct(Guid productId)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Navigate to product: {productId}");
    }

    private void OpenCreateModal()
    {
        StoryToEdit = new CreateStoryViewModel
        {
            UserId = UserGlobal.User.Id,
            Description = "product",
            CreatedBy = Guid.Empty
            
        };

        SelectedProduct = null;
        ProductSkuSearchText = "";
        ProductSearchError = null;
        IsNewStory = true;
        StoryDetailsForEdit = null;
        IsEditModalVisible = true;
    }

    private void EditStory(GetStoryViewModel story)
    {
        StoryToEdit = new CreateStoryViewModel
        {
            UserId = story.UserId,
            MediaUrl = story.MediaUrl,
            MediaType = story.MediaType,
            Description = story.Description,
            Message = story.Message,
            CreatedBy = story.CreatedBy
        };

        StoryDetailsForEdit = story;
        ProductSkuSearchText = "";
        ProductSearchError = null;

        IsNewStory = false;
        StoryToDelete = story;
        IsEditModalVisible = true;

        // Load the product information if available
        // if (!string.IsNullOrEmpty(story.Message) && story.Message.Contains("SKU:"))
        // {
        //     var sku = story;
        //     ProductSkuSearchText = sku;
        //     SearchProductBySku();
        // }
    }

    private void CloseEditModal()
    {
        IsEditModalVisible = false;
    }

    private void OpenDeleteModal(GetStoryViewModel story)
    {
        StoryToDelete = story;
        IsDeleteModalVisible = true;
    }

    private void CloseDeleteModal()
    {
        IsDeleteModalVisible = false;
    }

    private Task HandleProductSkuSearchTextChanged(string newValue)
    {
        ProductSkuSearchText = newValue;
        return Task.CompletedTask;
    }

    private async Task SearchProductBySku()
    {
        if (string.IsNullOrWhiteSpace(ProductSkuSearchText))
        {
            ProductSearchError = "Please enter a SKU to search";
            return;
        }

        try
        {
            IsProductSearching = true;
            ProductSearchError = null;
            StateHasChanged();

            string searchedSku = ProductSkuSearchText;

            var response = await ProductService.SearchProductsBySkuAsync(searchedSku);

            if (ProductSkuSearchText != searchedSku)
            {
                return;
            }

            if (response.Success && response.Data != null && response.Data.Any())
            {
                SelectedProduct = response.Data.First();

                if (SelectedProduct != null)
                {
                    StoryToEdit.Message =SelectedProduct.Id;
                }
            }
            else
            {
                ProductSearchError = response.Message ?? "No product found with the specified SKU";
                SelectedProduct = null;
            }
        }
        catch (Exception ex)
        {
            ProductSearchError = $"Error searching for product: {ex.Message}";
            SelectedProduct = null;
        }
        finally
        {
            IsProductSearching = false;
            StateHasChanged();
        }
    }

    private void ClearSelectedProduct()
    {
        SelectedProduct = null;
        StoryToEdit.Message = "";
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            SelectedFile = e.File;

            if (!SelectedFile.ContentType.StartsWith("image/") && !SelectedFile.ContentType.StartsWith("video/"))
            {
                ToastService.ShowToast("Please select an image or video file", "warning");
                return;
            }

            if (SelectedFile.Size > MaxFileSize)
            {
                ToastService.ShowToast($"File size exceeds the maximum allowed size of {MaxFileSize / (1024 * 1024)}MB", "warning");
                return;
            }

            string mediaType = SelectedFile.ContentType.StartsWith("image/") ? "image" : "video";

            await UploadStoryMedia(SelectedFile, mediaType);
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error selecting file: {ex.Message}", "danger");
        }
    }

    private async Task UploadStoryMedia(IBrowserFile file, string mediaType)
    {
        IsUploading = true;
        StateHasChanged();

        try
        {
            using var content = new MultipartFormDataContent();

            var fileContent = new StreamContent(file.OpenReadStream(MaxFileSize));
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

            content.Add(fileContent, "media", file.Name);

            content.Add(new StringContent(mediaType), "mediaType");

            var response = await StoryService.UploadStoryMediaAsync(content);

            if (response.Success && response.Data != null)
            {
                StoryToEdit.MediaUrl = response.Data.ToString();
                StoryToEdit.MediaType = mediaType;
                ToastService.ShowToast("Media uploaded successfully", "success");
            }
            else
            {
                ToastService.ShowToast($"Upload failed: {response.Message}", "danger");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error uploading file: {ex.Message}", "danger");
        }
        finally
        {
            IsUploading = false;
            StateHasChanged();
        }
    }

    private void ClearMedia()
    {
        StoryToEdit.MediaUrl = null;
        StoryToEdit.MediaType = null;
        SelectedFile = null;
    }

    private async Task SaveStory()
    {
        if (string.IsNullOrEmpty(StoryToEdit.MediaUrl))
        {
            ToastService.ShowToast("Please upload an image or video", "warning");
            return;
        }

        if (StoryToEdit.CreatedBy == Guid.Empty)
        {
            ToastService.ShowToast("Please select a brand", "warning");
            return;
        }

        if (SelectedProduct == null)
        {
            ToastService.ShowToast("Please select a product", "warning");
            return;
        }

        IsSaving = true;
        StateHasChanged();

        try
        {
            ApiResponse response;

            if (IsNewStory)
            {
                var result = await StoryService.CreateStoryAsync(StoryToEdit);
                response = result;
            }
            else if (StoryDetailsForEdit != null)
            {
                var updateModel = new UpdateStoryViewModel
                {
                    MediaUrl = StoryToEdit.MediaUrl,
                    MediaType = StoryToEdit.MediaType,
                    Description = StoryToEdit.Description,
                    Message = StoryToEdit.Message,
                    CreatedBy = StoryToEdit.CreatedBy
                };

                response = await StoryService.UpdateStoryAsync(StoryDetailsForEdit.Id, updateModel);
            }
            else
            {
                throw new Exception("Invalid story edit state");
            }

            if (response != null && response.Success)
            {
                await LoadStories();
                CloseEditModal();
                ToastService.ShowToast(response.Message, "success");
            }
            else
            {
                ToastService.ShowToast($"Error: {response?.Message ?? "Unknown error"}", "danger");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error saving story: {ex.Message}", "danger");
        }
        finally
        {
            IsSaving = false;
        }
    }

    private async Task DeleteStory()
    {
        if (StoryToDelete != null)
        {
            try
            {
                var response = await StoryService.DeleteStoryAsync(StoryToDelete.Id);

                if (response != null && response.Success)
                {
                    await LoadStories();
                    CloseDeleteModal();
                    ToastService.ShowToast(response.Message, "success");
                }
                else
                {
                    ToastService.ShowToast($"Error: {response?.Message ?? "Unknown error"}", "danger");
                }
            }
            catch (Exception ex)
            {
                ToastService.ShowToast($"Error deleting story: {ex.Message}", "danger");
            }
        }
    }

    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }


}